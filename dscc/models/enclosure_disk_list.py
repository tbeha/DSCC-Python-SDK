# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.disk_position import DiskPosition
from dscc.models.ed_dc4data import EdDc4data
from dscc.models.ed_dcsdata import EdDcsdata
from dscc.models.enclosure_disk_loop import EnclosureDiskLoop
from dscc.models.enclosure_type import EnclosureType
from dscc.models.manufacturing_single import ManufacturingSingle
from dscc.models.primera_common_resource_attributes import PrimeraCommonResourceAttributes
from typing import Optional, Set
from typing_extensions import Self

class EnclosureDiskList(BaseModel):
    """
    EnclosureDiskList
    """ # noqa: E501
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    common_resource_attributes: Optional[PrimeraCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    dc4data: Optional[EdDc4data] = None
    dcsdata: Optional[EdDcsdata] = None
    displayname: Optional[StrictStr] = Field(default=None, description="Enclosure Display name")
    domain: Optional[StrictStr] = Field(default=None, description="Domain that the resource belongs to")
    enclosure_device_id: Optional[StrictInt] = Field(default=None, alias="enclosureDeviceId")
    enclosure_id: Optional[StrictStr] = Field(default=None, description="Parent UID of the resource. `Filter`", alias="enclosureId")
    enclosure_name: Optional[StrictStr] = Field(default=None, description="Name of the enclosure", alias="enclosureName")
    enclosure_type: Optional[EnclosureType] = Field(default=None, alias="enclosureType")
    generation: Optional[StrictInt] = Field(default=None, description="generation `Filter, Sort`")
    id: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the resource. `Filter`")
    loop_a: Optional[EnclosureDiskLoop] = Field(default=None, alias="loopA")
    loop_b: Optional[EnclosureDiskLoop] = Field(default=None, alias="loopB")
    manufacturing: Optional[ManufacturingSingle] = None
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Name of the resource. `Filter, Sort`")
    position: Optional[DiskPosition] = None
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed enclosure disk object", alias="resourceUri")
    system_id: Optional[StrictStr] = Field(default=None, description="SystemUid/Serial Number  of the array.", alias="systemId")
    temperature: Optional[StrictInt] = Field(default=None, description="temperature of the resource part")
    type: Optional[StrictStr] = Field(default=None, description="type")
    wwn: Optional[StrictStr] = Field(default=None, description="WWN of the resource. `Filter, Sort`")
    __properties: ClassVar[List[str]] = ["associatedLinks", "commonResourceAttributes", "customerId", "dc4data", "dcsdata", "displayname", "domain", "enclosureDeviceId", "enclosureId", "enclosureName", "enclosureType", "generation", "id", "loopA", "loopB", "manufacturing", "name", "position", "resourceUri", "systemId", "temperature", "type", "wwn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnclosureDiskList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dc4data
        if self.dc4data:
            _dict['dc4data'] = self.dc4data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dcsdata
        if self.dcsdata:
            _dict['dcsdata'] = self.dcsdata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loop_a
        if self.loop_a:
            _dict['loopA'] = self.loop_a.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loop_b
        if self.loop_b:
            _dict['loopB'] = self.loop_b.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manufacturing
        if self.manufacturing:
            _dict['manufacturing'] = self.manufacturing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # set to None if associated_links (nullable) is None
        # and model_fields_set contains the field
        if self.associated_links is None and "associated_links" in self.model_fields_set:
            _dict['associatedLinks'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if dc4data (nullable) is None
        # and model_fields_set contains the field
        if self.dc4data is None and "dc4data" in self.model_fields_set:
            _dict['dc4data'] = None

        # set to None if dcsdata (nullable) is None
        # and model_fields_set contains the field
        if self.dcsdata is None and "dcsdata" in self.model_fields_set:
            _dict['dcsdata'] = None

        # set to None if displayname (nullable) is None
        # and model_fields_set contains the field
        if self.displayname is None and "displayname" in self.model_fields_set:
            _dict['displayname'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if enclosure_device_id (nullable) is None
        # and model_fields_set contains the field
        if self.enclosure_device_id is None and "enclosure_device_id" in self.model_fields_set:
            _dict['enclosureDeviceId'] = None

        # set to None if enclosure_id (nullable) is None
        # and model_fields_set contains the field
        if self.enclosure_id is None and "enclosure_id" in self.model_fields_set:
            _dict['enclosureId'] = None

        # set to None if enclosure_name (nullable) is None
        # and model_fields_set contains the field
        if self.enclosure_name is None and "enclosure_name" in self.model_fields_set:
            _dict['enclosureName'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if loop_a (nullable) is None
        # and model_fields_set contains the field
        if self.loop_a is None and "loop_a" in self.model_fields_set:
            _dict['loopA'] = None

        # set to None if loop_b (nullable) is None
        # and model_fields_set contains the field
        if self.loop_b is None and "loop_b" in self.model_fields_set:
            _dict['loopB'] = None

        # set to None if manufacturing (nullable) is None
        # and model_fields_set contains the field
        if self.manufacturing is None and "manufacturing" in self.model_fields_set:
            _dict['manufacturing'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict['position'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if temperature (nullable) is None
        # and model_fields_set contains the field
        if self.temperature is None and "temperature" in self.model_fields_set:
            _dict['temperature'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if wwn (nullable) is None
        # and model_fields_set contains the field
        if self.wwn is None and "wwn" in self.model_fields_set:
            _dict['wwn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnclosureDiskList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedLinks": [AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "commonResourceAttributes": PrimeraCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "customerId": obj.get("customerId"),
            "dc4data": EdDc4data.from_dict(obj["dc4data"]) if obj.get("dc4data") is not None else None,
            "dcsdata": EdDcsdata.from_dict(obj["dcsdata"]) if obj.get("dcsdata") is not None else None,
            "displayname": obj.get("displayname"),
            "domain": obj.get("domain"),
            "enclosureDeviceId": obj.get("enclosureDeviceId"),
            "enclosureId": obj.get("enclosureId"),
            "enclosureName": obj.get("enclosureName"),
            "enclosureType": obj.get("enclosureType"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "loopA": EnclosureDiskLoop.from_dict(obj["loopA"]) if obj.get("loopA") is not None else None,
            "loopB": EnclosureDiskLoop.from_dict(obj["loopB"]) if obj.get("loopB") is not None else None,
            "manufacturing": ManufacturingSingle.from_dict(obj["manufacturing"]) if obj.get("manufacturing") is not None else None,
            "name": obj.get("name"),
            "position": DiskPosition.from_dict(obj["position"]) if obj.get("position") is not None else None,
            "resourceUri": obj.get("resourceUri"),
            "systemId": obj.get("systemId"),
            "temperature": obj.get("temperature"),
            "type": obj.get("type"),
            "wwn": obj.get("wwn")
        })
        return _obj


