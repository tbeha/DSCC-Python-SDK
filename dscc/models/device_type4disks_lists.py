# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dscc.models.device_type4_admit_time import DeviceType4AdmitTime
from dscc.models.device_type4_disk_capacity import DeviceType4DiskCapacity
from dscc.models.device_type4_disk_loop_inner import DeviceType4DiskLoopInner
from dscc.models.device_type4_disk_position import DeviceType4DiskPosition
from dscc.models.device_type4_disk_position_now import DeviceType4DiskPositionNow
from dscc.models.device_type4_error_count import DeviceType4ErrorCount
from dscc.models.device_type4_manufacturing_single import DeviceType4ManufacturingSingle
from dscc.models.device_type4_state import DeviceType4State
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4disksLists(BaseModel):
    """
    DeviceType4disksLists
    """ # noqa: E501
    admit_time: Optional[DeviceType4AdmitTime] = Field(default=None, alias="admitTime")
    capacity: Optional[DeviceType4DiskCapacity] = None
    consumable_size_mi_b: Optional[StrictInt] = Field(default=None, description="consumable size of disk in MiB", alias="consumableSizeMiB")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    dev_type: Optional[StrictStr] = Field(default=None, description="Type of the disk", alias="devType")
    disk_id: Optional[StrictInt] = Field(default=None, description="id of the disk", alias="diskId")
    displayname: Optional[StrictStr] = Field(default=None, description="Name to be used for display purposes")
    domain: Optional[StrictStr] = Field(default=None, description="Domain that the resource belongs to")
    enclosure_uid: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the enclosure", alias="enclosureUid")
    fw_status: Optional[StrictStr] = Field(default=None, description="firmware status", alias="fwStatus")
    fw_version: Optional[StrictStr] = Field(default=None, description="firmware version", alias="fwVersion")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    id: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the resource")
    insert_time: Optional[DeviceType4AdmitTime] = Field(default=None, alias="insertTime")
    life_left_pct: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Life Left Percentage", alias="lifeLeftPCT")
    manufacturing: Optional[DeviceType4ManufacturingSingle] = None
    media_type: Optional[StrictStr] = Field(default=None, description="Media Type of the disk", alias="mediaType")
    mfg_capacity_gb: Optional[StrictInt] = Field(default=None, description="manufacturing capacity of disk in GB", alias="mfgCapacityGB")
    paths: Optional[List[Optional[DeviceType4DiskLoopInner]]] = Field(default=None, description="Disk Loop")
    position_last: Optional[DeviceType4DiskPosition] = Field(default=None, alias="positionLast")
    position_now: Optional[DeviceType4DiskPositionNow] = Field(default=None, alias="positionNow")
    protocol: Optional[StrictStr] = Field(default=None, description="protocol over the disk")
    raw_size_mi_b: Optional[StrictInt] = Field(default=None, description="raw Size of disk in GB", alias="rawSizeMiB")
    read_errors: Optional[DeviceType4ErrorCount] = Field(default=None, alias="readErrors")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed disk object", alias="resourceUri")
    sed_status: Optional[StrictStr] = Field(default=None, description="SED Status", alias="sedStatus")
    state: Optional[DeviceType4State] = None
    system_id: Optional[StrictStr] = Field(default=None, description="SystemId / SerialNumber of the array", alias="systemId")
    type: Optional[StrictStr] = Field(default=None, description="type")
    write_errors: Optional[DeviceType4ErrorCount] = Field(default=None, alias="writeErrors")
    wwn: Optional[StrictStr] = Field(default=None, description="unique WWN of the disk")
    __properties: ClassVar[List[str]] = ["admitTime", "capacity", "consumableSizeMiB", "customerId", "devType", "diskId", "displayname", "domain", "enclosureUid", "fwStatus", "fwVersion", "generation", "id", "insertTime", "lifeLeftPCT", "manufacturing", "mediaType", "mfgCapacityGB", "paths", "positionLast", "positionNow", "protocol", "rawSizeMiB", "readErrors", "resourceUri", "sedStatus", "state", "systemId", "type", "writeErrors", "wwn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4disksLists from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of admit_time
        if self.admit_time:
            _dict['admitTime'] = self.admit_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of capacity
        if self.capacity:
            _dict['capacity'] = self.capacity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_time
        if self.insert_time:
            _dict['insertTime'] = self.insert_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manufacturing
        if self.manufacturing:
            _dict['manufacturing'] = self.manufacturing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in paths (list)
        _items = []
        if self.paths:
            for _item in self.paths:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paths'] = _items
        # override the default output from pydantic by calling `to_dict()` of position_last
        if self.position_last:
            _dict['positionLast'] = self.position_last.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position_now
        if self.position_now:
            _dict['positionNow'] = self.position_now.to_dict()
        # override the default output from pydantic by calling `to_dict()` of read_errors
        if self.read_errors:
            _dict['readErrors'] = self.read_errors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of write_errors
        if self.write_errors:
            _dict['writeErrors'] = self.write_errors.to_dict()
        # set to None if admit_time (nullable) is None
        # and model_fields_set contains the field
        if self.admit_time is None and "admit_time" in self.model_fields_set:
            _dict['admitTime'] = None

        # set to None if capacity (nullable) is None
        # and model_fields_set contains the field
        if self.capacity is None and "capacity" in self.model_fields_set:
            _dict['capacity'] = None

        # set to None if consumable_size_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.consumable_size_mi_b is None and "consumable_size_mi_b" in self.model_fields_set:
            _dict['consumableSizeMiB'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if dev_type (nullable) is None
        # and model_fields_set contains the field
        if self.dev_type is None and "dev_type" in self.model_fields_set:
            _dict['devType'] = None

        # set to None if disk_id (nullable) is None
        # and model_fields_set contains the field
        if self.disk_id is None and "disk_id" in self.model_fields_set:
            _dict['diskId'] = None

        # set to None if displayname (nullable) is None
        # and model_fields_set contains the field
        if self.displayname is None and "displayname" in self.model_fields_set:
            _dict['displayname'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if enclosure_uid (nullable) is None
        # and model_fields_set contains the field
        if self.enclosure_uid is None and "enclosure_uid" in self.model_fields_set:
            _dict['enclosureUid'] = None

        # set to None if fw_status (nullable) is None
        # and model_fields_set contains the field
        if self.fw_status is None and "fw_status" in self.model_fields_set:
            _dict['fwStatus'] = None

        # set to None if fw_version (nullable) is None
        # and model_fields_set contains the field
        if self.fw_version is None and "fw_version" in self.model_fields_set:
            _dict['fwVersion'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if insert_time (nullable) is None
        # and model_fields_set contains the field
        if self.insert_time is None and "insert_time" in self.model_fields_set:
            _dict['insertTime'] = None

        # set to None if life_left_pct (nullable) is None
        # and model_fields_set contains the field
        if self.life_left_pct is None and "life_left_pct" in self.model_fields_set:
            _dict['lifeLeftPCT'] = None

        # set to None if manufacturing (nullable) is None
        # and model_fields_set contains the field
        if self.manufacturing is None and "manufacturing" in self.model_fields_set:
            _dict['manufacturing'] = None

        # set to None if media_type (nullable) is None
        # and model_fields_set contains the field
        if self.media_type is None and "media_type" in self.model_fields_set:
            _dict['mediaType'] = None

        # set to None if mfg_capacity_gb (nullable) is None
        # and model_fields_set contains the field
        if self.mfg_capacity_gb is None and "mfg_capacity_gb" in self.model_fields_set:
            _dict['mfgCapacityGB'] = None

        # set to None if paths (nullable) is None
        # and model_fields_set contains the field
        if self.paths is None and "paths" in self.model_fields_set:
            _dict['paths'] = None

        # set to None if position_last (nullable) is None
        # and model_fields_set contains the field
        if self.position_last is None and "position_last" in self.model_fields_set:
            _dict['positionLast'] = None

        # set to None if position_now (nullable) is None
        # and model_fields_set contains the field
        if self.position_now is None and "position_now" in self.model_fields_set:
            _dict['positionNow'] = None

        # set to None if protocol (nullable) is None
        # and model_fields_set contains the field
        if self.protocol is None and "protocol" in self.model_fields_set:
            _dict['protocol'] = None

        # set to None if raw_size_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.raw_size_mi_b is None and "raw_size_mi_b" in self.model_fields_set:
            _dict['rawSizeMiB'] = None

        # set to None if read_errors (nullable) is None
        # and model_fields_set contains the field
        if self.read_errors is None and "read_errors" in self.model_fields_set:
            _dict['readErrors'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if sed_status (nullable) is None
        # and model_fields_set contains the field
        if self.sed_status is None and "sed_status" in self.model_fields_set:
            _dict['sedStatus'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if write_errors (nullable) is None
        # and model_fields_set contains the field
        if self.write_errors is None and "write_errors" in self.model_fields_set:
            _dict['writeErrors'] = None

        # set to None if wwn (nullable) is None
        # and model_fields_set contains the field
        if self.wwn is None and "wwn" in self.model_fields_set:
            _dict['wwn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4disksLists from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "admitTime": DeviceType4AdmitTime.from_dict(obj["admitTime"]) if obj.get("admitTime") is not None else None,
            "capacity": DeviceType4DiskCapacity.from_dict(obj["capacity"]) if obj.get("capacity") is not None else None,
            "consumableSizeMiB": obj.get("consumableSizeMiB"),
            "customerId": obj.get("customerId"),
            "devType": obj.get("devType"),
            "diskId": obj.get("diskId"),
            "displayname": obj.get("displayname"),
            "domain": obj.get("domain"),
            "enclosureUid": obj.get("enclosureUid"),
            "fwStatus": obj.get("fwStatus"),
            "fwVersion": obj.get("fwVersion"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "insertTime": DeviceType4AdmitTime.from_dict(obj["insertTime"]) if obj.get("insertTime") is not None else None,
            "lifeLeftPCT": obj.get("lifeLeftPCT"),
            "manufacturing": DeviceType4ManufacturingSingle.from_dict(obj["manufacturing"]) if obj.get("manufacturing") is not None else None,
            "mediaType": obj.get("mediaType"),
            "mfgCapacityGB": obj.get("mfgCapacityGB"),
            "paths": [DeviceType4DiskLoopInner.from_dict(_item) for _item in obj["paths"]] if obj.get("paths") is not None else None,
            "positionLast": DeviceType4DiskPosition.from_dict(obj["positionLast"]) if obj.get("positionLast") is not None else None,
            "positionNow": DeviceType4DiskPositionNow.from_dict(obj["positionNow"]) if obj.get("positionNow") is not None else None,
            "protocol": obj.get("protocol"),
            "rawSizeMiB": obj.get("rawSizeMiB"),
            "readErrors": DeviceType4ErrorCount.from_dict(obj["readErrors"]) if obj.get("readErrors") is not None else None,
            "resourceUri": obj.get("resourceUri"),
            "sedStatus": obj.get("sedStatus"),
            "state": DeviceType4State.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "systemId": obj.get("systemId"),
            "type": obj.get("type"),
            "writeErrors": DeviceType4ErrorCount.from_dict(obj["writeErrors"]) if obj.get("writeErrors") is not None else None,
            "wwn": obj.get("wwn")
        })
        return _obj


