# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.nimble_common_resource_attributes import NimbleCommonResourceAttributes
from dscc.models.nimble_ns_pool_summary import NimbleNsPoolSummary
from typing import Optional, Set
from typing_extensions import Self

class NimblePerformancePolicyListItemsInner(BaseModel):
    """
    NimblePerformancePolicyListItemsInner
    """ # noqa: E501
    app_category: Optional[StrictStr] = Field(default=None, description="Specifies the application category of the associated volume. `Filter, Sort`")
    cache: Optional[StrictBool] = Field(default=None, description="Flag denoting if data in the associated volume should be cached. `Filter, Sort`")
    cache_policy: Optional[StrictStr] = Field(default=None, description="Specifies how data of associated volume should be cached. Supports two policies, 'normal' and 'aggressive'. 'normal' policy caches data but skips in certain conditions such as sequential I/O. 'aggressive' policy will accelerate caching of all data belonging to this volume, regardless of sequentiality. Possible values:'normal', 'no_write', 'aggressive_read_no_write', 'disabled', 'aggressive'. `Filter, Sort`")
    compress: Optional[StrictBool] = Field(default=None, description="Flag denoting if data in the associated volume should be compressed. `Filter, Sort`")
    creation_time: Optional[StrictInt] = Field(default=None, description="Time when the performance policy was created. `Filter, Sort`")
    dedupe_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if dedupe is enabled for volumes created with this performance policy. `Filter, Sort`")
    id: Optional[StrictStr] = Field(default=None, description="Unique Identifier for the Performance Policy. `Filter`")
    last_modified: Optional[StrictInt] = Field(default=None, description="Time when the performance policy's configurations were last modified. `Filter, Sort`")
    name: Optional[StrictStr] = Field(default=None, description="Name of the Performance Policy. `Filter, Sort`")
    predefined: Optional[StrictBool] = Field(default=None, description="Specifies if this performance policy is predefined (read-only). `Filter, Sort`")
    space_policy: Optional[StrictStr] = Field(default=None, description="Specifies the state of the volume upon space constraint violation such as volume limit violation or volumes above their volume reserve, if the pool free space is exhausted. Supports two policies, 'offline' and 'non_writable'. Possible values:'offline', 'login_only', 'non_writable', 'read_only', 'invalid'. `Filter, Sort`")
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details")
    block_size: Optional[StrictInt] = Field(default=None, description="Block Size in bytes to be used by the volumes created with this specific performance policy. Supported block sizes are 4096 bytes (4 KB), 8192 bytes (8 KB), 16384 bytes(16 KB), and 32768 bytes (32 KB). Block size of a performance policy cannot be changed once the performance policy is created.")
    common_resource_attributes: Optional[NimbleCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    dedupe_override_pools: Optional[List[Optional[NimbleNsPoolSummary]]] = Field(default=None, description="List of pools that override performance policy's dedupe setting.")
    description: Optional[StrictStr] = Field(default=None, description="Description of a performance policy.")
    full_name: Optional[StrictStr] = Field(default=None, description="Fully qualified name of the Performance Policy.")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    perfpolicy_creator_id: Optional[StrictStr] = Field(default=None, description="Originator id for the performance policy.")
    perfpolicy_creator_name: Optional[StrictStr] = Field(default=None, description="Originator name for the performance policy.")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Link to the object URI", alias="resourceUri")
    search_name: Optional[StrictStr] = Field(default=None, description="Name of the Performance Policy used for object search.")
    type: Optional[StrictStr] = Field(default=None, description="type")
    volume_count: Optional[StrictInt] = Field(default=None, description="Number of volumes using this performance policy.")
    __properties: ClassVar[List[str]] = ["app_category", "cache", "cache_policy", "compress", "creation_time", "dedupe_enabled", "id", "last_modified", "name", "predefined", "space_policy", "associated_links", "block_size", "commonResourceAttributes", "consoleUri", "customerId", "dedupe_override_pools", "description", "full_name", "generation", "perfpolicy_creator_id", "perfpolicy_creator_name", "resourceUri", "search_name", "type", "volume_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimblePerformancePolicyListItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associated_links'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dedupe_override_pools (list)
        _items = []
        if self.dedupe_override_pools:
            for _item in self.dedupe_override_pools:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dedupe_override_pools'] = _items
        # set to None if app_category (nullable) is None
        # and model_fields_set contains the field
        if self.app_category is None and "app_category" in self.model_fields_set:
            _dict['app_category'] = None

        # set to None if cache (nullable) is None
        # and model_fields_set contains the field
        if self.cache is None and "cache" in self.model_fields_set:
            _dict['cache'] = None

        # set to None if cache_policy (nullable) is None
        # and model_fields_set contains the field
        if self.cache_policy is None and "cache_policy" in self.model_fields_set:
            _dict['cache_policy'] = None

        # set to None if compress (nullable) is None
        # and model_fields_set contains the field
        if self.compress is None and "compress" in self.model_fields_set:
            _dict['compress'] = None

        # set to None if creation_time (nullable) is None
        # and model_fields_set contains the field
        if self.creation_time is None and "creation_time" in self.model_fields_set:
            _dict['creation_time'] = None

        # set to None if dedupe_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_enabled is None and "dedupe_enabled" in self.model_fields_set:
            _dict['dedupe_enabled'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['last_modified'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if predefined (nullable) is None
        # and model_fields_set contains the field
        if self.predefined is None and "predefined" in self.model_fields_set:
            _dict['predefined'] = None

        # set to None if space_policy (nullable) is None
        # and model_fields_set contains the field
        if self.space_policy is None and "space_policy" in self.model_fields_set:
            _dict['space_policy'] = None

        # set to None if block_size (nullable) is None
        # and model_fields_set contains the field
        if self.block_size is None and "block_size" in self.model_fields_set:
            _dict['block_size'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if dedupe_override_pools (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_override_pools is None and "dedupe_override_pools" in self.model_fields_set:
            _dict['dedupe_override_pools'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['full_name'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if perfpolicy_creator_id (nullable) is None
        # and model_fields_set contains the field
        if self.perfpolicy_creator_id is None and "perfpolicy_creator_id" in self.model_fields_set:
            _dict['perfpolicy_creator_id'] = None

        # set to None if perfpolicy_creator_name (nullable) is None
        # and model_fields_set contains the field
        if self.perfpolicy_creator_name is None and "perfpolicy_creator_name" in self.model_fields_set:
            _dict['perfpolicy_creator_name'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if search_name (nullable) is None
        # and model_fields_set contains the field
        if self.search_name is None and "search_name" in self.model_fields_set:
            _dict['search_name'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if volume_count (nullable) is None
        # and model_fields_set contains the field
        if self.volume_count is None and "volume_count" in self.model_fields_set:
            _dict['volume_count'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimblePerformancePolicyListItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_category": obj.get("app_category"),
            "cache": obj.get("cache"),
            "cache_policy": obj.get("cache_policy"),
            "compress": obj.get("compress"),
            "creation_time": obj.get("creation_time"),
            "dedupe_enabled": obj.get("dedupe_enabled"),
            "id": obj.get("id"),
            "last_modified": obj.get("last_modified"),
            "name": obj.get("name"),
            "predefined": obj.get("predefined"),
            "space_policy": obj.get("space_policy"),
            "associated_links": [AssociatedLinksInner.from_dict(_item) for _item in obj["associated_links"]] if obj.get("associated_links") is not None else None,
            "block_size": obj.get("block_size"),
            "commonResourceAttributes": NimbleCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "customerId": obj.get("customerId"),
            "dedupe_override_pools": [NimbleNsPoolSummary.from_dict(_item) for _item in obj["dedupe_override_pools"]] if obj.get("dedupe_override_pools") is not None else None,
            "description": obj.get("description"),
            "full_name": obj.get("full_name"),
            "generation": obj.get("generation"),
            "perfpolicy_creator_id": obj.get("perfpolicy_creator_id"),
            "perfpolicy_creator_name": obj.get("perfpolicy_creator_name"),
            "resourceUri": obj.get("resourceUri"),
            "search_name": obj.get("search_name"),
            "type": obj.get("type"),
            "volume_count": obj.get("volume_count")
        })
        return _obj


