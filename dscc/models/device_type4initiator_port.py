# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4initiatorPort(BaseModel):
    """
    DeviceType4initiatorPort
    """ # noqa: E501
    aliases: Optional[StrictStr] = Field(default=None, description="Initiator port alias")
    current_speed: Optional[StrictStr] = Field(default=None, description="Initiator port current", alias="currentSpeed")
    hba_driver_version: Optional[StrictStr] = Field(default=None, description="Initiator port hba driver version", alias="hbaDriverVersion")
    hba_firmware_version: Optional[StrictStr] = Field(default=None, description="Initiator port hba firmware version", alias="hbaFirmwareVersion")
    hba_manufacturer: Optional[StrictStr] = Field(default=None, description="Initiator port hba manufacturer", alias="hbaManufacturer")
    hba_model: Optional[StrictStr] = Field(default=None, description="Initiator port hba model", alias="hbaModel")
    hba_os_name_version: Optional[StrictStr] = Field(default=None, description="Initiator port hba os version", alias="hbaOsNameVersion")
    host_name: Optional[StrictStr] = Field(default=None, description="Initiator port host name", alias="hostName")
    number: Optional[StrictInt] = Field(default=None, description="Initiator port number")
    os_device_name: Optional[StrictStr] = Field(default=None, description="Initiator port os device name", alias="osDeviceName")
    ssan_qos_support: Optional[StrictStr] = Field(default=None, description="Initiator port Smart SAN qos support", alias="ssanQosSupport")
    ssan_security_support: Optional[StrictStr] = Field(default=None, description="Initiator port Smart SAN security", alias="ssanSecuritySupport")
    supported_speeds: Optional[StrictStr] = Field(default=None, description="Initiator port supported speeds", alias="supportedSpeeds")
    wwn: Optional[StrictStr] = Field(default=None, description="Initiator port wwn")
    __properties: ClassVar[List[str]] = ["aliases", "currentSpeed", "hbaDriverVersion", "hbaFirmwareVersion", "hbaManufacturer", "hbaModel", "hbaOsNameVersion", "hostName", "number", "osDeviceName", "ssanQosSupport", "ssanSecuritySupport", "supportedSpeeds", "wwn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4initiatorPort from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if aliases (nullable) is None
        # and model_fields_set contains the field
        if self.aliases is None and "aliases" in self.model_fields_set:
            _dict['aliases'] = None

        # set to None if current_speed (nullable) is None
        # and model_fields_set contains the field
        if self.current_speed is None and "current_speed" in self.model_fields_set:
            _dict['currentSpeed'] = None

        # set to None if hba_driver_version (nullable) is None
        # and model_fields_set contains the field
        if self.hba_driver_version is None and "hba_driver_version" in self.model_fields_set:
            _dict['hbaDriverVersion'] = None

        # set to None if hba_firmware_version (nullable) is None
        # and model_fields_set contains the field
        if self.hba_firmware_version is None and "hba_firmware_version" in self.model_fields_set:
            _dict['hbaFirmwareVersion'] = None

        # set to None if hba_manufacturer (nullable) is None
        # and model_fields_set contains the field
        if self.hba_manufacturer is None and "hba_manufacturer" in self.model_fields_set:
            _dict['hbaManufacturer'] = None

        # set to None if hba_model (nullable) is None
        # and model_fields_set contains the field
        if self.hba_model is None and "hba_model" in self.model_fields_set:
            _dict['hbaModel'] = None

        # set to None if hba_os_name_version (nullable) is None
        # and model_fields_set contains the field
        if self.hba_os_name_version is None and "hba_os_name_version" in self.model_fields_set:
            _dict['hbaOsNameVersion'] = None

        # set to None if host_name (nullable) is None
        # and model_fields_set contains the field
        if self.host_name is None and "host_name" in self.model_fields_set:
            _dict['hostName'] = None

        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict['number'] = None

        # set to None if os_device_name (nullable) is None
        # and model_fields_set contains the field
        if self.os_device_name is None and "os_device_name" in self.model_fields_set:
            _dict['osDeviceName'] = None

        # set to None if ssan_qos_support (nullable) is None
        # and model_fields_set contains the field
        if self.ssan_qos_support is None and "ssan_qos_support" in self.model_fields_set:
            _dict['ssanQosSupport'] = None

        # set to None if ssan_security_support (nullable) is None
        # and model_fields_set contains the field
        if self.ssan_security_support is None and "ssan_security_support" in self.model_fields_set:
            _dict['ssanSecuritySupport'] = None

        # set to None if supported_speeds (nullable) is None
        # and model_fields_set contains the field
        if self.supported_speeds is None and "supported_speeds" in self.model_fields_set:
            _dict['supportedSpeeds'] = None

        # set to None if wwn (nullable) is None
        # and model_fields_set contains the field
        if self.wwn is None and "wwn" in self.model_fields_set:
            _dict['wwn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4initiatorPort from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aliases": obj.get("aliases"),
            "currentSpeed": obj.get("currentSpeed"),
            "hbaDriverVersion": obj.get("hbaDriverVersion"),
            "hbaFirmwareVersion": obj.get("hbaFirmwareVersion"),
            "hbaManufacturer": obj.get("hbaManufacturer"),
            "hbaModel": obj.get("hbaModel"),
            "hbaOsNameVersion": obj.get("hbaOsNameVersion"),
            "hostName": obj.get("hostName"),
            "number": obj.get("number"),
            "osDeviceName": obj.get("osDeviceName"),
            "ssanQosSupport": obj.get("ssanQosSupport"),
            "ssanSecuritySupport": obj.get("ssanSecuritySupport"),
            "supportedSpeeds": obj.get("supportedSpeeds"),
            "wwn": obj.get("wwn")
        })
        return _obj


