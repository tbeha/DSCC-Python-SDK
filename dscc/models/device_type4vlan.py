# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4vlan(BaseModel):
    """
    DeviceType4vlan
    """ # noqa: E501
    gateway_address: Optional[StrictStr] = Field(default=None, description="VLAN Gateway address for the iSCSI port", alias="gatewayAddress")
    gateway_address_v6: Optional[StrictStr] = Field(default=None, description="Gateway Address of iSCSI port. If Vlan is configured,then this is Vlan gateway address of this port.", alias="gatewayAddressV6")
    i_sns_primary_address: Optional[StrictStr] = Field(default=None, description="The iSNS server IP address", alias="iSNSPrimaryAddress")
    i_sns_tcp_port: Optional[StrictStr] = Field(default=None, description="TCP port number for the iSNS server", alias="iSNSTcpPort")
    ip_address: Optional[StrictStr] = Field(default=None, description="VLAN IP address for the iSCSI port", alias="ipAddress")
    ip_address_v6: Optional[StrictStr] = Field(default=None, description="IPv6 address of iSCSI port. If Vlan is configured,then this is Vlan IPv6 address of this port.", alias="ipAddressV6")
    mtu: Optional[StrictStr] = Field(default=None, description="Maximum transmission unit (MTU) size")
    send_target_group_tag: Optional[StrictInt] = Field(default=None, description="The SendTargets Group Tag (STGT) for the iSCSI port", alias="sendTargetGroupTag")
    subnet_mask: Optional[StrictStr] = Field(default=None, description="VLAN Subnet mask for the iSCSI port", alias="subnetMask")
    subnet_mask_v6: Optional[StrictStr] = Field(default=None, description="Netmask of iSCSI port. If Vlan is configured,then this is Vlan subnet mask of this port.", alias="subnetMaskV6")
    target_portal_group_tag: Optional[StrictInt] = Field(default=None, description="The Target portal Group Tag (TPGT) for the iSCSI port", alias="targetPortalGroupTag")
    vlan_id: Optional[StrictStr] = Field(default=None, description="VLAN id for the iSCSI port", alias="vlanId")
    __properties: ClassVar[List[str]] = ["gatewayAddress", "gatewayAddressV6", "iSNSPrimaryAddress", "iSNSTcpPort", "ipAddress", "ipAddressV6", "mtu", "sendTargetGroupTag", "subnetMask", "subnetMaskV6", "targetPortalGroupTag", "vlanId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4vlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if gateway_address (nullable) is None
        # and model_fields_set contains the field
        if self.gateway_address is None and "gateway_address" in self.model_fields_set:
            _dict['gatewayAddress'] = None

        # set to None if gateway_address_v6 (nullable) is None
        # and model_fields_set contains the field
        if self.gateway_address_v6 is None and "gateway_address_v6" in self.model_fields_set:
            _dict['gatewayAddressV6'] = None

        # set to None if i_sns_primary_address (nullable) is None
        # and model_fields_set contains the field
        if self.i_sns_primary_address is None and "i_sns_primary_address" in self.model_fields_set:
            _dict['iSNSPrimaryAddress'] = None

        # set to None if i_sns_tcp_port (nullable) is None
        # and model_fields_set contains the field
        if self.i_sns_tcp_port is None and "i_sns_tcp_port" in self.model_fields_set:
            _dict['iSNSTcpPort'] = None

        # set to None if ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address is None and "ip_address" in self.model_fields_set:
            _dict['ipAddress'] = None

        # set to None if ip_address_v6 (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address_v6 is None and "ip_address_v6" in self.model_fields_set:
            _dict['ipAddressV6'] = None

        # set to None if mtu (nullable) is None
        # and model_fields_set contains the field
        if self.mtu is None and "mtu" in self.model_fields_set:
            _dict['mtu'] = None

        # set to None if send_target_group_tag (nullable) is None
        # and model_fields_set contains the field
        if self.send_target_group_tag is None and "send_target_group_tag" in self.model_fields_set:
            _dict['sendTargetGroupTag'] = None

        # set to None if subnet_mask (nullable) is None
        # and model_fields_set contains the field
        if self.subnet_mask is None and "subnet_mask" in self.model_fields_set:
            _dict['subnetMask'] = None

        # set to None if subnet_mask_v6 (nullable) is None
        # and model_fields_set contains the field
        if self.subnet_mask_v6 is None and "subnet_mask_v6" in self.model_fields_set:
            _dict['subnetMaskV6'] = None

        # set to None if target_portal_group_tag (nullable) is None
        # and model_fields_set contains the field
        if self.target_portal_group_tag is None and "target_portal_group_tag" in self.model_fields_set:
            _dict['targetPortalGroupTag'] = None

        # set to None if vlan_id (nullable) is None
        # and model_fields_set contains the field
        if self.vlan_id is None and "vlan_id" in self.model_fields_set:
            _dict['vlanId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4vlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gatewayAddress": obj.get("gatewayAddress"),
            "gatewayAddressV6": obj.get("gatewayAddressV6"),
            "iSNSPrimaryAddress": obj.get("iSNSPrimaryAddress"),
            "iSNSTcpPort": obj.get("iSNSTcpPort"),
            "ipAddress": obj.get("ipAddress"),
            "ipAddressV6": obj.get("ipAddressV6"),
            "mtu": obj.get("mtu"),
            "sendTargetGroupTag": obj.get("sendTargetGroupTag"),
            "subnetMask": obj.get("subnetMask"),
            "subnetMaskV6": obj.get("subnetMaskV6"),
            "targetPortalGroupTag": obj.get("targetPortalGroupTag"),
            "vlanId": obj.get("vlanId")
        })
        return _obj


