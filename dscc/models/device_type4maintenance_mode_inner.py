# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.device_type4maintenance_mode_inner_end_time import DeviceType4maintenanceModeInnerEndTime
from dscc.models.device_type4maintenance_mode_inner_start_time import DeviceType4maintenanceModeInnerStartTime
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4maintenanceModeInner(BaseModel):
    """
    DeviceType4maintenanceModeInner
    """ # noqa: E501
    comment: Optional[StrictStr] = Field(default=None, description="Comments")
    end_time: Optional[DeviceType4maintenanceModeInnerEndTime] = Field(default=None, alias="endTime")
    instances: Optional[StrictInt] = Field(default=None, description="Instances")
    reason_code: Optional[StrictStr] = Field(default=None, description="Reason code", alias="reasonCode")
    start_time: Optional[DeviceType4maintenanceModeInnerStartTime] = Field(default=None, alias="startTime")
    user: Optional[StrictStr] = Field(default=None, description="User")
    __properties: ClassVar[List[str]] = ["comment", "endTime", "instances", "reasonCode", "startTime", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4maintenanceModeInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end_time
        if self.end_time:
            _dict['endTime'] = self.end_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_time
        if self.start_time:
            _dict['startTime'] = self.start_time.to_dict()
        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['endTime'] = None

        # set to None if instances (nullable) is None
        # and model_fields_set contains the field
        if self.instances is None and "instances" in self.model_fields_set:
            _dict['instances'] = None

        # set to None if reason_code (nullable) is None
        # and model_fields_set contains the field
        if self.reason_code is None and "reason_code" in self.model_fields_set:
            _dict['reasonCode'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['startTime'] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['user'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4maintenanceModeInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "endTime": DeviceType4maintenanceModeInnerEndTime.from_dict(obj["endTime"]) if obj.get("endTime") is not None else None,
            "instances": obj.get("instances"),
            "reasonCode": obj.get("reasonCode"),
            "startTime": DeviceType4maintenanceModeInnerStartTime.from_dict(obj["startTime"]) if obj.get("startTime") is not None else None,
            "user": obj.get("user")
        })
        return _obj


