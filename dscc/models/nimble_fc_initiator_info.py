# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleFCInitiatorInfo(BaseModel):
    """
    Information about the Fibre Channel initiator.
    """ # noqa: E501
    initiator_alias: Optional[StrictStr] = Field(default=None, description="Alias of the Fibre Channel initiator.")
    initiator_fcid: Optional[StrictStr] = Field(default=None, description="FCID assigned to the Fibre Channel initiator.")
    initiator_switch_name: Optional[StrictStr] = Field(default=None, description="Name of the switch used by the Fibre Channel initiator.")
    initiator_switch_port: Optional[StrictStr] = Field(default=None, description="Port on the switch used by the Fibre Channel initiator.")
    initiator_symbolic_nodename: Optional[StrictStr] = Field(default=None, description="Symbolic node name associated with the Fibre Channel initiator.")
    initiator_symbolic_portname: Optional[StrictStr] = Field(default=None, description="Symbolic port name associated with the Fibre Channel initiator.")
    initiator_wwpn: Optional[StrictStr] = Field(default=None, description="WWPN (World Wide Port Name) of the Fibre Channel initiator.")
    __properties: ClassVar[List[str]] = ["initiator_alias", "initiator_fcid", "initiator_switch_name", "initiator_switch_port", "initiator_symbolic_nodename", "initiator_symbolic_portname", "initiator_wwpn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleFCInitiatorInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if initiator_alias (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_alias is None and "initiator_alias" in self.model_fields_set:
            _dict['initiator_alias'] = None

        # set to None if initiator_fcid (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_fcid is None and "initiator_fcid" in self.model_fields_set:
            _dict['initiator_fcid'] = None

        # set to None if initiator_switch_name (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_switch_name is None and "initiator_switch_name" in self.model_fields_set:
            _dict['initiator_switch_name'] = None

        # set to None if initiator_switch_port (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_switch_port is None and "initiator_switch_port" in self.model_fields_set:
            _dict['initiator_switch_port'] = None

        # set to None if initiator_symbolic_nodename (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_symbolic_nodename is None and "initiator_symbolic_nodename" in self.model_fields_set:
            _dict['initiator_symbolic_nodename'] = None

        # set to None if initiator_symbolic_portname (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_symbolic_portname is None and "initiator_symbolic_portname" in self.model_fields_set:
            _dict['initiator_symbolic_portname'] = None

        # set to None if initiator_wwpn (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_wwpn is None and "initiator_wwpn" in self.model_fields_set:
            _dict['initiator_wwpn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleFCInitiatorInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "initiator_alias": obj.get("initiator_alias"),
            "initiator_fcid": obj.get("initiator_fcid"),
            "initiator_switch_name": obj.get("initiator_switch_name"),
            "initiator_switch_port": obj.get("initiator_switch_port"),
            "initiator_symbolic_nodename": obj.get("initiator_symbolic_nodename"),
            "initiator_symbolic_portname": obj.get("initiator_symbolic_portname"),
            "initiator_wwpn": obj.get("initiator_wwpn")
        })
        return _obj


