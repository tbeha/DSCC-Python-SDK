# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dscc.models.device_type4capacity_series_forecast_data import DeviceType4capacitySeriesForecastData
from dscc.models.device_type4capacity_series_historic_data import DeviceType4capacitySeriesHistoricData
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4CapacityForecast(BaseModel):
    """
    Capacity forecast data for HPE Alletra Storage MP system
    """ # noqa: E501
    confidence_level: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Confidence level represents the level of certainity or probability of a forecast made by a model", alias="confidenceLevel")
    customer_id: Optional[StrictStr] = Field(default=None, description="CustomerId of the user", alias="customerId")
    forecasted: Optional[List[Optional[DeviceType4capacitySeriesForecastData]]] = None
    historic: Optional[List[Optional[DeviceType4capacitySeriesHistoricData]]] = None
    message: Optional[StrictStr] = Field(default=None, description="A message to describe why forecast data is not available")
    request_uri: Optional[StrictStr] = Field(default=None, description="RequestUri for detailed storage object", alias="requestUri")
    __properties: ClassVar[List[str]] = ["confidenceLevel", "customerId", "forecasted", "historic", "message", "requestUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4CapacityForecast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in forecasted (list)
        _items = []
        if self.forecasted:
            for _item in self.forecasted:
                if _item:
                    _items.append(_item.to_dict())
            _dict['forecasted'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in historic (list)
        _items = []
        if self.historic:
            for _item in self.historic:
                if _item:
                    _items.append(_item.to_dict())
            _dict['historic'] = _items
        # set to None if confidence_level (nullable) is None
        # and model_fields_set contains the field
        if self.confidence_level is None and "confidence_level" in self.model_fields_set:
            _dict['confidenceLevel'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if forecasted (nullable) is None
        # and model_fields_set contains the field
        if self.forecasted is None and "forecasted" in self.model_fields_set:
            _dict['forecasted'] = None

        # set to None if historic (nullable) is None
        # and model_fields_set contains the field
        if self.historic is None and "historic" in self.model_fields_set:
            _dict['historic'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if request_uri (nullable) is None
        # and model_fields_set contains the field
        if self.request_uri is None and "request_uri" in self.model_fields_set:
            _dict['requestUri'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4CapacityForecast from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidenceLevel": obj.get("confidenceLevel"),
            "customerId": obj.get("customerId"),
            "forecasted": [DeviceType4capacitySeriesForecastData.from_dict(_item) for _item in obj["forecasted"]] if obj.get("forecasted") is not None else None,
            "historic": [DeviceType4capacitySeriesHistoricData.from_dict(_item) for _item in obj["historic"]] if obj.get("historic") is not None else None,
            "message": obj.get("message"),
            "requestUri": obj.get("requestUri")
        })
        return _obj


