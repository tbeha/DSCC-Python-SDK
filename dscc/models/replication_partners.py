# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.device_type4_replication_partner_common_fields_associated_links_inner import DeviceType4ReplicationPartnerCommonFieldsAssociatedLinksInner
from dscc.models.device_type4_replication_partner_common_fields_policies import DeviceType4ReplicationPartnerCommonFieldsPolicies
from dscc.models.primera_common_resource_attributes import PrimeraCommonResourceAttributes
from dscc.models.remote_copy_links import RemoteCopyLinks
from typing import Optional, Set
from typing_extensions import Self

class ReplicationPartners(BaseModel):
    """
    ReplicationPartners
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique id of the replication partner. `Filter`")
    name: Optional[StrictStr] = Field(default=None, description="Name of the replication partner. `Filter, Sort`")
    replication_partner_type: Optional[StrictStr] = Field(default=None, description="Link protocol type. `Filter, Sort`", alias="replicationPartnerType")
    status: Optional[StrictStr] = Field(default=None, description="Status of the partner. Possible values - New, Ready, Unsupported, Failing, Failed or Disabled. `Filter, Sort`")
    associated_links: Optional[List[DeviceType4ReplicationPartnerCommonFieldsAssociatedLinksInner]] = Field(default=None, description="Associated Links", alias="associatedLinks")
    buffer_size_b: Optional[StrictInt] = Field(default=None, description="Socket buffer size to use.", alias="bufferSizeB")
    common_resource_attributes: Optional[PrimeraCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    display_name: Optional[StrictStr] = Field(default=None, description="Replication partner displayname.", alias="displayName")
    domain: Optional[StrictStr] = Field(default=None, description="Domain that the resource belongs to.")
    flags: Optional[StrictInt] = Field(default=None, description="Partner flags.")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    health: Optional[StrictInt] = Field(default=None, description="Partner health status.")
    is_remote_array_support_replication: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate if remote array OS version supports replication", alias="isRemoteArraySupportReplication")
    min_period_secs: Optional[StrictInt] = Field(default=None, description="Minimum supported Async Periodic period for the partner. The field is omitted if unset or unavailable for the version of partner firmware.", alias="minPeriodSecs")
    node_wwn: Optional[StrictStr] = Field(default=None, description="Partner options, with FC partners this includes the partner system's node WWN. Omitted if unpopulated.", alias="nodeWWN")
    num_sockets: Optional[StrictInt] = Field(default=None, description="Number of sockets to use.", alias="numSockets")
    policies: Optional[DeviceType4ReplicationPartnerCommonFieldsPolicies] = None
    quorum_atf_timeout: Optional[StrictInt] = Field(default=None, description="Automatic Transparent Failover quorum partner failure timeout.", alias="quorumATFTimeout")
    quorum_ip_address: Optional[StrictStr] = Field(default=None, description="Quorum IP Address associated with the partner. Set to 'NA' if not available.", alias="quorumIpAddress")
    quorum_ssl_port: Optional[StrictInt] = Field(default=None, description="Quorum SSL port number.", alias="quorumSSLPort")
    quorum_status: Optional[StrictStr] = Field(default=None, description="Quorum status of the partner. Possible values - Uninitialized, Initializing, Standby, Active, Failsafe, Failover or Restarting. Null if unset.", alias="quorumStatus")
    quorum_status_qual: Optional[StrictStr] = Field(default=None, description="Quorum status qualifier. Set to 'NA' if not available.", alias="quorumStatusQual")
    quorum_version: Optional[StrictStr] = Field(default=None, description="Quorum version.", alias="quorumVersion")
    remote_id: Optional[StrictStr] = Field(default=None, description="Unique id of the remote replication partner.", alias="remoteId")
    remote_name: Optional[StrictStr] = Field(default=None, description="Name of the remote replication partner.", alias="remoteName")
    remote_replication_id: Optional[StrictInt] = Field(default=None, description="Replication ID of the remote replication partner.", alias="remoteReplicationId")
    remote_system_id: Optional[StrictStr] = Field(default=None, description="Unique ID or serial number of the remote system.", alias="remoteSystemId")
    remote_system_name: Optional[StrictStr] = Field(default=None, description="Name of the remote system.", alias="remoteSystemName")
    replication_id: Optional[StrictInt] = Field(default=None, description="Replication ID of the partner.", alias="replicationId")
    replication_partner_links: Optional[RemoteCopyLinks] = Field(default=None, alias="replicationPartnerLinks")
    replication_system_id: Optional[StrictInt] = Field(default=None, description="ID of the remote system.", alias="replicationSystemId")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed replication partner object", alias="resourceUri")
    state: Optional[StrictStr] = Field(default=None, description="State of the replication partner.")
    system_id: Optional[StrictStr] = Field(default=None, description="Unique ID or serial number of the system.", alias="systemId")
    system_name: Optional[StrictStr] = Field(default=None, description="Name of the system.", alias="systemName")
    system_wwn: Optional[StrictStr] = Field(default=None, description="WWN of the system.", alias="systemWWN")
    type: Optional[StrictStr] = Field(default=None, description="type")
    version: Optional[StrictInt] = Field(default=None, description="Partner version.")
    __properties: ClassVar[List[str]] = ["id", "name", "replicationPartnerType", "status", "associatedLinks", "bufferSizeB", "commonResourceAttributes", "customerId", "displayName", "domain", "flags", "generation", "health", "isRemoteArraySupportReplication", "minPeriodSecs", "nodeWWN", "numSockets", "policies", "quorumATFTimeout", "quorumIpAddress", "quorumSSLPort", "quorumStatus", "quorumStatusQual", "quorumVersion", "remoteId", "remoteName", "remoteReplicationId", "remoteSystemId", "remoteSystemName", "replicationId", "replicationPartnerLinks", "replicationSystemId", "resourceUri", "state", "systemId", "systemName", "systemWWN", "type", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicationPartners from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policies
        if self.policies:
            _dict['policies'] = self.policies.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replication_partner_links
        if self.replication_partner_links:
            _dict['replicationPartnerLinks'] = self.replication_partner_links.to_dict()
        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if associated_links (nullable) is None
        # and model_fields_set contains the field
        if self.associated_links is None and "associated_links" in self.model_fields_set:
            _dict['associatedLinks'] = None

        # set to None if buffer_size_b (nullable) is None
        # and model_fields_set contains the field
        if self.buffer_size_b is None and "buffer_size_b" in self.model_fields_set:
            _dict['bufferSizeB'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if flags (nullable) is None
        # and model_fields_set contains the field
        if self.flags is None and "flags" in self.model_fields_set:
            _dict['flags'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if health (nullable) is None
        # and model_fields_set contains the field
        if self.health is None and "health" in self.model_fields_set:
            _dict['health'] = None

        # set to None if min_period_secs (nullable) is None
        # and model_fields_set contains the field
        if self.min_period_secs is None and "min_period_secs" in self.model_fields_set:
            _dict['minPeriodSecs'] = None

        # set to None if node_wwn (nullable) is None
        # and model_fields_set contains the field
        if self.node_wwn is None and "node_wwn" in self.model_fields_set:
            _dict['nodeWWN'] = None

        # set to None if num_sockets (nullable) is None
        # and model_fields_set contains the field
        if self.num_sockets is None and "num_sockets" in self.model_fields_set:
            _dict['numSockets'] = None

        # set to None if policies (nullable) is None
        # and model_fields_set contains the field
        if self.policies is None and "policies" in self.model_fields_set:
            _dict['policies'] = None

        # set to None if quorum_atf_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.quorum_atf_timeout is None and "quorum_atf_timeout" in self.model_fields_set:
            _dict['quorumATFTimeout'] = None

        # set to None if quorum_ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.quorum_ip_address is None and "quorum_ip_address" in self.model_fields_set:
            _dict['quorumIpAddress'] = None

        # set to None if quorum_ssl_port (nullable) is None
        # and model_fields_set contains the field
        if self.quorum_ssl_port is None and "quorum_ssl_port" in self.model_fields_set:
            _dict['quorumSSLPort'] = None

        # set to None if quorum_status (nullable) is None
        # and model_fields_set contains the field
        if self.quorum_status is None and "quorum_status" in self.model_fields_set:
            _dict['quorumStatus'] = None

        # set to None if quorum_status_qual (nullable) is None
        # and model_fields_set contains the field
        if self.quorum_status_qual is None and "quorum_status_qual" in self.model_fields_set:
            _dict['quorumStatusQual'] = None

        # set to None if quorum_version (nullable) is None
        # and model_fields_set contains the field
        if self.quorum_version is None and "quorum_version" in self.model_fields_set:
            _dict['quorumVersion'] = None

        # set to None if remote_id (nullable) is None
        # and model_fields_set contains the field
        if self.remote_id is None and "remote_id" in self.model_fields_set:
            _dict['remoteId'] = None

        # set to None if remote_name (nullable) is None
        # and model_fields_set contains the field
        if self.remote_name is None and "remote_name" in self.model_fields_set:
            _dict['remoteName'] = None

        # set to None if remote_replication_id (nullable) is None
        # and model_fields_set contains the field
        if self.remote_replication_id is None and "remote_replication_id" in self.model_fields_set:
            _dict['remoteReplicationId'] = None

        # set to None if remote_system_id (nullable) is None
        # and model_fields_set contains the field
        if self.remote_system_id is None and "remote_system_id" in self.model_fields_set:
            _dict['remoteSystemId'] = None

        # set to None if remote_system_name (nullable) is None
        # and model_fields_set contains the field
        if self.remote_system_name is None and "remote_system_name" in self.model_fields_set:
            _dict['remoteSystemName'] = None

        # set to None if replication_id (nullable) is None
        # and model_fields_set contains the field
        if self.replication_id is None and "replication_id" in self.model_fields_set:
            _dict['replicationId'] = None

        # set to None if replication_partner_links (nullable) is None
        # and model_fields_set contains the field
        if self.replication_partner_links is None and "replication_partner_links" in self.model_fields_set:
            _dict['replicationPartnerLinks'] = None

        # set to None if replication_system_id (nullable) is None
        # and model_fields_set contains the field
        if self.replication_system_id is None and "replication_system_id" in self.model_fields_set:
            _dict['replicationSystemId'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if system_name (nullable) is None
        # and model_fields_set contains the field
        if self.system_name is None and "system_name" in self.model_fields_set:
            _dict['systemName'] = None

        # set to None if system_wwn (nullable) is None
        # and model_fields_set contains the field
        if self.system_wwn is None and "system_wwn" in self.model_fields_set:
            _dict['systemWWN'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicationPartners from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "replicationPartnerType": obj.get("replicationPartnerType"),
            "status": obj.get("status"),
            "associatedLinks": [DeviceType4ReplicationPartnerCommonFieldsAssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "bufferSizeB": obj.get("bufferSizeB"),
            "commonResourceAttributes": PrimeraCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "customerId": obj.get("customerId"),
            "displayName": obj.get("displayName"),
            "domain": obj.get("domain"),
            "flags": obj.get("flags"),
            "generation": obj.get("generation"),
            "health": obj.get("health"),
            "isRemoteArraySupportReplication": obj.get("isRemoteArraySupportReplication"),
            "minPeriodSecs": obj.get("minPeriodSecs"),
            "nodeWWN": obj.get("nodeWWN"),
            "numSockets": obj.get("numSockets"),
            "policies": DeviceType4ReplicationPartnerCommonFieldsPolicies.from_dict(obj["policies"]) if obj.get("policies") is not None else None,
            "quorumATFTimeout": obj.get("quorumATFTimeout"),
            "quorumIpAddress": obj.get("quorumIpAddress"),
            "quorumSSLPort": obj.get("quorumSSLPort"),
            "quorumStatus": obj.get("quorumStatus"),
            "quorumStatusQual": obj.get("quorumStatusQual"),
            "quorumVersion": obj.get("quorumVersion"),
            "remoteId": obj.get("remoteId"),
            "remoteName": obj.get("remoteName"),
            "remoteReplicationId": obj.get("remoteReplicationId"),
            "remoteSystemId": obj.get("remoteSystemId"),
            "remoteSystemName": obj.get("remoteSystemName"),
            "replicationId": obj.get("replicationId"),
            "replicationPartnerLinks": RemoteCopyLinks.from_dict(obj["replicationPartnerLinks"]) if obj.get("replicationPartnerLinks") is not None else None,
            "replicationSystemId": obj.get("replicationSystemId"),
            "resourceUri": obj.get("resourceUri"),
            "state": obj.get("state"),
            "systemId": obj.get("systemId"),
            "systemName": obj.get("systemName"),
            "systemWWN": obj.get("systemWWN"),
            "type": obj.get("type"),
            "version": obj.get("version")
        })
        return _obj


