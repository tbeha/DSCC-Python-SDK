# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.nic_details import NICDetails
from typing import Optional, Set
from typing_extensions import Self

class NimbleCreateArrayInput(BaseModel):
    """
    Create Nimble array input
    """ # noqa: E501
    allow_lower_limits: Optional[StrictBool] = Field(default=None, description="Whether to create associated pool during array create. Possible values: 'true', 'false'.")
    create_pool: Optional[StrictBool] = Field(default=None, description="Whether to create associated pool during array create. Possible values: 'true', 'false'.")
    ctrlr_a_support_ip: StrictStr = Field(description="Controller A Support IP address.")
    ctrlr_b_support_ip: StrictStr = Field(description="Controller B Support IP address.")
    dedupe_disabled: Optional[StrictBool] = Field(default=None, description="Is data deduplication disabled for this array. Possible values: 'true', 'false'.")
    name: StrictStr = Field(description="The user provided name of the array. It is also the array's hostname. String of up to 63 alphanumeric and can include hyphens characters but cannot start with hyphen.")
    nic_list: List[Optional[NICDetails]] = Field(description="List of NICs information. Used while creating an array.")
    pool_description: Optional[StrictStr] = Field(default=None, description="Text description of the pool to be created during array creation. String of up to 255 printable ASCII characters.")
    pool_name: StrictStr = Field(description="Name of pool to which this is a member. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    secondary_mgmt_ip: Optional[StrictStr] = Field(default=None, description="Secondary management IP address for the Group.")
    serial: StrictStr = Field(description="Serial number of the array.")
    __properties: ClassVar[List[str]] = ["allow_lower_limits", "create_pool", "ctrlr_a_support_ip", "ctrlr_b_support_ip", "dedupe_disabled", "name", "nic_list", "pool_description", "pool_name", "secondary_mgmt_ip", "serial"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleCreateArrayInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in nic_list (list)
        _items = []
        if self.nic_list:
            for _item in self.nic_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nic_list'] = _items
        # set to None if allow_lower_limits (nullable) is None
        # and model_fields_set contains the field
        if self.allow_lower_limits is None and "allow_lower_limits" in self.model_fields_set:
            _dict['allow_lower_limits'] = None

        # set to None if create_pool (nullable) is None
        # and model_fields_set contains the field
        if self.create_pool is None and "create_pool" in self.model_fields_set:
            _dict['create_pool'] = None

        # set to None if dedupe_disabled (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_disabled is None and "dedupe_disabled" in self.model_fields_set:
            _dict['dedupe_disabled'] = None

        # set to None if pool_description (nullable) is None
        # and model_fields_set contains the field
        if self.pool_description is None and "pool_description" in self.model_fields_set:
            _dict['pool_description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleCreateArrayInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_lower_limits": obj.get("allow_lower_limits"),
            "create_pool": obj.get("create_pool"),
            "ctrlr_a_support_ip": obj.get("ctrlr_a_support_ip"),
            "ctrlr_b_support_ip": obj.get("ctrlr_b_support_ip"),
            "dedupe_disabled": obj.get("dedupe_disabled"),
            "name": obj.get("name"),
            "nic_list": [NICDetails.from_dict(_item) for _item in obj["nic_list"]] if obj.get("nic_list") is not None else None,
            "pool_description": obj.get("pool_description"),
            "pool_name": obj.get("pool_name"),
            "secondary_mgmt_ip": obj.get("secondary_mgmt_ip"),
            "serial": obj.get("serial")
        })
        return _obj


