# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.common_resource_attributes import CommonResourceAttributes
from dscc.models.device_type4_kpi_metrics import DeviceType4KpiMetrics
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4VolumePerformance(BaseModel):
    """
    DeviceType4VolumePerformance
    """ # noqa: E501
    common_resource_attributes: Optional[CommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    iops: Optional[DeviceType4KpiMetrics] = None
    latency_ms: Optional[DeviceType4KpiMetrics] = Field(default=None, alias="latencyMs")
    request_uri: Optional[StrictStr] = Field(default=None, description="requestUri for detailed volume object", alias="requestUri")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed volume object", alias="resourceUri")
    throughput_kbps: Optional[DeviceType4KpiMetrics] = Field(default=None, alias="throughputKbps")
    __properties: ClassVar[List[str]] = ["commonResourceAttributes", "iops", "latencyMs", "requestUri", "resourceUri", "throughputKbps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4VolumePerformance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iops
        if self.iops:
            _dict['iops'] = self.iops.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latency_ms
        if self.latency_ms:
            _dict['latencyMs'] = self.latency_ms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of throughput_kbps
        if self.throughput_kbps:
            _dict['throughputKbps'] = self.throughput_kbps.to_dict()
        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if iops (nullable) is None
        # and model_fields_set contains the field
        if self.iops is None and "iops" in self.model_fields_set:
            _dict['iops'] = None

        # set to None if latency_ms (nullable) is None
        # and model_fields_set contains the field
        if self.latency_ms is None and "latency_ms" in self.model_fields_set:
            _dict['latencyMs'] = None

        # set to None if request_uri (nullable) is None
        # and model_fields_set contains the field
        if self.request_uri is None and "request_uri" in self.model_fields_set:
            _dict['requestUri'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if throughput_kbps (nullable) is None
        # and model_fields_set contains the field
        if self.throughput_kbps is None and "throughput_kbps" in self.model_fields_set:
            _dict['throughputKbps'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4VolumePerformance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonResourceAttributes": CommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "iops": DeviceType4KpiMetrics.from_dict(obj["iops"]) if obj.get("iops") is not None else None,
            "latencyMs": DeviceType4KpiMetrics.from_dict(obj["latencyMs"]) if obj.get("latencyMs") is not None else None,
            "requestUri": obj.get("requestUri"),
            "resourceUri": obj.get("resourceUri"),
            "throughputKbps": DeviceType4KpiMetrics.from_dict(obj["throughputKbps"]) if obj.get("throughputKbps") is not None else None
        })
        return _obj


