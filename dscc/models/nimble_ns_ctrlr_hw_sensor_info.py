# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleNsCtrlrHwSensorInfo(BaseModel):
    """
    NimbleNsCtrlrHwSensorInfo
    """ # noqa: E501
    ctrlr_owner: Optional[StrictStr] = Field(default=None, description="The controller owning this sensor. Possible values: 'A', 'B', 'independent'.")
    current_reading: Optional[StrictInt] = Field(default=None, description="A sensor type specific reading (RPM for fans, degrees celsius for temperature).")
    display_name: Optional[StrictStr] = Field(default=None, description="A human readable name for the sensor.")
    location: Optional[StrictStr] = Field(default=None, description="The location of this sensor.")
    name: Optional[StrictStr] = Field(default=None, description="A uniquely identifying name.")
    state: Optional[StrictStr] = Field(default=None, description="The current state of this sensor. Possible values: 'sensor_ok', 'sensor_alert_cond', 'sensor_missing', 'sensor_reading_unavail', 'sensor_failed'.")
    __properties: ClassVar[List[str]] = ["ctrlr_owner", "current_reading", "display_name", "location", "name", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleNsCtrlrHwSensorInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if ctrlr_owner (nullable) is None
        # and model_fields_set contains the field
        if self.ctrlr_owner is None and "ctrlr_owner" in self.model_fields_set:
            _dict['ctrlr_owner'] = None

        # set to None if current_reading (nullable) is None
        # and model_fields_set contains the field
        if self.current_reading is None and "current_reading" in self.model_fields_set:
            _dict['current_reading'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['display_name'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleNsCtrlrHwSensorInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ctrlr_owner": obj.get("ctrlr_owner"),
            "current_reading": obj.get("current_reading"),
            "display_name": obj.get("display_name"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "state": obj.get("state")
        })
        return _obj


