# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.device_type4_telemetry_status_connectivity_test_time import DeviceType4TelemetryStatusConnectivityTestTime
from dscc.models.device_type4_telemetry_status_last_file_transfer_time import DeviceType4TelemetryStatusLastFileTransferTime
from dscc.models.device_type4_telemetry_status_last_successful_connectivity_test_time import DeviceType4TelemetryStatusLastSuccessfulConnectivityTestTime
from dscc.models.device_type4details_inner import DeviceType4detailsInner
from dscc.models.primera_common_resource_attributes import PrimeraCommonResourceAttributes
from typing import Optional, Set
from typing_extensions import Self

class TelemetryStatus(BaseModel):
    """
    telemetry status of the system
    """ # noqa: E501
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    collection_server: Optional[StrictStr] = Field(default=None, description="Callhome Collection server URL", alias="collectionServer")
    common_resource_attributes: Optional[PrimeraCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    connectivity_status: Optional[StrictStr] = Field(default=None, description="Callhome connectivity status.", alias="connectivityStatus")
    connectivity_test_time: Optional[DeviceType4TelemetryStatusConnectivityTestTime] = Field(default=None, alias="connectivityTestTime")
    details: Optional[List[DeviceType4detailsInner]] = None
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the callhome status.")
    last_file_sent: Optional[StrictStr] = Field(default=None, description="Last sent file name via callhome.", alias="lastFileSent")
    last_file_transfer_time: Optional[DeviceType4TelemetryStatusLastFileTransferTime] = Field(default=None, alias="lastFileTransferTime")
    last_successful_connectivity_test_time: Optional[DeviceType4TelemetryStatusLastSuccessfulConnectivityTestTime] = Field(default=None, alias="lastSuccessfulConnectivityTestTime")
    proxy_connectivity: Optional[StrictStr] = Field(default=None, description="Proxy connectivity status.", alias="proxyConnectivity")
    r_da_configured: Optional[StrictStr] = Field(default=None, description="Callhome transport agent configuration details.", alias="rDAConfigured")
    r_da_status: Optional[StrictStr] = Field(default=None, description="Status of Callhome Transport Agent.", alias="rDAStatus")
    r_sv_s_status: Optional[StrictStr] = Field(default=None, description="Status of callhome agent.", alias="rSvSStatus")
    r_ts_status: Optional[StrictStr] = Field(default=None, description="Status of Real time scrubber.", alias="rTSStatus")
    request_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed storage object", alias="requestUri")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed storage object", alias="resourceUri")
    rolled_up_status: Optional[StrictStr] = Field(default=None, description="Callhome Rolled up status.", alias="rolledUpStatus")
    shared_volume_status: Optional[StrictStr] = Field(default=None, description="Shared Volume status", alias="sharedVolumeStatus")
    transfer_status: Optional[StrictStr] = Field(default=None, description="Callhome File Transfer transfer.", alias="transferStatus")
    __properties: ClassVar[List[str]] = ["associatedLinks", "collectionServer", "commonResourceAttributes", "connectivityStatus", "connectivityTestTime", "details", "id", "lastFileSent", "lastFileTransferTime", "lastSuccessfulConnectivityTestTime", "proxyConnectivity", "rDAConfigured", "rDAStatus", "rSvSStatus", "rTSStatus", "requestUri", "resourceUri", "rolledUpStatus", "sharedVolumeStatus", "transferStatus"]

    @field_validator('connectivity_status')
    def connectivity_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null']):
            raise ValueError("must be one of enum values ('NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null')")
        return value

    @field_validator('proxy_connectivity')
    def proxy_connectivity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null']):
            raise ValueError("must be one of enum values ('NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null')")
        return value

    @field_validator('r_da_configured')
    def r_da_configured_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null']):
            raise ValueError("must be one of enum values ('NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null')")
        return value

    @field_validator('r_da_status')
    def r_da_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null']):
            raise ValueError("must be one of enum values ('NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null')")
        return value

    @field_validator('r_sv_s_status')
    def r_sv_s_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null']):
            raise ValueError("must be one of enum values ('NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null')")
        return value

    @field_validator('r_ts_status')
    def r_ts_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null']):
            raise ValueError("must be one of enum values ('NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null')")
        return value

    @field_validator('rolled_up_status')
    def rolled_up_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null']):
            raise ValueError("must be one of enum values ('NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null')")
        return value

    @field_validator('shared_volume_status')
    def shared_volume_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null']):
            raise ValueError("must be one of enum values ('NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null')")
        return value

    @field_validator('transfer_status')
    def transfer_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null']):
            raise ValueError("must be one of enum values ('NORMAL', 'FAILED', 'NOT_APPLICABLE', 'DISABLED', 'null')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TelemetryStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connectivity_test_time
        if self.connectivity_test_time:
            _dict['connectivityTestTime'] = self.connectivity_test_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item in self.details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['details'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_file_transfer_time
        if self.last_file_transfer_time:
            _dict['lastFileTransferTime'] = self.last_file_transfer_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_successful_connectivity_test_time
        if self.last_successful_connectivity_test_time:
            _dict['lastSuccessfulConnectivityTestTime'] = self.last_successful_connectivity_test_time.to_dict()
        # set to None if associated_links (nullable) is None
        # and model_fields_set contains the field
        if self.associated_links is None and "associated_links" in self.model_fields_set:
            _dict['associatedLinks'] = None

        # set to None if collection_server (nullable) is None
        # and model_fields_set contains the field
        if self.collection_server is None and "collection_server" in self.model_fields_set:
            _dict['collectionServer'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if connectivity_status (nullable) is None
        # and model_fields_set contains the field
        if self.connectivity_status is None and "connectivity_status" in self.model_fields_set:
            _dict['connectivityStatus'] = None

        # set to None if connectivity_test_time (nullable) is None
        # and model_fields_set contains the field
        if self.connectivity_test_time is None and "connectivity_test_time" in self.model_fields_set:
            _dict['connectivityTestTime'] = None

        # set to None if details (nullable) is None
        # and model_fields_set contains the field
        if self.details is None and "details" in self.model_fields_set:
            _dict['details'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if last_file_sent (nullable) is None
        # and model_fields_set contains the field
        if self.last_file_sent is None and "last_file_sent" in self.model_fields_set:
            _dict['lastFileSent'] = None

        # set to None if last_file_transfer_time (nullable) is None
        # and model_fields_set contains the field
        if self.last_file_transfer_time is None and "last_file_transfer_time" in self.model_fields_set:
            _dict['lastFileTransferTime'] = None

        # set to None if last_successful_connectivity_test_time (nullable) is None
        # and model_fields_set contains the field
        if self.last_successful_connectivity_test_time is None and "last_successful_connectivity_test_time" in self.model_fields_set:
            _dict['lastSuccessfulConnectivityTestTime'] = None

        # set to None if proxy_connectivity (nullable) is None
        # and model_fields_set contains the field
        if self.proxy_connectivity is None and "proxy_connectivity" in self.model_fields_set:
            _dict['proxyConnectivity'] = None

        # set to None if r_da_configured (nullable) is None
        # and model_fields_set contains the field
        if self.r_da_configured is None and "r_da_configured" in self.model_fields_set:
            _dict['rDAConfigured'] = None

        # set to None if r_da_status (nullable) is None
        # and model_fields_set contains the field
        if self.r_da_status is None and "r_da_status" in self.model_fields_set:
            _dict['rDAStatus'] = None

        # set to None if r_sv_s_status (nullable) is None
        # and model_fields_set contains the field
        if self.r_sv_s_status is None and "r_sv_s_status" in self.model_fields_set:
            _dict['rSvSStatus'] = None

        # set to None if r_ts_status (nullable) is None
        # and model_fields_set contains the field
        if self.r_ts_status is None and "r_ts_status" in self.model_fields_set:
            _dict['rTSStatus'] = None

        # set to None if request_uri (nullable) is None
        # and model_fields_set contains the field
        if self.request_uri is None and "request_uri" in self.model_fields_set:
            _dict['requestUri'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if rolled_up_status (nullable) is None
        # and model_fields_set contains the field
        if self.rolled_up_status is None and "rolled_up_status" in self.model_fields_set:
            _dict['rolledUpStatus'] = None

        # set to None if shared_volume_status (nullable) is None
        # and model_fields_set contains the field
        if self.shared_volume_status is None and "shared_volume_status" in self.model_fields_set:
            _dict['sharedVolumeStatus'] = None

        # set to None if transfer_status (nullable) is None
        # and model_fields_set contains the field
        if self.transfer_status is None and "transfer_status" in self.model_fields_set:
            _dict['transferStatus'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TelemetryStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedLinks": [AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "collectionServer": obj.get("collectionServer"),
            "commonResourceAttributes": PrimeraCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "connectivityStatus": obj.get("connectivityStatus"),
            "connectivityTestTime": DeviceType4TelemetryStatusConnectivityTestTime.from_dict(obj["connectivityTestTime"]) if obj.get("connectivityTestTime") is not None else None,
            "details": [DeviceType4detailsInner.from_dict(_item) for _item in obj["details"]] if obj.get("details") is not None else None,
            "id": obj.get("id"),
            "lastFileSent": obj.get("lastFileSent"),
            "lastFileTransferTime": DeviceType4TelemetryStatusLastFileTransferTime.from_dict(obj["lastFileTransferTime"]) if obj.get("lastFileTransferTime") is not None else None,
            "lastSuccessfulConnectivityTestTime": DeviceType4TelemetryStatusLastSuccessfulConnectivityTestTime.from_dict(obj["lastSuccessfulConnectivityTestTime"]) if obj.get("lastSuccessfulConnectivityTestTime") is not None else None,
            "proxyConnectivity": obj.get("proxyConnectivity"),
            "rDAConfigured": obj.get("rDAConfigured"),
            "rDAStatus": obj.get("rDAStatus"),
            "rSvSStatus": obj.get("rSvSStatus"),
            "rTSStatus": obj.get("rTSStatus"),
            "requestUri": obj.get("requestUri"),
            "resourceUri": obj.get("resourceUri"),
            "rolledUpStatus": obj.get("rolledUpStatus"),
            "sharedVolumeStatus": obj.get("sharedVolumeStatus"),
            "transferStatus": obj.get("transferStatus")
        })
        return _obj


