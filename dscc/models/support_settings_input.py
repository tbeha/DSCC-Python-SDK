# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SupportSettingsInput(BaseModel):
    """
    Edit Support settings for the system
    """ # noqa: E501
    connect_to_hpe: StrictStr = Field(description="Enable remote support by allowing sending of files from device to HPE. Allowed values: enabled or disabled. It is mandatory.", alias="connectToHPE")
    device_id: Optional[StrictStr] = Field(default=None, description="Id of the array. User can get Id info from GET response. It is mandatory.", alias="deviceId")
    enterprise_server_url: Optional[StrictStr] = Field(default=None, description="Callhome collection server URL", alias="enterpriseServerURL")
    mini_insplore_enabled: Optional[StrictStr] = Field(default=None, description="Enables/Disable scheduled Mini-Insplore collection. Allowed values: enabled or disabled.", alias="miniInsploreEnabled")
    rap_forwarding: StrictStr = Field(description="Enable/Disable RAP forwarding. Allowed values: enabled or disabled. It is mandatory.", alias="rapForwarding")
    remote_access: StrictStr = Field(description="Allow HPE Support to access the device remotely. Allowed values: ENABLE_ROOT or DISABLE or ENABLE_NONROOT. It is mandatory.", alias="remoteAccess")
    rts_enabled: StrictStr = Field(description="Enable/Disable Real time data scrubbing. Allowed values: enabled or disabled. It is mandatory.", alias="rtsEnabled")
    __properties: ClassVar[List[str]] = ["connectToHPE", "deviceId", "enterpriseServerURL", "miniInsploreEnabled", "rapForwarding", "remoteAccess", "rtsEnabled"]

    @field_validator('remote_access')
    def remote_access_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DISABLE', 'ENABLE_NONROOT', 'ENABLE_ROOT']):
            raise ValueError("must be one of enum values ('DISABLE', 'ENABLE_NONROOT', 'ENABLE_ROOT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupportSettingsInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if enterprise_server_url (nullable) is None
        # and model_fields_set contains the field
        if self.enterprise_server_url is None and "enterprise_server_url" in self.model_fields_set:
            _dict['enterpriseServerURL'] = None

        # set to None if mini_insplore_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.mini_insplore_enabled is None and "mini_insplore_enabled" in self.model_fields_set:
            _dict['miniInsploreEnabled'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupportSettingsInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectToHPE": obj.get("connectToHPE"),
            "deviceId": obj.get("deviceId"),
            "enterpriseServerURL": obj.get("enterpriseServerURL"),
            "miniInsploreEnabled": obj.get("miniInsploreEnabled"),
            "rapForwarding": obj.get("rapForwarding"),
            "remoteAccess": obj.get("remoteAccess"),
            "rtsEnabled": obj.get("rtsEnabled")
        })
        return _obj


