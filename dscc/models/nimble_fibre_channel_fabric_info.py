# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleFibreChannelFabricInfo(BaseModel):
    """
    NimbleFibreChannelFabricInfo
    """ # noqa: E501
    fabric_switch_name: Optional[StrictStr] = Field(default=None, description="Name of the Fibre Channel switch.")
    fabric_switch_port: Optional[StrictInt] = Field(default=None, description="Port on the Fibre Channel switch to which connection is established.")
    fabric_switch_port_number: Optional[StrictStr] = Field(default=None, description="Port Number on the Fibre Channel switch to which connection is established.")
    fabric_switch_wwnn: Optional[StrictStr] = Field(default=None, description="World Wide Node Name for the connected port on the fabric switch.")
    fabric_switch_wwpn: Optional[StrictStr] = Field(default=None, description="World Wide Port Name for the connected port on the fabric switch.")
    fabric_wwn: Optional[StrictStr] = Field(default=None, description="World Wide Node Name for the Fabric Switch.")
    fc_id: Optional[StrictStr] = Field(default=None, description="FCID assigned to the Fabric Channel fabric port.")
    logged_in: Optional[StrictBool] = Field(default=None, description="Login information for interface. True if interface has logged in to the Fibre Channel fabric, else false.")
    __properties: ClassVar[List[str]] = ["fabric_switch_name", "fabric_switch_port", "fabric_switch_port_number", "fabric_switch_wwnn", "fabric_switch_wwpn", "fabric_wwn", "fc_id", "logged_in"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleFibreChannelFabricInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if fabric_switch_name (nullable) is None
        # and model_fields_set contains the field
        if self.fabric_switch_name is None and "fabric_switch_name" in self.model_fields_set:
            _dict['fabric_switch_name'] = None

        # set to None if fabric_switch_port (nullable) is None
        # and model_fields_set contains the field
        if self.fabric_switch_port is None and "fabric_switch_port" in self.model_fields_set:
            _dict['fabric_switch_port'] = None

        # set to None if fabric_switch_port_number (nullable) is None
        # and model_fields_set contains the field
        if self.fabric_switch_port_number is None and "fabric_switch_port_number" in self.model_fields_set:
            _dict['fabric_switch_port_number'] = None

        # set to None if fabric_switch_wwnn (nullable) is None
        # and model_fields_set contains the field
        if self.fabric_switch_wwnn is None and "fabric_switch_wwnn" in self.model_fields_set:
            _dict['fabric_switch_wwnn'] = None

        # set to None if fabric_switch_wwpn (nullable) is None
        # and model_fields_set contains the field
        if self.fabric_switch_wwpn is None and "fabric_switch_wwpn" in self.model_fields_set:
            _dict['fabric_switch_wwpn'] = None

        # set to None if fabric_wwn (nullable) is None
        # and model_fields_set contains the field
        if self.fabric_wwn is None and "fabric_wwn" in self.model_fields_set:
            _dict['fabric_wwn'] = None

        # set to None if fc_id (nullable) is None
        # and model_fields_set contains the field
        if self.fc_id is None and "fc_id" in self.model_fields_set:
            _dict['fc_id'] = None

        # set to None if logged_in (nullable) is None
        # and model_fields_set contains the field
        if self.logged_in is None and "logged_in" in self.model_fields_set:
            _dict['logged_in'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleFibreChannelFabricInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fabric_switch_name": obj.get("fabric_switch_name"),
            "fabric_switch_port": obj.get("fabric_switch_port"),
            "fabric_switch_port_number": obj.get("fabric_switch_port_number"),
            "fabric_switch_wwnn": obj.get("fabric_switch_wwnn"),
            "fabric_switch_wwpn": obj.get("fabric_switch_wwpn"),
            "fabric_wwn": obj.get("fabric_wwn"),
            "fc_id": obj.get("fc_id"),
            "logged_in": obj.get("logged_in")
        })
        return _obj


