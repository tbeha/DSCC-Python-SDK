# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.device_type4_create_app_set_qos_config_input import DeviceType4CreateAppSetQosConfigInput
from dscc.models.device_type4_volume_set_application_type import DeviceType4VolumeSetApplicationType
from dscc.models.device_type4_vs_app_set_importance import DeviceType4VsAppSetImportance
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4CreateAppSetInput(BaseModel):
    """
    Request body for creating Application Sets
    """ # noqa: E501
    app_set_business_unit: Optional[StrictStr] = Field(default=None, description="App set business unit", alias="appSetBusinessUnit")
    app_set_comments: Optional[StrictStr] = Field(default=None, description="App set comments", alias="appSetComments")
    app_set_importance: Optional[DeviceType4VsAppSetImportance] = Field(default=None, alias="appSetImportance")
    app_set_name: StrictStr = Field(description="App set name", alias="appSetName")
    app_set_type: Optional[DeviceType4VolumeSetApplicationType] = Field(alias="appSetType")
    create_app_set_qos_config_input: Optional[DeviceType4CreateAppSetQosConfigInput] = Field(default=None, alias="createAppSetQosConfigInput")
    custom_app_type: Optional[StrictStr] = Field(default=None, description="App set name for Custom workloads when appSetType=CUSTOM", alias="customAppType")
    members: Optional[List[Optional[StrictStr]]] = Field(default=None, description="volumes list")
    __properties: ClassVar[List[str]] = ["appSetBusinessUnit", "appSetComments", "appSetImportance", "appSetName", "appSetType", "createAppSetQosConfigInput", "customAppType", "members"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4CreateAppSetInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of create_app_set_qos_config_input
        if self.create_app_set_qos_config_input:
            _dict['createAppSetQosConfigInput'] = self.create_app_set_qos_config_input.to_dict()
        # set to None if app_set_business_unit (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_business_unit is None and "app_set_business_unit" in self.model_fields_set:
            _dict['appSetBusinessUnit'] = None

        # set to None if app_set_comments (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_comments is None and "app_set_comments" in self.model_fields_set:
            _dict['appSetComments'] = None

        # set to None if app_set_importance (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_importance is None and "app_set_importance" in self.model_fields_set:
            _dict['appSetImportance'] = None

        # set to None if app_set_type (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_type is None and "app_set_type" in self.model_fields_set:
            _dict['appSetType'] = None

        # set to None if create_app_set_qos_config_input (nullable) is None
        # and model_fields_set contains the field
        if self.create_app_set_qos_config_input is None and "create_app_set_qos_config_input" in self.model_fields_set:
            _dict['createAppSetQosConfigInput'] = None

        # set to None if custom_app_type (nullable) is None
        # and model_fields_set contains the field
        if self.custom_app_type is None and "custom_app_type" in self.model_fields_set:
            _dict['customAppType'] = None

        # set to None if members (nullable) is None
        # and model_fields_set contains the field
        if self.members is None and "members" in self.model_fields_set:
            _dict['members'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4CreateAppSetInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appSetBusinessUnit": obj.get("appSetBusinessUnit"),
            "appSetComments": obj.get("appSetComments"),
            "appSetImportance": obj.get("appSetImportance"),
            "appSetName": obj.get("appSetName"),
            "appSetType": obj.get("appSetType"),
            "createAppSetQosConfigInput": DeviceType4CreateAppSetQosConfigInput.from_dict(obj["createAppSetQosConfigInput"]) if obj.get("createAppSetQosConfigInput") is not None else None,
            "customAppType": obj.get("customAppType"),
            "members": obj.get("members")
        })
        return _obj


