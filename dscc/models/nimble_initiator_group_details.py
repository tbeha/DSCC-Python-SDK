# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.nimble_common_resource_attributes import NimbleCommonResourceAttributes
from dscc.models.nimble_fc_initiator import NimbleFCInitiator
from dscc.models.nimble_fc_session_details import NimbleFCSessionDetails
from dscc.models.nimble_fc_tdz_ports import NimbleFCTdzPorts
from dscc.models.nimble_iscsi_initiator import NimbleISCSIInitiator
from dscc.models.nimble_metadata import NimbleMetadata
from dscc.models.nimble_target_subnets import NimbleTargetSubnets
from dscc.models.nimble_vol_list import NimbleVolList
from typing import Optional, Set
from typing_extensions import Self

class NimbleInitiatorGroupDetails(BaseModel):
    """
    NimbleInitiatorGroupDetails
    """ # noqa: E501
    request_uri: Optional[StrictStr] = Field(default=None, description="requestUri for detailed initiator groups object", alias="requestUri")
    access_protocol: Optional[StrictStr] = Field(default=None, description="Initiator group access protocol. Possible values: 'iscsi', 'fc'.")
    app_uuid: Optional[StrictStr] = Field(default=None, description="Application identifier of initiator group. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed")
    host_type: Optional[StrictStr] = Field(default=None, description="Initiator group host type. Available options are auto and hpux. The default option is auto. This attribute will be applied to all the initiators in the initiator group. Initiators with different host OSes should not be kept in the same initiator group having a non-default host type attribute. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    id: Optional[StrictStr] = Field(default=None, description="Identifier for initiator group. A 42 digit hexadecimal number.")
    name: Optional[StrictStr] = Field(default=None, description="Name of initiator group. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    common_resource_attributes: Optional[NimbleCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    creation_time: Optional[StrictInt] = Field(default=None, description="Time when this initiator group was created. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    description: Optional[StrictStr] = Field(default=None, description="Text description of initiator group. String of up to 255 printable ASCII characters.")
    fc_initiators: Optional[List[Optional[NimbleFCInitiator]]] = Field(default=None, description="List of FC initiators. When create/update fc_initiators, wwpn is required. List of Fibre Channel initiators.")
    fc_sessions: Optional[List[Optional[NimbleFCSessionDetails]]] = Field(default=None, description="List of FC sessions.")
    fc_tdz_ports: Optional[List[Optional[NimbleFCTdzPorts]]] = Field(default=None, description="List of target Fibre Channel ports with Target Driven Zoning configured on this initiator group.")
    full_name: Optional[StrictStr] = Field(default=None, description="Initiator group's full name. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    generation: Optional[StrictInt] = Field(default=None, description="A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.")
    iscsi_initiators: Optional[List[Optional[NimbleISCSIInitiator]]] = Field(default=None, description="List of ISCSI initiators. When create/update iscsi_initiators, either iqn or ip_address is always required with label.")
    last_modified: Optional[StrictInt] = Field(default=None, description="Time when this initiator group was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    metadata: Optional[List[Optional[NimbleMetadata]]] = Field(default=None, description="Key-value pairs that augment an initiator group's attributes.")
    num_connections: Optional[StrictInt] = Field(default=None, description="Total number of connections from initiators in the initiator group. (This field is deprecated)")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Link to the object URI", alias="resourceUri")
    sc_host_id: Optional[StrictStr] = Field(default=None, description="Host Service Host Id", alias="sc_HostId")
    search_name: Optional[StrictStr] = Field(default=None, description="Initiator group name used for search. Alphanumeric string, up to 64 characters including hyphen, period, colon.")
    target_subnets: Optional[List[Optional[NimbleTargetSubnets]]] = Field(default=None, description="List of target subnet labels. If specified, discovery and access to volumes will be restricted to the specified subnets. List of target subnet tables.")
    type: Optional[StrictStr] = Field(default=None, description="The type of resource")
    volume_count: Optional[StrictInt] = Field(default=None, description="Number of volumes that are accessible by the initiator group. (This field is deprecated)")
    volume_list: Optional[List[Optional[NimbleVolList]]] = Field(default=None, description="List of volumes that are accessible by the initiator group. List of volumes. (This field is deprecated)")
    __properties: ClassVar[List[str]] = ["access_protocol", "app_uuid", "host_type", "id", "name", "associatedLinks", "commonResourceAttributes", "consoleUri", "creation_time", "customerId", "description", "fc_initiators", "fc_sessions", "fc_tdz_ports", "full_name", "generation", "iscsi_initiators", "last_modified", "metadata", "num_connections", "resourceUri", "sc_HostId", "search_name", "target_subnets", "type", "volume_count", "volume_list"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleInitiatorGroupDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fc_initiators (list)
        _items = []
        if self.fc_initiators:
            for _item in self.fc_initiators:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fc_initiators'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fc_sessions (list)
        _items = []
        if self.fc_sessions:
            for _item in self.fc_sessions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fc_sessions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fc_tdz_ports (list)
        _items = []
        if self.fc_tdz_ports:
            for _item in self.fc_tdz_ports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fc_tdz_ports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in iscsi_initiators (list)
        _items = []
        if self.iscsi_initiators:
            for _item in self.iscsi_initiators:
                if _item:
                    _items.append(_item.to_dict())
            _dict['iscsi_initiators'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item in self.metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in target_subnets (list)
        _items = []
        if self.target_subnets:
            for _item in self.target_subnets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['target_subnets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volume_list (list)
        _items = []
        if self.volume_list:
            for _item in self.volume_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['volume_list'] = _items
        # set to None if access_protocol (nullable) is None
        # and model_fields_set contains the field
        if self.access_protocol is None and "access_protocol" in self.model_fields_set:
            _dict['access_protocol'] = None

        # set to None if app_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.app_uuid is None and "app_uuid" in self.model_fields_set:
            _dict['app_uuid'] = None

        # set to None if host_type (nullable) is None
        # and model_fields_set contains the field
        if self.host_type is None and "host_type" in self.model_fields_set:
            _dict['host_type'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if creation_time (nullable) is None
        # and model_fields_set contains the field
        if self.creation_time is None and "creation_time" in self.model_fields_set:
            _dict['creation_time'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['full_name'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['last_modified'] = None

        # set to None if num_connections (nullable) is None
        # and model_fields_set contains the field
        if self.num_connections is None and "num_connections" in self.model_fields_set:
            _dict['num_connections'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if search_name (nullable) is None
        # and model_fields_set contains the field
        if self.search_name is None and "search_name" in self.model_fields_set:
            _dict['search_name'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if volume_count (nullable) is None
        # and model_fields_set contains the field
        if self.volume_count is None and "volume_count" in self.model_fields_set:
            _dict['volume_count'] = None

        # set to None if volume_list (nullable) is None
        # and model_fields_set contains the field
        if self.volume_list is None and "volume_list" in self.model_fields_set:
            _dict['volume_list'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleInitiatorGroupDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_protocol": obj.get("access_protocol"),
            "app_uuid": obj.get("app_uuid"),
            "host_type": obj.get("host_type"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "associatedLinks": [AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "commonResourceAttributes": NimbleCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "creation_time": obj.get("creation_time"),
            "customerId": obj.get("customerId"),
            "description": obj.get("description"),
            "fc_initiators": [NimbleFCInitiator.from_dict(_item) for _item in obj["fc_initiators"]] if obj.get("fc_initiators") is not None else None,
            "fc_sessions": [NimbleFCSessionDetails.from_dict(_item) for _item in obj["fc_sessions"]] if obj.get("fc_sessions") is not None else None,
            "fc_tdz_ports": [NimbleFCTdzPorts.from_dict(_item) for _item in obj["fc_tdz_ports"]] if obj.get("fc_tdz_ports") is not None else None,
            "full_name": obj.get("full_name"),
            "generation": obj.get("generation"),
            "iscsi_initiators": [NimbleISCSIInitiator.from_dict(_item) for _item in obj["iscsi_initiators"]] if obj.get("iscsi_initiators") is not None else None,
            "last_modified": obj.get("last_modified"),
            "metadata": [NimbleMetadata.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "num_connections": obj.get("num_connections"),
            "resourceUri": obj.get("resourceUri"),
            "sc_HostId": obj.get("sc_HostId"),
            "search_name": obj.get("search_name"),
            "target_subnets": [NimbleTargetSubnets.from_dict(_item) for _item in obj["target_subnets"]] if obj.get("target_subnets") is not None else None,
            "type": obj.get("type"),
            "volume_count": obj.get("volume_count"),
            "volume_list": [NimbleVolList.from_dict(_item) for _item in obj["volume_list"]] if obj.get("volume_list") is not None else None
        })
        return _obj


