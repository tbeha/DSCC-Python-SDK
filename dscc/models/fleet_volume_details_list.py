# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dscc.models.common_resource_attributesfleet import CommonResourceAttributesfleet
from dscc.models.device_type4_application_set_details_initiators_inner import DeviceType4ApplicationSetDetailsInitiatorsInner
from dscc.models.device_type4_replication_partner_common_fields_associated_links_inner import DeviceType4ReplicationPartnerCommonFieldsAssociatedLinksInner
from typing import Optional, Set
from typing_extensions import Self

class FleetVolumeDetailsList(BaseModel):
    """
    FleetVolumeDetailsList
    """ # noqa: E501
    associated_links: Optional[List[DeviceType4ReplicationPartnerCommonFieldsAssociatedLinksInner]] = Field(default=None, description="Associated Links", alias="associatedLinks")
    common_resource_attributes: Optional[CommonResourceAttributesfleet] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    health_state: Optional[StrictStr] = Field(default=None, description="Health State of volume. `Filter, Sort`", alias="healthState")
    host_written_capacity_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Host written data size in MiB. `Filter, Sort`", alias="hostWrittenCapacityMiB")
    id: Optional[StrictStr] = Field(default=None, description="UUID string uniquely identifying the storage system object. `Filter`")
    initiators: Optional[List[DeviceType4ApplicationSetDetailsInitiatorsInner]] = Field(default=None, description="Initiator details. This field is deprecated.")
    intrinsic_resource: Optional[StrictStr] = Field(default=None, description="type of volume", alias="intrinsicResource")
    is_internal: Optional[StrictBool] = Field(default=None, description="boolean value which specifies if it is a systemVolume or not `Filter`", alias="isInternal")
    is_system_volume: Optional[StrictBool] = Field(default=None, description="boolean value which specifies if it is a systemVolume or not `Filter`", alias="isSystemVolume")
    name: Optional[StrictStr] = Field(default=None, description="A user friendly name to identify the storage system volume (resourceName). `Filter, Sort`")
    product_family: Optional[StrictStr] = Field(default=None, description="Product Family", alias="productFamily")
    provisioned_size_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Provisioned Size in MiB", alias="provisionedSizeMiB")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed volume object", alias="resourceUri")
    size_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Size in MiB `Filter, Sort`", alias="sizeMiB")
    space_warning: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="User alloc space warning", alias="spaceWarning")
    sub_type: Optional[StrictStr] = Field(default=None, description="subType of the volume", alias="subType")
    system_id: Optional[StrictStr] = Field(default=None, description="SystemUid/Serial Number  of the array. `Filter, Sort`", alias="systemId")
    thin_savings: Optional[StrictStr] = Field(default=None, description="Thin savings", alias="thinSavings")
    type: Optional[StrictStr] = Field(default=None, description="type")
    used_capacity_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Used capacity percentage of volume. `Filter, Sort`", alias="usedCapacityPercent")
    used_size_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Size in MiB", alias="usedSizeMiB")
    volume_set_id: Optional[StrictStr] = Field(default=None, description="SystemUid/serialNumber of the volumeSet.", alias="volumeSetId")
    volume_type: Optional[StrictStr] = Field(default=None, description="VV Type", alias="volumeType")
    wwn: Optional[StrictStr] = Field(default=None, description="Volume wwn.")
    __properties: ClassVar[List[str]] = ["associatedLinks", "commonResourceAttributes", "consoleUri", "customerId", "generation", "healthState", "hostWrittenCapacityMiB", "id", "initiators", "intrinsicResource", "isInternal", "isSystemVolume", "name", "productFamily", "provisionedSizeMiB", "resourceUri", "sizeMiB", "spaceWarning", "subType", "systemId", "thinSavings", "type", "usedCapacityPercent", "usedSizeMiB", "volumeSetId", "volumeType", "wwn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FleetVolumeDetailsList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in initiators (list)
        _items = []
        if self.initiators:
            for _item in self.initiators:
                if _item:
                    _items.append(_item.to_dict())
            _dict['initiators'] = _items
        # set to None if associated_links (nullable) is None
        # and model_fields_set contains the field
        if self.associated_links is None and "associated_links" in self.model_fields_set:
            _dict['associatedLinks'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if health_state (nullable) is None
        # and model_fields_set contains the field
        if self.health_state is None and "health_state" in self.model_fields_set:
            _dict['healthState'] = None

        # set to None if host_written_capacity_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.host_written_capacity_mi_b is None and "host_written_capacity_mi_b" in self.model_fields_set:
            _dict['hostWrittenCapacityMiB'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if initiators (nullable) is None
        # and model_fields_set contains the field
        if self.initiators is None and "initiators" in self.model_fields_set:
            _dict['initiators'] = None

        # set to None if intrinsic_resource (nullable) is None
        # and model_fields_set contains the field
        if self.intrinsic_resource is None and "intrinsic_resource" in self.model_fields_set:
            _dict['intrinsicResource'] = None

        # set to None if is_internal (nullable) is None
        # and model_fields_set contains the field
        if self.is_internal is None and "is_internal" in self.model_fields_set:
            _dict['isInternal'] = None

        # set to None if is_system_volume (nullable) is None
        # and model_fields_set contains the field
        if self.is_system_volume is None and "is_system_volume" in self.model_fields_set:
            _dict['isSystemVolume'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if product_family (nullable) is None
        # and model_fields_set contains the field
        if self.product_family is None and "product_family" in self.model_fields_set:
            _dict['productFamily'] = None

        # set to None if provisioned_size_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.provisioned_size_mi_b is None and "provisioned_size_mi_b" in self.model_fields_set:
            _dict['provisionedSizeMiB'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if size_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.size_mi_b is None and "size_mi_b" in self.model_fields_set:
            _dict['sizeMiB'] = None

        # set to None if space_warning (nullable) is None
        # and model_fields_set contains the field
        if self.space_warning is None and "space_warning" in self.model_fields_set:
            _dict['spaceWarning'] = None

        # set to None if sub_type (nullable) is None
        # and model_fields_set contains the field
        if self.sub_type is None and "sub_type" in self.model_fields_set:
            _dict['subType'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if thin_savings (nullable) is None
        # and model_fields_set contains the field
        if self.thin_savings is None and "thin_savings" in self.model_fields_set:
            _dict['thinSavings'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if used_capacity_percent (nullable) is None
        # and model_fields_set contains the field
        if self.used_capacity_percent is None and "used_capacity_percent" in self.model_fields_set:
            _dict['usedCapacityPercent'] = None

        # set to None if used_size_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.used_size_mi_b is None and "used_size_mi_b" in self.model_fields_set:
            _dict['usedSizeMiB'] = None

        # set to None if volume_set_id (nullable) is None
        # and model_fields_set contains the field
        if self.volume_set_id is None and "volume_set_id" in self.model_fields_set:
            _dict['volumeSetId'] = None

        # set to None if volume_type (nullable) is None
        # and model_fields_set contains the field
        if self.volume_type is None and "volume_type" in self.model_fields_set:
            _dict['volumeType'] = None

        # set to None if wwn (nullable) is None
        # and model_fields_set contains the field
        if self.wwn is None and "wwn" in self.model_fields_set:
            _dict['wwn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FleetVolumeDetailsList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedLinks": [DeviceType4ReplicationPartnerCommonFieldsAssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "commonResourceAttributes": CommonResourceAttributesfleet.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "customerId": obj.get("customerId"),
            "generation": obj.get("generation"),
            "healthState": obj.get("healthState"),
            "hostWrittenCapacityMiB": obj.get("hostWrittenCapacityMiB"),
            "id": obj.get("id"),
            "initiators": [DeviceType4ApplicationSetDetailsInitiatorsInner.from_dict(_item) for _item in obj["initiators"]] if obj.get("initiators") is not None else None,
            "intrinsicResource": obj.get("intrinsicResource"),
            "isInternal": obj.get("isInternal"),
            "isSystemVolume": obj.get("isSystemVolume"),
            "name": obj.get("name"),
            "productFamily": obj.get("productFamily"),
            "provisionedSizeMiB": obj.get("provisionedSizeMiB"),
            "resourceUri": obj.get("resourceUri"),
            "sizeMiB": obj.get("sizeMiB"),
            "spaceWarning": obj.get("spaceWarning"),
            "subType": obj.get("subType"),
            "systemId": obj.get("systemId"),
            "thinSavings": obj.get("thinSavings"),
            "type": obj.get("type"),
            "usedCapacityPercent": obj.get("usedCapacityPercent"),
            "usedSizeMiB": obj.get("usedSizeMiB"),
            "volumeSetId": obj.get("volumeSetId"),
            "volumeType": obj.get("volumeType"),
            "wwn": obj.get("wwn")
        })
        return _obj


