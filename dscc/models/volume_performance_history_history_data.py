# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.historical_metric_data import HistoricalMetricData
from dscc.models.qlen_metric_data_value import QlenMetricDataValue
from typing import Optional, Set
from typing_extensions import Self

class VolumePerformanceHistoryHistoryData(BaseModel):
    """
    performance history data
    """ # noqa: E501
    iops_metrics_data: Optional[HistoricalMetricData] = Field(default=None, alias="iopsMetricsData")
    iosz_metrics_data_kbs: Optional[HistoricalMetricData] = Field(default=None, alias="ioszMetricsDataKbs")
    latency_metrics_data_ms: Optional[HistoricalMetricData] = Field(default=None, alias="latencyMetricsDataMs")
    qlen_metrics_data: Optional[QlenMetricDataValue] = Field(default=None, alias="qlenMetricsData")
    throughput_metrics_data_kbps: Optional[HistoricalMetricData] = Field(default=None, alias="throughputMetricsDataKbps")
    __properties: ClassVar[List[str]] = ["iopsMetricsData", "ioszMetricsDataKbs", "latencyMetricsDataMs", "qlenMetricsData", "throughputMetricsDataKbps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumePerformanceHistoryHistoryData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of iops_metrics_data
        if self.iops_metrics_data:
            _dict['iopsMetricsData'] = self.iops_metrics_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iosz_metrics_data_kbs
        if self.iosz_metrics_data_kbs:
            _dict['ioszMetricsDataKbs'] = self.iosz_metrics_data_kbs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latency_metrics_data_ms
        if self.latency_metrics_data_ms:
            _dict['latencyMetricsDataMs'] = self.latency_metrics_data_ms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qlen_metrics_data
        if self.qlen_metrics_data:
            _dict['qlenMetricsData'] = self.qlen_metrics_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of throughput_metrics_data_kbps
        if self.throughput_metrics_data_kbps:
            _dict['throughputMetricsDataKbps'] = self.throughput_metrics_data_kbps.to_dict()
        # set to None if iops_metrics_data (nullable) is None
        # and model_fields_set contains the field
        if self.iops_metrics_data is None and "iops_metrics_data" in self.model_fields_set:
            _dict['iopsMetricsData'] = None

        # set to None if iosz_metrics_data_kbs (nullable) is None
        # and model_fields_set contains the field
        if self.iosz_metrics_data_kbs is None and "iosz_metrics_data_kbs" in self.model_fields_set:
            _dict['ioszMetricsDataKbs'] = None

        # set to None if latency_metrics_data_ms (nullable) is None
        # and model_fields_set contains the field
        if self.latency_metrics_data_ms is None and "latency_metrics_data_ms" in self.model_fields_set:
            _dict['latencyMetricsDataMs'] = None

        # set to None if qlen_metrics_data (nullable) is None
        # and model_fields_set contains the field
        if self.qlen_metrics_data is None and "qlen_metrics_data" in self.model_fields_set:
            _dict['qlenMetricsData'] = None

        # set to None if throughput_metrics_data_kbps (nullable) is None
        # and model_fields_set contains the field
        if self.throughput_metrics_data_kbps is None and "throughput_metrics_data_kbps" in self.model_fields_set:
            _dict['throughputMetricsDataKbps'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumePerformanceHistoryHistoryData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "iopsMetricsData": HistoricalMetricData.from_dict(obj["iopsMetricsData"]) if obj.get("iopsMetricsData") is not None else None,
            "ioszMetricsDataKbs": HistoricalMetricData.from_dict(obj["ioszMetricsDataKbs"]) if obj.get("ioszMetricsDataKbs") is not None else None,
            "latencyMetricsDataMs": HistoricalMetricData.from_dict(obj["latencyMetricsDataMs"]) if obj.get("latencyMetricsDataMs") is not None else None,
            "qlenMetricsData": QlenMetricDataValue.from_dict(obj["qlenMetricsData"]) if obj.get("qlenMetricsData") is not None else None,
            "throughputMetricsDataKbps": HistoricalMetricData.from_dict(obj["throughputMetricsDataKbps"]) if obj.get("throughputMetricsDataKbps") is not None else None
        })
        return _obj


