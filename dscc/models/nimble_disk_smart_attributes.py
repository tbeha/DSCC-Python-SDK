# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleDiskSmartAttributes(BaseModel):
    """
    NimbleDiskSmartAttributes
    """ # noqa: E501
    cur_value: Optional[StrictInt] = Field(default=None, description="Current value.")
    flags: Optional[StrictInt] = Field(default=None, description="Smart flags.")
    last_updated_epoch_secs: Optional[StrictInt] = Field(default=None, description="Last update time in epoch seconds.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the Smart attribute.")
    raw_value: Optional[StrictInt] = Field(default=None, description="Raw value.")
    smart_id: Optional[StrictInt] = Field(default=None, description="Smart attribute ID.")
    threshold: Optional[StrictInt] = Field(default=None, description="Smart threshold.")
    worst_value: Optional[StrictInt] = Field(default=None, description="Worst value.")
    __properties: ClassVar[List[str]] = ["cur_value", "flags", "last_updated_epoch_secs", "name", "raw_value", "smart_id", "threshold", "worst_value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleDiskSmartAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cur_value (nullable) is None
        # and model_fields_set contains the field
        if self.cur_value is None and "cur_value" in self.model_fields_set:
            _dict['cur_value'] = None

        # set to None if flags (nullable) is None
        # and model_fields_set contains the field
        if self.flags is None and "flags" in self.model_fields_set:
            _dict['flags'] = None

        # set to None if last_updated_epoch_secs (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated_epoch_secs is None and "last_updated_epoch_secs" in self.model_fields_set:
            _dict['last_updated_epoch_secs'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if raw_value (nullable) is None
        # and model_fields_set contains the field
        if self.raw_value is None and "raw_value" in self.model_fields_set:
            _dict['raw_value'] = None

        # set to None if smart_id (nullable) is None
        # and model_fields_set contains the field
        if self.smart_id is None and "smart_id" in self.model_fields_set:
            _dict['smart_id'] = None

        # set to None if threshold (nullable) is None
        # and model_fields_set contains the field
        if self.threshold is None and "threshold" in self.model_fields_set:
            _dict['threshold'] = None

        # set to None if worst_value (nullable) is None
        # and model_fields_set contains the field
        if self.worst_value is None and "worst_value" in self.model_fields_set:
            _dict['worst_value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleDiskSmartAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cur_value": obj.get("cur_value"),
            "flags": obj.get("flags"),
            "last_updated_epoch_secs": obj.get("last_updated_epoch_secs"),
            "name": obj.get("name"),
            "raw_value": obj.get("raw_value"),
            "smart_id": obj.get("smart_id"),
            "threshold": obj.get("threshold"),
            "worst_value": obj.get("worst_value")
        })
        return _obj


