# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4CreateVolumeInput(BaseModel):
    """
    Request body for creating volumes
    """ # noqa: E501
    comments: Optional[StrictStr] = Field(default=None, description="test")
    count: Optional[StrictInt] = Field(default=None, description="Volumes count")
    data_reduction: Optional[StrictBool] = Field(default=None, description="Data Reduction", alias="dataReduction")
    name: StrictStr = Field(description="Name of the volume")
    size_mib: StrictInt = Field(description="Size of the volume to be created.", alias="sizeMib")
    snapshot_alloc_warning: Optional[StrictInt] = Field(default=None, description="Snapshot Alloc Warning", alias="snapshotAllocWarning")
    user_alloc_warning: Optional[StrictInt] = Field(default=None, description="User Alloc Warning", alias="userAllocWarning")
    user_cpg: StrictStr = Field(description="User CPG", alias="userCpg")
    __properties: ClassVar[List[str]] = ["comments", "count", "dataReduction", "name", "sizeMib", "snapshotAllocWarning", "userAllocWarning", "userCpg"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4CreateVolumeInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if comments (nullable) is None
        # and model_fields_set contains the field
        if self.comments is None and "comments" in self.model_fields_set:
            _dict['comments'] = None

        # set to None if count (nullable) is None
        # and model_fields_set contains the field
        if self.count is None and "count" in self.model_fields_set:
            _dict['count'] = None

        # set to None if data_reduction (nullable) is None
        # and model_fields_set contains the field
        if self.data_reduction is None and "data_reduction" in self.model_fields_set:
            _dict['dataReduction'] = None

        # set to None if snapshot_alloc_warning (nullable) is None
        # and model_fields_set contains the field
        if self.snapshot_alloc_warning is None and "snapshot_alloc_warning" in self.model_fields_set:
            _dict['snapshotAllocWarning'] = None

        # set to None if user_alloc_warning (nullable) is None
        # and model_fields_set contains the field
        if self.user_alloc_warning is None and "user_alloc_warning" in self.model_fields_set:
            _dict['userAllocWarning'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4CreateVolumeInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comments": obj.get("comments"),
            "count": obj.get("count"),
            "dataReduction": obj.get("dataReduction"),
            "name": obj.get("name"),
            "sizeMib": obj.get("sizeMib"),
            "snapshotAllocWarning": obj.get("snapshotAllocWarning"),
            "userAllocWarning": obj.get("userAllocWarning"),
            "userCpg": obj.get("userCpg")
        })
        return _obj


