# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4cpgGrow(BaseModel):
    """
    CPG grow information
    """ # noqa: E501
    args: Optional[StrictStr] = Field(default=None, description="The admin/data LD creation arguments used by the CPG when growing new LDs")
    limit_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Limit size in MiB beyond which the admin/data space will not grow", alias="limitMiB")
    size_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount of admin/data LD storage in MiB created on each auto-grow", alias="sizeMiB")
    warn_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Size in MiB of the admin/data space at which a warning alert is generated", alias="warnMiB")
    __properties: ClassVar[List[str]] = ["args", "limitMiB", "sizeMiB", "warnMiB"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4cpgGrow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4cpgGrow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "args": obj.get("args"),
            "limitMiB": obj.get("limitMiB"),
            "sizeMiB": obj.get("sizeMiB"),
            "warnMiB": obj.get("warnMiB")
        })
        return _obj


