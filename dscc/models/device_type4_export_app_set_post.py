# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.device_type4_export_app_set_post_host_group_data_map_inner import DeviceType4ExportAppSetPostHostGroupDataMapInner
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4ExportAppSetPost(BaseModel):
    """
    DeviceType4ExportAppSetPost
    """ # noqa: E501
    host_group_data_map: Optional[List[DeviceType4ExportAppSetPostHostGroupDataMapInner]] = Field(default=None, description="Host Group IDs and the corresponding attributes for each host group ID. NVMe transport type for each host Group ID is defined in this map and it is applicable if all the hosts of this host group are associated with the NVMe protocol.", alias="hostGroupDataMap")
    host_group_ids: Optional[List[Optional[StrictStr]]] = Field(description="HostGroups", alias="hostGroupIds")
    proximity: Optional[StrictStr] = Field(default=None, description="Host proximity setting for Active Peer Persistence configuration. Supported values are - PRIMARY, SECONDARY and ALL. Default proximity is PRIMARY.")
    __properties: ClassVar[List[str]] = ["hostGroupDataMap", "hostGroupIds", "proximity"]

    @field_validator('proximity')
    def proximity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRIMARY', 'SECONDARY', 'ALL']):
            raise ValueError("must be one of enum values ('PRIMARY', 'SECONDARY', 'ALL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4ExportAppSetPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in host_group_data_map (list)
        _items = []
        if self.host_group_data_map:
            for _item in self.host_group_data_map:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hostGroupDataMap'] = _items
        # set to None if host_group_data_map (nullable) is None
        # and model_fields_set contains the field
        if self.host_group_data_map is None and "host_group_data_map" in self.model_fields_set:
            _dict['hostGroupDataMap'] = None

        # set to None if host_group_ids (nullable) is None
        # and model_fields_set contains the field
        if self.host_group_ids is None and "host_group_ids" in self.model_fields_set:
            _dict['hostGroupIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4ExportAppSetPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hostGroupDataMap": [DeviceType4ExportAppSetPostHostGroupDataMapInner.from_dict(_item) for _item in obj["hostGroupDataMap"]] if obj.get("hostGroupDataMap") is not None else None,
            "hostGroupIds": obj.get("hostGroupIds"),
            "proximity": obj.get("proximity")
        })
        return _obj


