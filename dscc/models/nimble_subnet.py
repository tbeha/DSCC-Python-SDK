# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleSubnet(BaseModel):
    """
    NimbleSubnet
    """ # noqa: E501
    allow_group: Optional[StrictBool] = Field(default=None, description="Indicates whether group is allowed.")
    allow_iscsi: Optional[StrictBool] = Field(default=None, description="Indicates whether iSCSI is allowed.")
    discovery_ip: Optional[StrictStr] = Field(default=None, description="Discovery IP address.")
    failover: Optional[StrictBool] = Field(default=None, description="Failover setting of the subnet.")
    failover_enable_time: Optional[StrictInt] = Field(default=None, description="Failover for this subnet will be enabled again at the time specified by failover_enable_time.")
    label: Optional[StrictStr] = Field(default=None, description="Subnet label.")
    mtu: Optional[StrictInt] = Field(default=None, description="MTU for specified subnet.")
    netmask: Optional[StrictStr] = Field(default=None, description="Subnet netmask address.")
    network: Optional[StrictStr] = Field(default=None, description="Network IP address.")
    netzone_type: Optional[StrictStr] = Field(default=None, description="Netzone type. Possible values: 'single', 'evenodd', 'bisect', 'none'.")
    type: Optional[StrictStr] = Field(default=None, description="Subnet type. Possible values: 'mgmt', 'unconfigured', 'data', 'mgmt_data', 'invalid'.")
    vlan_id: Optional[StrictInt] = Field(default=None, description="VLAN ID for specified subnet.")
    __properties: ClassVar[List[str]] = ["allow_group", "allow_iscsi", "discovery_ip", "failover", "failover_enable_time", "label", "mtu", "netmask", "network", "netzone_type", "type", "vlan_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleSubnet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if allow_group (nullable) is None
        # and model_fields_set contains the field
        if self.allow_group is None and "allow_group" in self.model_fields_set:
            _dict['allow_group'] = None

        # set to None if allow_iscsi (nullable) is None
        # and model_fields_set contains the field
        if self.allow_iscsi is None and "allow_iscsi" in self.model_fields_set:
            _dict['allow_iscsi'] = None

        # set to None if discovery_ip (nullable) is None
        # and model_fields_set contains the field
        if self.discovery_ip is None and "discovery_ip" in self.model_fields_set:
            _dict['discovery_ip'] = None

        # set to None if failover (nullable) is None
        # and model_fields_set contains the field
        if self.failover is None and "failover" in self.model_fields_set:
            _dict['failover'] = None

        # set to None if failover_enable_time (nullable) is None
        # and model_fields_set contains the field
        if self.failover_enable_time is None and "failover_enable_time" in self.model_fields_set:
            _dict['failover_enable_time'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if mtu (nullable) is None
        # and model_fields_set contains the field
        if self.mtu is None and "mtu" in self.model_fields_set:
            _dict['mtu'] = None

        # set to None if netmask (nullable) is None
        # and model_fields_set contains the field
        if self.netmask is None and "netmask" in self.model_fields_set:
            _dict['netmask'] = None

        # set to None if network (nullable) is None
        # and model_fields_set contains the field
        if self.network is None and "network" in self.model_fields_set:
            _dict['network'] = None

        # set to None if netzone_type (nullable) is None
        # and model_fields_set contains the field
        if self.netzone_type is None and "netzone_type" in self.model_fields_set:
            _dict['netzone_type'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if vlan_id (nullable) is None
        # and model_fields_set contains the field
        if self.vlan_id is None and "vlan_id" in self.model_fields_set:
            _dict['vlan_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleSubnet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_group": obj.get("allow_group"),
            "allow_iscsi": obj.get("allow_iscsi"),
            "discovery_ip": obj.get("discovery_ip"),
            "failover": obj.get("failover"),
            "failover_enable_time": obj.get("failover_enable_time"),
            "label": obj.get("label"),
            "mtu": obj.get("mtu"),
            "netmask": obj.get("netmask"),
            "network": obj.get("network"),
            "netzone_type": obj.get("netzone_type"),
            "type": obj.get("type"),
            "vlan_id": obj.get("vlan_id")
        })
        return _obj


