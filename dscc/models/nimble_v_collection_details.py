# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.nimble_common_resource_attributes import NimbleCommonResourceAttributes
from dscc.models.nimble_ns_key_value import NimbleNsKeyValue
from dscc.models.nimble_ns_schedule import NimbleNsSchedule
from dscc.models.nimble_snapcoll_summary import NimbleSnapcollSummary
from dscc.models.nimble_volume_collection_volume_pool_info import NimbleVolumeCollectionVolumePoolInfo
from dscc.models.nimble_volume_summary import NimbleVolumeSummary
from typing import Optional, Set
from typing_extensions import Self

class NimbleVCollectionDetails(BaseModel):
    """
    NimbleVCollectionDetails
    """ # noqa: E501
    agent_hostname: Optional[StrictStr] = Field(default=None, description="Generic backup agent hostname. Custom port number can be specified with agent hostname using \\\\\":\\\\\".")
    app_sync: Optional[StrictStr] = Field(default=None, description="Application Synchronization. Possible values: 'vss', 'vmware', 'none', 'generic'.")
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details")
    cache_pinned_volume_list: Optional[List[Optional[NimbleVolumeSummary]]] = Field(default=None, description="List of cache pinned volumes associated with volume collection.")
    common_resource_attributes: Optional[NimbleCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    creation_time: Optional[StrictInt] = Field(default=None, description="Application server hostname.")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    description: Optional[StrictStr] = Field(default=None, description="Text descrption of volume collection.")
    downstream_volume_list: Optional[List[Optional[NimbleVolumeCollectionVolumePoolInfo]]] = Field(default=None, description="List of downstream volumes associated with the volume collection.")
    full_name: Optional[StrictStr] = Field(default=None, description="Fully qualified name of volume collection.")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    handover_replication_partner: Optional[StrictStr] = Field(default=None, description="Replication partner to which ownership is being transferred as part of handover operation.")
    is_handing_over: Optional[StrictBool] = Field(default=None, description="Indicates whether a handover operation is in progress on this volume collection.")
    is_mfa_protected: Optional[StrictBool] = Field(default=None, description="Protected by multi-factor authentication. Possible values: 'true', 'false'.")
    is_standalone_volcoll: Optional[StrictBool] = Field(default=None, description="Last snapshot collection on this volume collection.")
    lag_time: Optional[StrictInt] = Field(default=None, description="Replication lag time for volume collection.")
    last_replicated_snapcoll: Optional[NimbleSnapcollSummary] = Field(default=None, description="Last replicated snapshot collection on this volume collection.")
    last_snapcoll: Optional[NimbleSnapcollSummary] = Field(default=None, description="Last snapshot collection on this volume collection.")
    metadata: Optional[List[Optional[NimbleNsKeyValue]]] = Field(default=None, description="Key-value pairs that augment a volume collection's attributes.")
    pol_owner_name: Optional[StrictStr] = Field(default=None, description="PolOwnerName - Owner group.")
    protection_type: Optional[StrictStr] = Field(default=None, description="Specifies if volume collection is protected with schedules. If protected, indicated whether replication is setup.")
    repl_bytes_transferred: Optional[StrictInt] = Field(default=None, description="Total size of volumes replicated for this volume collection.")
    repl_priority: Optional[StrictStr] = Field(default=None, description="Replication priority for the volume collection with the following choices: {normal | high}.  Possible values: 'normal', 'high'.")
    replication_partner: Optional[List[StrictStr]] = Field(default=None, description="List of replication partners associated with the volume collection.")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Link to the object URI", alias="resourceUri")
    schedule_list: Optional[List[Optional[NimbleNsSchedule]]] = Field(default=None, description="List of schedules for this volume collection.")
    search_name: Optional[StrictStr] = Field(default=None, description="Name of volume collection used for object search.")
    snapcoll_count: Optional[StrictInt] = Field(default=None, description="Count of snapshot collections associated with volume collection.")
    srep_last_sync: Optional[StrictInt] = Field(default=None, description="Time when a synchronously replicated volume collection was last synchronized.")
    srep_resync_percent: Optional[StrictInt] = Field(default=None, description="Percentage of the resync progress for a synchronously replicated volume collection.")
    total_repl_bytes: Optional[StrictInt] = Field(default=None, description="Total size of volumes to be replicated for this volume collection.")
    type: Optional[StrictStr] = Field(default=None, description="type")
    upstream_volume_list: Optional[List[Optional[NimbleVolumeCollectionVolumePoolInfo]]] = Field(default=None, description="List of upstream volumes associated with the volume collection.")
    vcenter_hostname: Optional[StrictStr] = Field(default=None, description="VMware vCenter hostname. Custom port number can be specified with vCenter hostname using \\\\\":\\\\\".")
    vcenter_username: Optional[StrictStr] = Field(default=None, description="Application VMware vCenter username.")
    volcoll_creator_id: Optional[StrictStr] = Field(default=None, description="Originator id for the volume collection.")
    volcoll_creator_name: Optional[StrictStr] = Field(default=None, description="Originator name for the volume collection.")
    volume_count: Optional[StrictInt] = Field(default=None, description="Count of volumes associated with the volume collection.")
    volume_list: Optional[List[Optional[NimbleVolumeSummary]]] = Field(default=None, description="List of volumes associated with the volume collection.")
    __properties: ClassVar[List[str]] = ["agent_hostname", "app_sync", "associated_links", "cache_pinned_volume_list", "commonResourceAttributes", "consoleUri", "creation_time", "customerId", "description", "downstream_volume_list", "full_name", "generation", "handover_replication_partner", "is_handing_over", "is_mfa_protected", "is_standalone_volcoll", "lag_time", "last_replicated_snapcoll", "last_snapcoll", "metadata", "pol_owner_name", "protection_type", "repl_bytes_transferred", "repl_priority", "replication_partner", "resourceUri", "schedule_list", "search_name", "snapcoll_count", "srep_last_sync", "srep_resync_percent", "total_repl_bytes", "type", "upstream_volume_list", "vcenter_hostname", "vcenter_username", "volcoll_creator_id", "volcoll_creator_name", "volume_count", "volume_list"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleVCollectionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associated_links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cache_pinned_volume_list (list)
        _items = []
        if self.cache_pinned_volume_list:
            for _item in self.cache_pinned_volume_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cache_pinned_volume_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in downstream_volume_list (list)
        _items = []
        if self.downstream_volume_list:
            for _item in self.downstream_volume_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['downstream_volume_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_replicated_snapcoll
        if self.last_replicated_snapcoll:
            _dict['last_replicated_snapcoll'] = self.last_replicated_snapcoll.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_snapcoll
        if self.last_snapcoll:
            _dict['last_snapcoll'] = self.last_snapcoll.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item in self.metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in schedule_list (list)
        _items = []
        if self.schedule_list:
            for _item in self.schedule_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['schedule_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in upstream_volume_list (list)
        _items = []
        if self.upstream_volume_list:
            for _item in self.upstream_volume_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['upstream_volume_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volume_list (list)
        _items = []
        if self.volume_list:
            for _item in self.volume_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['volume_list'] = _items
        # set to None if agent_hostname (nullable) is None
        # and model_fields_set contains the field
        if self.agent_hostname is None and "agent_hostname" in self.model_fields_set:
            _dict['agent_hostname'] = None

        # set to None if app_sync (nullable) is None
        # and model_fields_set contains the field
        if self.app_sync is None and "app_sync" in self.model_fields_set:
            _dict['app_sync'] = None

        # set to None if cache_pinned_volume_list (nullable) is None
        # and model_fields_set contains the field
        if self.cache_pinned_volume_list is None and "cache_pinned_volume_list" in self.model_fields_set:
            _dict['cache_pinned_volume_list'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if creation_time (nullable) is None
        # and model_fields_set contains the field
        if self.creation_time is None and "creation_time" in self.model_fields_set:
            _dict['creation_time'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if downstream_volume_list (nullable) is None
        # and model_fields_set contains the field
        if self.downstream_volume_list is None and "downstream_volume_list" in self.model_fields_set:
            _dict['downstream_volume_list'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['full_name'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if handover_replication_partner (nullable) is None
        # and model_fields_set contains the field
        if self.handover_replication_partner is None and "handover_replication_partner" in self.model_fields_set:
            _dict['handover_replication_partner'] = None

        # set to None if is_handing_over (nullable) is None
        # and model_fields_set contains the field
        if self.is_handing_over is None and "is_handing_over" in self.model_fields_set:
            _dict['is_handing_over'] = None

        # set to None if is_mfa_protected (nullable) is None
        # and model_fields_set contains the field
        if self.is_mfa_protected is None and "is_mfa_protected" in self.model_fields_set:
            _dict['is_mfa_protected'] = None

        # set to None if is_standalone_volcoll (nullable) is None
        # and model_fields_set contains the field
        if self.is_standalone_volcoll is None and "is_standalone_volcoll" in self.model_fields_set:
            _dict['is_standalone_volcoll'] = None

        # set to None if lag_time (nullable) is None
        # and model_fields_set contains the field
        if self.lag_time is None and "lag_time" in self.model_fields_set:
            _dict['lag_time'] = None

        # set to None if last_replicated_snapcoll (nullable) is None
        # and model_fields_set contains the field
        if self.last_replicated_snapcoll is None and "last_replicated_snapcoll" in self.model_fields_set:
            _dict['last_replicated_snapcoll'] = None

        # set to None if last_snapcoll (nullable) is None
        # and model_fields_set contains the field
        if self.last_snapcoll is None and "last_snapcoll" in self.model_fields_set:
            _dict['last_snapcoll'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if pol_owner_name (nullable) is None
        # and model_fields_set contains the field
        if self.pol_owner_name is None and "pol_owner_name" in self.model_fields_set:
            _dict['pol_owner_name'] = None

        # set to None if protection_type (nullable) is None
        # and model_fields_set contains the field
        if self.protection_type is None and "protection_type" in self.model_fields_set:
            _dict['protection_type'] = None

        # set to None if repl_bytes_transferred (nullable) is None
        # and model_fields_set contains the field
        if self.repl_bytes_transferred is None and "repl_bytes_transferred" in self.model_fields_set:
            _dict['repl_bytes_transferred'] = None

        # set to None if repl_priority (nullable) is None
        # and model_fields_set contains the field
        if self.repl_priority is None and "repl_priority" in self.model_fields_set:
            _dict['repl_priority'] = None

        # set to None if replication_partner (nullable) is None
        # and model_fields_set contains the field
        if self.replication_partner is None and "replication_partner" in self.model_fields_set:
            _dict['replication_partner'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if schedule_list (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_list is None and "schedule_list" in self.model_fields_set:
            _dict['schedule_list'] = None

        # set to None if search_name (nullable) is None
        # and model_fields_set contains the field
        if self.search_name is None and "search_name" in self.model_fields_set:
            _dict['search_name'] = None

        # set to None if snapcoll_count (nullable) is None
        # and model_fields_set contains the field
        if self.snapcoll_count is None and "snapcoll_count" in self.model_fields_set:
            _dict['snapcoll_count'] = None

        # set to None if srep_last_sync (nullable) is None
        # and model_fields_set contains the field
        if self.srep_last_sync is None and "srep_last_sync" in self.model_fields_set:
            _dict['srep_last_sync'] = None

        # set to None if srep_resync_percent (nullable) is None
        # and model_fields_set contains the field
        if self.srep_resync_percent is None and "srep_resync_percent" in self.model_fields_set:
            _dict['srep_resync_percent'] = None

        # set to None if total_repl_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.total_repl_bytes is None and "total_repl_bytes" in self.model_fields_set:
            _dict['total_repl_bytes'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if upstream_volume_list (nullable) is None
        # and model_fields_set contains the field
        if self.upstream_volume_list is None and "upstream_volume_list" in self.model_fields_set:
            _dict['upstream_volume_list'] = None

        # set to None if vcenter_hostname (nullable) is None
        # and model_fields_set contains the field
        if self.vcenter_hostname is None and "vcenter_hostname" in self.model_fields_set:
            _dict['vcenter_hostname'] = None

        # set to None if vcenter_username (nullable) is None
        # and model_fields_set contains the field
        if self.vcenter_username is None and "vcenter_username" in self.model_fields_set:
            _dict['vcenter_username'] = None

        # set to None if volcoll_creator_id (nullable) is None
        # and model_fields_set contains the field
        if self.volcoll_creator_id is None and "volcoll_creator_id" in self.model_fields_set:
            _dict['volcoll_creator_id'] = None

        # set to None if volcoll_creator_name (nullable) is None
        # and model_fields_set contains the field
        if self.volcoll_creator_name is None and "volcoll_creator_name" in self.model_fields_set:
            _dict['volcoll_creator_name'] = None

        # set to None if volume_count (nullable) is None
        # and model_fields_set contains the field
        if self.volume_count is None and "volume_count" in self.model_fields_set:
            _dict['volume_count'] = None

        # set to None if volume_list (nullable) is None
        # and model_fields_set contains the field
        if self.volume_list is None and "volume_list" in self.model_fields_set:
            _dict['volume_list'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleVCollectionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agent_hostname": obj.get("agent_hostname"),
            "app_sync": obj.get("app_sync"),
            "associated_links": [AssociatedLinksInner.from_dict(_item) for _item in obj["associated_links"]] if obj.get("associated_links") is not None else None,
            "cache_pinned_volume_list": [NimbleVolumeSummary.from_dict(_item) for _item in obj["cache_pinned_volume_list"]] if obj.get("cache_pinned_volume_list") is not None else None,
            "commonResourceAttributes": NimbleCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "creation_time": obj.get("creation_time"),
            "customerId": obj.get("customerId"),
            "description": obj.get("description"),
            "downstream_volume_list": [NimbleVolumeCollectionVolumePoolInfo.from_dict(_item) for _item in obj["downstream_volume_list"]] if obj.get("downstream_volume_list") is not None else None,
            "full_name": obj.get("full_name"),
            "generation": obj.get("generation"),
            "handover_replication_partner": obj.get("handover_replication_partner"),
            "is_handing_over": obj.get("is_handing_over"),
            "is_mfa_protected": obj.get("is_mfa_protected"),
            "is_standalone_volcoll": obj.get("is_standalone_volcoll"),
            "lag_time": obj.get("lag_time"),
            "last_replicated_snapcoll": NimbleSnapcollSummary.from_dict(obj["last_replicated_snapcoll"]) if obj.get("last_replicated_snapcoll") is not None else None,
            "last_snapcoll": NimbleSnapcollSummary.from_dict(obj["last_snapcoll"]) if obj.get("last_snapcoll") is not None else None,
            "metadata": [NimbleNsKeyValue.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "pol_owner_name": obj.get("pol_owner_name"),
            "protection_type": obj.get("protection_type"),
            "repl_bytes_transferred": obj.get("repl_bytes_transferred"),
            "repl_priority": obj.get("repl_priority"),
            "replication_partner": obj.get("replication_partner"),
            "resourceUri": obj.get("resourceUri"),
            "schedule_list": [NimbleNsSchedule.from_dict(_item) for _item in obj["schedule_list"]] if obj.get("schedule_list") is not None else None,
            "search_name": obj.get("search_name"),
            "snapcoll_count": obj.get("snapcoll_count"),
            "srep_last_sync": obj.get("srep_last_sync"),
            "srep_resync_percent": obj.get("srep_resync_percent"),
            "total_repl_bytes": obj.get("total_repl_bytes"),
            "type": obj.get("type"),
            "upstream_volume_list": [NimbleVolumeCollectionVolumePoolInfo.from_dict(_item) for _item in obj["upstream_volume_list"]] if obj.get("upstream_volume_list") is not None else None,
            "vcenter_hostname": obj.get("vcenter_hostname"),
            "vcenter_username": obj.get("vcenter_username"),
            "volcoll_creator_id": obj.get("volcoll_creator_id"),
            "volcoll_creator_name": obj.get("volcoll_creator_name"),
            "volume_count": obj.get("volume_count"),
            "volume_list": [NimbleVolumeSummary.from_dict(_item) for _item in obj["volume_list"]] if obj.get("volume_list") is not None else None
        })
        return _obj


