# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.snapshot_lun_info import SnapshotLunInfo
from typing import Optional, Set
from typing_extensions import Self

class AccessControlRecord(BaseModel):
    """
    AccessControlRecord
    """ # noqa: E501
    access_protocol: Optional[StrictStr] = Field(default=None, description="Access protocol of snapshot or volume. Possible values: 'iscsi', 'fc'.")
    acl_id: Optional[StrictStr] = Field(default=None, description="ID of access control record.")
    apply_to: Optional[StrictStr] = Field(default=None, description="State of apply to. Possible values: 'volume'. 'pe', 'vvol_volume', 'vvol_snapshot', 'snapshot', 'both'.")
    chap_user_id: Optional[StrictStr] = Field(default=None, description="ID of chap user.")
    chap_user_name: Optional[StrictStr] = Field(default=None, description="Name of chap user.")
    id: Optional[StrictStr] = Field(default=None, description="ID of access control record.")
    initiator_group_id: Optional[StrictStr] = Field(default=None, description="ID of initiator group.")
    initiator_group_name: Optional[StrictStr] = Field(default=None, description="Name of initiator group.")
    lun: Optional[StrictInt] = Field(default=None, description="LUN of snapshot or volume. Secondary LUN if this is Virtual Volume.")
    pe_id: Optional[StrictStr] = Field(default=None, description="ID of protocol endpoint.")
    pe_lun: Optional[StrictInt] = Field(default=None, description="LUN of protocol endpoint.")
    pe_name: Optional[StrictStr] = Field(default=None, description="Name of protocol endpoint.")
    snap_id: Optional[StrictStr] = Field(default=None, description="ID of snapshot.")
    snap_name: Optional[StrictStr] = Field(default=None, description="Name of snapshot.")
    snapluns: Optional[List[Optional[SnapshotLunInfo]]] = None
    vol_id: Optional[StrictStr] = Field(default=None, description="ID of volume.")
    vol_name: Optional[StrictStr] = Field(default=None, description="Name of volume.")
    __properties: ClassVar[List[str]] = ["access_protocol", "acl_id", "apply_to", "chap_user_id", "chap_user_name", "id", "initiator_group_id", "initiator_group_name", "lun", "pe_id", "pe_lun", "pe_name", "snap_id", "snap_name", "snapluns", "vol_id", "vol_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessControlRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in snapluns (list)
        _items = []
        if self.snapluns:
            for _item in self.snapluns:
                if _item:
                    _items.append(_item.to_dict())
            _dict['snapluns'] = _items
        # set to None if access_protocol (nullable) is None
        # and model_fields_set contains the field
        if self.access_protocol is None and "access_protocol" in self.model_fields_set:
            _dict['access_protocol'] = None

        # set to None if acl_id (nullable) is None
        # and model_fields_set contains the field
        if self.acl_id is None and "acl_id" in self.model_fields_set:
            _dict['acl_id'] = None

        # set to None if apply_to (nullable) is None
        # and model_fields_set contains the field
        if self.apply_to is None and "apply_to" in self.model_fields_set:
            _dict['apply_to'] = None

        # set to None if chap_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.chap_user_id is None and "chap_user_id" in self.model_fields_set:
            _dict['chap_user_id'] = None

        # set to None if chap_user_name (nullable) is None
        # and model_fields_set contains the field
        if self.chap_user_name is None and "chap_user_name" in self.model_fields_set:
            _dict['chap_user_name'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if initiator_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_group_id is None and "initiator_group_id" in self.model_fields_set:
            _dict['initiator_group_id'] = None

        # set to None if initiator_group_name (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_group_name is None and "initiator_group_name" in self.model_fields_set:
            _dict['initiator_group_name'] = None

        # set to None if lun (nullable) is None
        # and model_fields_set contains the field
        if self.lun is None and "lun" in self.model_fields_set:
            _dict['lun'] = None

        # set to None if pe_id (nullable) is None
        # and model_fields_set contains the field
        if self.pe_id is None and "pe_id" in self.model_fields_set:
            _dict['pe_id'] = None

        # set to None if pe_lun (nullable) is None
        # and model_fields_set contains the field
        if self.pe_lun is None and "pe_lun" in self.model_fields_set:
            _dict['pe_lun'] = None

        # set to None if pe_name (nullable) is None
        # and model_fields_set contains the field
        if self.pe_name is None and "pe_name" in self.model_fields_set:
            _dict['pe_name'] = None

        # set to None if snap_id (nullable) is None
        # and model_fields_set contains the field
        if self.snap_id is None and "snap_id" in self.model_fields_set:
            _dict['snap_id'] = None

        # set to None if snap_name (nullable) is None
        # and model_fields_set contains the field
        if self.snap_name is None and "snap_name" in self.model_fields_set:
            _dict['snap_name'] = None

        # set to None if snapluns (nullable) is None
        # and model_fields_set contains the field
        if self.snapluns is None and "snapluns" in self.model_fields_set:
            _dict['snapluns'] = None

        # set to None if vol_id (nullable) is None
        # and model_fields_set contains the field
        if self.vol_id is None and "vol_id" in self.model_fields_set:
            _dict['vol_id'] = None

        # set to None if vol_name (nullable) is None
        # and model_fields_set contains the field
        if self.vol_name is None and "vol_name" in self.model_fields_set:
            _dict['vol_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessControlRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_protocol": obj.get("access_protocol"),
            "acl_id": obj.get("acl_id"),
            "apply_to": obj.get("apply_to"),
            "chap_user_id": obj.get("chap_user_id"),
            "chap_user_name": obj.get("chap_user_name"),
            "id": obj.get("id"),
            "initiator_group_id": obj.get("initiator_group_id"),
            "initiator_group_name": obj.get("initiator_group_name"),
            "lun": obj.get("lun"),
            "pe_id": obj.get("pe_id"),
            "pe_lun": obj.get("pe_lun"),
            "pe_name": obj.get("pe_name"),
            "snap_id": obj.get("snap_id"),
            "snap_name": obj.get("snap_name"),
            "snapluns": [SnapshotLunInfo.from_dict(_item) for _item in obj["snapluns"]] if obj.get("snapluns") is not None else None,
            "vol_id": obj.get("vol_id"),
            "vol_name": obj.get("vol_name")
        })
        return _obj


