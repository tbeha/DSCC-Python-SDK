# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.ip_list_info import IpListInfo
from dscc.models.nimble_common_resource_attributes import NimbleCommonResourceAttributes
from dscc.models.nimble_fibre_channel_fabric_info import NimbleFibreChannelFabricInfo
from dscc.models.nimble_fibre_channel_link_info import NimbleFibreChannelLinkInfo
from typing import Optional, Set
from typing_extensions import Self

class NimblePortDetails(BaseModel):
    """
    NimblePortDetails
    """ # noqa: E501
    array_id: Optional[StrictStr] = Field(default=None, description="Identifier for the array. A 42 digit hexadecimal number.")
    array_name_or_serial: Optional[StrictStr] = Field(default=None, description="Name or serial number of array where the interface is hosted.")
    bus_location: Optional[StrictStr] = Field(default=None, description="PCI bus location of the HBA for this Fibre Channel port.")
    common_resource_attributes: Optional[NimbleCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    controller_id: Optional[StrictStr] = Field(default=None, description="Identifier of the controller where the interface is hosted. A 42 digit hexadecimal number.")
    controller_name: Optional[StrictStr] = Field(default=None, description="Name (A or B) of the controller where the interface is hosted. Plain string.")
    fabric_info: Optional[NimbleFibreChannelFabricInfo] = Field(default=None, description="Fibre Channel fabric information.")
    fc_port_id: Optional[StrictStr] = Field(default=None, description="ID of the port with which the interface is associated.")
    fc_port_name: Optional[StrictStr] = Field(default=None, description="Name of Fibre Channel port.")
    firmware_version: Optional[StrictStr] = Field(default=None, description="Version of the Fibre Channel firmware.")
    id: Optional[StrictStr] = Field(default=None, description="Identifier for the interface. A 42 digit hexadecimal number.")
    ip_list: Optional[IpListInfo] = Field(default=None, description="Information about the Fibre Channel link at which interface is operating.")
    is_present: Optional[StrictBool] = Field(default=None, description="Whether this interface is present on this controller. Possible values: true, false.")
    link_info: Optional[NimbleFibreChannelLinkInfo] = Field(default=None, description="Information about the Fibre Channel link at which interface is operating.")
    link_speed: Optional[StrictStr] = Field(default=None, description="Speed of the link. Possible values: link_speed_unknown, link_speed_10M, link_speed_100M, link_speed_1000M, link_speed_10000M.")
    link_status: Optional[StrictStr] = Field(default=None, description="Status of the link. Possible values: link_status_unknown, link_status_down, link_status_up.")
    logical_port_number: Optional[StrictInt] = Field(default=None, description="Logical port number for the Fibre Channel port.")
    mac: Optional[StrictStr] = Field(default=None, description="MAC address of the interface. Mac address of an interface.")
    max_link_speed: Optional[StrictStr] = Field(default=None, description="Maximum speed of the link. Possible values: link_speed_unknown, link_speed_10M, link_speed_100M, link_speed_1000M, link_speed_10000M.")
    mtu: Optional[StrictInt] = Field(default=None, description="MTU on the link.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the interface.")
    nic_type: Optional[StrictStr] = Field(default=None, description="Interface type. Possible values: nic_type_unknown, nic_type_tp, nic_type_sfp.")
    online: Optional[StrictBool] = Field(default=None, description="Identify whether the Fibre Channel interface is online.")
    orientation: Optional[StrictStr] = Field(default=None, description="Orientation of FC ports on a HBA. An orientation of 'right_to_left' indicates that ports are ordered as 3,2,1,0 on the slot. Possible values: 'left_to_right', 'right_to_left'.")
    partial_response_ok: Optional[StrictBool] = Field(default=None, description="Port response.")
    peerzone: Optional[StrictStr] = Field(default=None, description="Active peer zone for this Fibre Channel interface.")
    port: Optional[StrictInt] = Field(default=None, description="Port number for this interface.")
    slot: Optional[StrictInt] = Field(default=None, description="Slot number for this interface.")
    wwnn: Optional[StrictStr] = Field(default=None, description="World Wide Node Name for this Fibre Channel interface.")
    wwpn: Optional[StrictStr] = Field(default=None, description="World Wide Port Name for this Fibre Channel interface.")
    __properties: ClassVar[List[str]] = ["array_id", "array_name_or_serial", "bus_location", "commonResourceAttributes", "consoleUri", "controller_id", "controller_name", "fabric_info", "fc_port_id", "fc_port_name", "firmware_version", "id", "ip_list", "is_present", "link_info", "link_speed", "link_status", "logical_port_number", "mac", "max_link_speed", "mtu", "name", "nic_type", "online", "orientation", "partial_response_ok", "peerzone", "port", "slot", "wwnn", "wwpn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimblePortDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fabric_info
        if self.fabric_info:
            _dict['fabric_info'] = self.fabric_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ip_list
        if self.ip_list:
            _dict['ip_list'] = self.ip_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of link_info
        if self.link_info:
            _dict['link_info'] = self.link_info.to_dict()
        # set to None if array_id (nullable) is None
        # and model_fields_set contains the field
        if self.array_id is None and "array_id" in self.model_fields_set:
            _dict['array_id'] = None

        # set to None if array_name_or_serial (nullable) is None
        # and model_fields_set contains the field
        if self.array_name_or_serial is None and "array_name_or_serial" in self.model_fields_set:
            _dict['array_name_or_serial'] = None

        # set to None if bus_location (nullable) is None
        # and model_fields_set contains the field
        if self.bus_location is None and "bus_location" in self.model_fields_set:
            _dict['bus_location'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if controller_id (nullable) is None
        # and model_fields_set contains the field
        if self.controller_id is None and "controller_id" in self.model_fields_set:
            _dict['controller_id'] = None

        # set to None if controller_name (nullable) is None
        # and model_fields_set contains the field
        if self.controller_name is None and "controller_name" in self.model_fields_set:
            _dict['controller_name'] = None

        # set to None if fabric_info (nullable) is None
        # and model_fields_set contains the field
        if self.fabric_info is None and "fabric_info" in self.model_fields_set:
            _dict['fabric_info'] = None

        # set to None if fc_port_id (nullable) is None
        # and model_fields_set contains the field
        if self.fc_port_id is None and "fc_port_id" in self.model_fields_set:
            _dict['fc_port_id'] = None

        # set to None if fc_port_name (nullable) is None
        # and model_fields_set contains the field
        if self.fc_port_name is None and "fc_port_name" in self.model_fields_set:
            _dict['fc_port_name'] = None

        # set to None if firmware_version (nullable) is None
        # and model_fields_set contains the field
        if self.firmware_version is None and "firmware_version" in self.model_fields_set:
            _dict['firmware_version'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if ip_list (nullable) is None
        # and model_fields_set contains the field
        if self.ip_list is None and "ip_list" in self.model_fields_set:
            _dict['ip_list'] = None

        # set to None if is_present (nullable) is None
        # and model_fields_set contains the field
        if self.is_present is None and "is_present" in self.model_fields_set:
            _dict['is_present'] = None

        # set to None if link_info (nullable) is None
        # and model_fields_set contains the field
        if self.link_info is None and "link_info" in self.model_fields_set:
            _dict['link_info'] = None

        # set to None if link_speed (nullable) is None
        # and model_fields_set contains the field
        if self.link_speed is None and "link_speed" in self.model_fields_set:
            _dict['link_speed'] = None

        # set to None if link_status (nullable) is None
        # and model_fields_set contains the field
        if self.link_status is None and "link_status" in self.model_fields_set:
            _dict['link_status'] = None

        # set to None if logical_port_number (nullable) is None
        # and model_fields_set contains the field
        if self.logical_port_number is None and "logical_port_number" in self.model_fields_set:
            _dict['logical_port_number'] = None

        # set to None if mac (nullable) is None
        # and model_fields_set contains the field
        if self.mac is None and "mac" in self.model_fields_set:
            _dict['mac'] = None

        # set to None if max_link_speed (nullable) is None
        # and model_fields_set contains the field
        if self.max_link_speed is None and "max_link_speed" in self.model_fields_set:
            _dict['max_link_speed'] = None

        # set to None if mtu (nullable) is None
        # and model_fields_set contains the field
        if self.mtu is None and "mtu" in self.model_fields_set:
            _dict['mtu'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if nic_type (nullable) is None
        # and model_fields_set contains the field
        if self.nic_type is None and "nic_type" in self.model_fields_set:
            _dict['nic_type'] = None

        # set to None if online (nullable) is None
        # and model_fields_set contains the field
        if self.online is None and "online" in self.model_fields_set:
            _dict['online'] = None

        # set to None if orientation (nullable) is None
        # and model_fields_set contains the field
        if self.orientation is None and "orientation" in self.model_fields_set:
            _dict['orientation'] = None

        # set to None if partial_response_ok (nullable) is None
        # and model_fields_set contains the field
        if self.partial_response_ok is None and "partial_response_ok" in self.model_fields_set:
            _dict['partial_response_ok'] = None

        # set to None if peerzone (nullable) is None
        # and model_fields_set contains the field
        if self.peerzone is None and "peerzone" in self.model_fields_set:
            _dict['peerzone'] = None

        # set to None if port (nullable) is None
        # and model_fields_set contains the field
        if self.port is None and "port" in self.model_fields_set:
            _dict['port'] = None

        # set to None if slot (nullable) is None
        # and model_fields_set contains the field
        if self.slot is None and "slot" in self.model_fields_set:
            _dict['slot'] = None

        # set to None if wwnn (nullable) is None
        # and model_fields_set contains the field
        if self.wwnn is None and "wwnn" in self.model_fields_set:
            _dict['wwnn'] = None

        # set to None if wwpn (nullable) is None
        # and model_fields_set contains the field
        if self.wwpn is None and "wwpn" in self.model_fields_set:
            _dict['wwpn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimblePortDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "array_id": obj.get("array_id"),
            "array_name_or_serial": obj.get("array_name_or_serial"),
            "bus_location": obj.get("bus_location"),
            "commonResourceAttributes": NimbleCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "controller_id": obj.get("controller_id"),
            "controller_name": obj.get("controller_name"),
            "fabric_info": NimbleFibreChannelFabricInfo.from_dict(obj["fabric_info"]) if obj.get("fabric_info") is not None else None,
            "fc_port_id": obj.get("fc_port_id"),
            "fc_port_name": obj.get("fc_port_name"),
            "firmware_version": obj.get("firmware_version"),
            "id": obj.get("id"),
            "ip_list": IpListInfo.from_dict(obj["ip_list"]) if obj.get("ip_list") is not None else None,
            "is_present": obj.get("is_present"),
            "link_info": NimbleFibreChannelLinkInfo.from_dict(obj["link_info"]) if obj.get("link_info") is not None else None,
            "link_speed": obj.get("link_speed"),
            "link_status": obj.get("link_status"),
            "logical_port_number": obj.get("logical_port_number"),
            "mac": obj.get("mac"),
            "max_link_speed": obj.get("max_link_speed"),
            "mtu": obj.get("mtu"),
            "name": obj.get("name"),
            "nic_type": obj.get("nic_type"),
            "online": obj.get("online"),
            "orientation": obj.get("orientation"),
            "partial_response_ok": obj.get("partial_response_ok"),
            "peerzone": obj.get("peerzone"),
            "port": obj.get("port"),
            "slot": obj.get("slot"),
            "wwnn": obj.get("wwnn"),
            "wwpn": obj.get("wwpn")
        })
        return _obj


