# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.edit_alert_settings import EditAlertSettings
from dscc.models.edit_date_timezone_settings import EditDateTimezoneSettings
from dscc.models.edit_dns_settings import EditDnsSettings
from dscc.models.edit_isns_settings import EditIsnsSettings
from dscc.models.edit_proxy_settings import EditProxySettings
from dscc.models.edit_security_settings import EditSecuritySettings
from dscc.models.edit_smtp_mail_settings import EditSmtpMailSettings
from dscc.models.edit_snmp_settings import EditSnmpSettings
from dscc.models.edit_support_settings import EditSupportSettings
from dscc.models.edit_syslogd_settings import EditSyslogdSettings
from dscc.models.edit_system_parameters import EditSystemParameters
from dscc.models.encryption_settings import EncryptionSettings
from typing import Optional, Set
from typing_extensions import Self

class NimbleEditSystemSettings(BaseModel):
    """
    Edit Nimble system-settings input.
    """ # noqa: E501
    alert_settings: Optional[EditAlertSettings] = None
    date_timezone_settings: Optional[EditDateTimezoneSettings] = None
    dns_settings: Optional[EditDnsSettings] = None
    encryption_config: Optional[EncryptionSettings] = None
    isns_settings: Optional[EditIsnsSettings] = None
    name: Optional[StrictStr] = Field(default=None, description="Name of the group. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    proxy_settings: Optional[EditProxySettings] = None
    security_settings: Optional[EditSecuritySettings] = None
    smtp_settings: Optional[EditSmtpMailSettings] = None
    snmp_settings: Optional[EditSnmpSettings] = None
    support_settings: Optional[EditSupportSettings] = None
    syslogd_settings: Optional[EditSyslogdSettings] = None
    system_parameters: Optional[EditSystemParameters] = None
    __properties: ClassVar[List[str]] = ["alert_settings", "date_timezone_settings", "dns_settings", "encryption_config", "isns_settings", "name", "proxy_settings", "security_settings", "smtp_settings", "snmp_settings", "support_settings", "syslogd_settings", "system_parameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleEditSystemSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alert_settings
        if self.alert_settings:
            _dict['alert_settings'] = self.alert_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_timezone_settings
        if self.date_timezone_settings:
            _dict['date_timezone_settings'] = self.date_timezone_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dns_settings
        if self.dns_settings:
            _dict['dns_settings'] = self.dns_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryption_config'] = self.encryption_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of isns_settings
        if self.isns_settings:
            _dict['isns_settings'] = self.isns_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proxy_settings
        if self.proxy_settings:
            _dict['proxy_settings'] = self.proxy_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_settings
        if self.security_settings:
            _dict['security_settings'] = self.security_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of smtp_settings
        if self.smtp_settings:
            _dict['smtp_settings'] = self.smtp_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of snmp_settings
        if self.snmp_settings:
            _dict['snmp_settings'] = self.snmp_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of support_settings
        if self.support_settings:
            _dict['support_settings'] = self.support_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of syslogd_settings
        if self.syslogd_settings:
            _dict['syslogd_settings'] = self.syslogd_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system_parameters
        if self.system_parameters:
            _dict['system_parameters'] = self.system_parameters.to_dict()
        # set to None if alert_settings (nullable) is None
        # and model_fields_set contains the field
        if self.alert_settings is None and "alert_settings" in self.model_fields_set:
            _dict['alert_settings'] = None

        # set to None if date_timezone_settings (nullable) is None
        # and model_fields_set contains the field
        if self.date_timezone_settings is None and "date_timezone_settings" in self.model_fields_set:
            _dict['date_timezone_settings'] = None

        # set to None if dns_settings (nullable) is None
        # and model_fields_set contains the field
        if self.dns_settings is None and "dns_settings" in self.model_fields_set:
            _dict['dns_settings'] = None

        # set to None if encryption_config (nullable) is None
        # and model_fields_set contains the field
        if self.encryption_config is None and "encryption_config" in self.model_fields_set:
            _dict['encryption_config'] = None

        # set to None if isns_settings (nullable) is None
        # and model_fields_set contains the field
        if self.isns_settings is None and "isns_settings" in self.model_fields_set:
            _dict['isns_settings'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if proxy_settings (nullable) is None
        # and model_fields_set contains the field
        if self.proxy_settings is None and "proxy_settings" in self.model_fields_set:
            _dict['proxy_settings'] = None

        # set to None if security_settings (nullable) is None
        # and model_fields_set contains the field
        if self.security_settings is None and "security_settings" in self.model_fields_set:
            _dict['security_settings'] = None

        # set to None if smtp_settings (nullable) is None
        # and model_fields_set contains the field
        if self.smtp_settings is None and "smtp_settings" in self.model_fields_set:
            _dict['smtp_settings'] = None

        # set to None if snmp_settings (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_settings is None and "snmp_settings" in self.model_fields_set:
            _dict['snmp_settings'] = None

        # set to None if support_settings (nullable) is None
        # and model_fields_set contains the field
        if self.support_settings is None and "support_settings" in self.model_fields_set:
            _dict['support_settings'] = None

        # set to None if syslogd_settings (nullable) is None
        # and model_fields_set contains the field
        if self.syslogd_settings is None and "syslogd_settings" in self.model_fields_set:
            _dict['syslogd_settings'] = None

        # set to None if system_parameters (nullable) is None
        # and model_fields_set contains the field
        if self.system_parameters is None and "system_parameters" in self.model_fields_set:
            _dict['system_parameters'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleEditSystemSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alert_settings": EditAlertSettings.from_dict(obj["alert_settings"]) if obj.get("alert_settings") is not None else None,
            "date_timezone_settings": EditDateTimezoneSettings.from_dict(obj["date_timezone_settings"]) if obj.get("date_timezone_settings") is not None else None,
            "dns_settings": EditDnsSettings.from_dict(obj["dns_settings"]) if obj.get("dns_settings") is not None else None,
            "encryption_config": EncryptionSettings.from_dict(obj["encryption_config"]) if obj.get("encryption_config") is not None else None,
            "isns_settings": EditIsnsSettings.from_dict(obj["isns_settings"]) if obj.get("isns_settings") is not None else None,
            "name": obj.get("name"),
            "proxy_settings": EditProxySettings.from_dict(obj["proxy_settings"]) if obj.get("proxy_settings") is not None else None,
            "security_settings": EditSecuritySettings.from_dict(obj["security_settings"]) if obj.get("security_settings") is not None else None,
            "smtp_settings": EditSmtpMailSettings.from_dict(obj["smtp_settings"]) if obj.get("smtp_settings") is not None else None,
            "snmp_settings": EditSnmpSettings.from_dict(obj["snmp_settings"]) if obj.get("snmp_settings") is not None else None,
            "support_settings": EditSupportSettings.from_dict(obj["support_settings"]) if obj.get("support_settings") is not None else None,
            "syslogd_settings": EditSyslogdSettings.from_dict(obj["syslogd_settings"]) if obj.get("syslogd_settings") is not None else None,
            "system_parameters": EditSystemParameters.from_dict(obj["system_parameters"]) if obj.get("system_parameters") is not None else None
        })
        return _obj


