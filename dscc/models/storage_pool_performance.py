# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.nimble_common_resource_attributes import NimbleCommonResourceAttributes
from dscc.models.nimbleperf_data import NimbleperfData
from typing import Optional, Set
from typing_extensions import Self

class StoragePoolPerformance(BaseModel):
    """
    storage pool performance trends for given granularity and time range
    """ # noqa: E501
    common_resource_attributes: Optional[NimbleCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    iops: Optional[NimbleperfData] = None
    latency: Optional[NimbleperfData] = None
    request_uri: Optional[StrictStr] = Field(default=None, description="requestUri for detailed storage pool object", alias="requestURI")
    throughput: Optional[NimbleperfData] = None
    __properties: ClassVar[List[str]] = ["commonResourceAttributes", "iops", "latency", "requestURI", "throughput"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StoragePoolPerformance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iops
        if self.iops:
            _dict['iops'] = self.iops.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latency
        if self.latency:
            _dict['latency'] = self.latency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of throughput
        if self.throughput:
            _dict['throughput'] = self.throughput.to_dict()
        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if iops (nullable) is None
        # and model_fields_set contains the field
        if self.iops is None and "iops" in self.model_fields_set:
            _dict['iops'] = None

        # set to None if latency (nullable) is None
        # and model_fields_set contains the field
        if self.latency is None and "latency" in self.model_fields_set:
            _dict['latency'] = None

        # set to None if request_uri (nullable) is None
        # and model_fields_set contains the field
        if self.request_uri is None and "request_uri" in self.model_fields_set:
            _dict['requestURI'] = None

        # set to None if throughput (nullable) is None
        # and model_fields_set contains the field
        if self.throughput is None and "throughput" in self.model_fields_set:
            _dict['throughput'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StoragePoolPerformance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonResourceAttributes": NimbleCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "iops": NimbleperfData.from_dict(obj["iops"]) if obj.get("iops") is not None else None,
            "latency": NimbleperfData.from_dict(obj["latency"]) if obj.get("latency") is not None else None,
            "requestURI": obj.get("requestURI"),
            "throughput": NimbleperfData.from_dict(obj["throughput"]) if obj.get("throughput") is not None else None
        })
        return _obj


