# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.initiator_input import InitiatorInput
from typing import Optional, Set
from typing_extensions import Self

class CreateHostInput(BaseModel):
    """
    CreateHostInput
    """ # noqa: E501
    comment: Optional[StrictStr] = Field(default=None, description="Comment")
    contact: Optional[StrictStr] = Field(default=None, description="Contact information")
    fqdn: Optional[StrictStr] = Field(default=None, description="Fully qualified domain name of the host.")
    host_group_ids: Optional[List[StrictStr]] = Field(default=None, description="List of hostgroup IDs", alias="hostGroupIds")
    initiator_ids: Optional[List[StrictStr]] = Field(default=None, description="List of ids of existing initiators", alias="initiatorIds")
    initiators_to_create: Optional[List[Optional[InitiatorInput]]] = Field(default=None, description="List of initiators to be created and added to this host", alias="initiatorsToCreate")
    ip_address: Optional[StrictStr] = Field(default=None, description="IP address of the host.", alias="ipAddress")
    is_vvol_host: Optional[StrictBool] = Field(default=None, description="Set this value to true if you want to use this host to export the VASA vVOLs using NVMe protocol.", alias="isVvolHost")
    location: Optional[StrictStr] = Field(default=None, description="location.")
    model: Optional[StrictStr] = Field(default=None, description="Model")
    name: Optional[StrictStr] = Field(description="Name of the host.")
    operating_system: Optional[StrictStr] = Field(description="Host operating system. Possible Values are: - AIX - Apple - Citrix Hypervisor(XenServer) - HP-UX - IBM VIO Server - InForm - NetApp/ONTAP - OE Linux UEK - OpenVMS - Oracle VM x86 - RHE Linux - RHE Virtualization - Solaris - SuSE Linux - SuSE Virtualization - Ubuntu - VMware (ESXi) - Windows Server", alias="operatingSystem")
    persona: Optional[StrictStr] = Field(default=None, description="Host persona details.")
    protocol: Optional[StrictStr] = Field(default=None, description="protocol")
    subnet: Optional[StrictStr] = Field(default=None, description="subnet.")
    user_created: Optional[StrictBool] = Field(default=None, description="Indicates whether user created host or discovered host. value should always be set as \"true\". API will internally override the passed value to set it as \"true\".", alias="userCreated")
    __properties: ClassVar[List[str]] = ["comment", "contact", "fqdn", "hostGroupIds", "initiatorIds", "initiatorsToCreate", "ipAddress", "isVvolHost", "location", "model", "name", "operatingSystem", "persona", "protocol", "subnet", "userCreated"]

    @field_validator('operating_system')
    def operating_system_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AIX', 'Apple', 'Citrix Hypervisor(XenServer)', 'HP-UX', 'IBM VIO Server', 'InForm', 'NetApp/ONTAP', 'OE Linux UEK', 'OpenVMS', 'Oracle VM x86', 'RHE Linux', 'RHE Virtualization', 'Solaris', 'SuSE Linux', 'SuSE Virtualization', 'Ubuntu', 'VMware (ESXi)', 'Windows Server']):
            raise ValueError("must be one of enum values ('AIX', 'Apple', 'Citrix Hypervisor(XenServer)', 'HP-UX', 'IBM VIO Server', 'InForm', 'NetApp/ONTAP', 'OE Linux UEK', 'OpenVMS', 'Oracle VM x86', 'RHE Linux', 'RHE Virtualization', 'Solaris', 'SuSE Linux', 'SuSE Virtualization', 'Ubuntu', 'VMware (ESXi)', 'Windows Server')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateHostInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in initiators_to_create (list)
        _items = []
        if self.initiators_to_create:
            for _item in self.initiators_to_create:
                if _item:
                    _items.append(_item.to_dict())
            _dict['initiatorsToCreate'] = _items
        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if contact (nullable) is None
        # and model_fields_set contains the field
        if self.contact is None and "contact" in self.model_fields_set:
            _dict['contact'] = None

        # set to None if fqdn (nullable) is None
        # and model_fields_set contains the field
        if self.fqdn is None and "fqdn" in self.model_fields_set:
            _dict['fqdn'] = None

        # set to None if host_group_ids (nullable) is None
        # and model_fields_set contains the field
        if self.host_group_ids is None and "host_group_ids" in self.model_fields_set:
            _dict['hostGroupIds'] = None

        # set to None if initiator_ids (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_ids is None and "initiator_ids" in self.model_fields_set:
            _dict['initiatorIds'] = None

        # set to None if ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address is None and "ip_address" in self.model_fields_set:
            _dict['ipAddress'] = None

        # set to None if is_vvol_host (nullable) is None
        # and model_fields_set contains the field
        if self.is_vvol_host is None and "is_vvol_host" in self.model_fields_set:
            _dict['isVvolHost'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict['model'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if operating_system (nullable) is None
        # and model_fields_set contains the field
        if self.operating_system is None and "operating_system" in self.model_fields_set:
            _dict['operatingSystem'] = None

        # set to None if persona (nullable) is None
        # and model_fields_set contains the field
        if self.persona is None and "persona" in self.model_fields_set:
            _dict['persona'] = None

        # set to None if protocol (nullable) is None
        # and model_fields_set contains the field
        if self.protocol is None and "protocol" in self.model_fields_set:
            _dict['protocol'] = None

        # set to None if subnet (nullable) is None
        # and model_fields_set contains the field
        if self.subnet is None and "subnet" in self.model_fields_set:
            _dict['subnet'] = None

        # set to None if user_created (nullable) is None
        # and model_fields_set contains the field
        if self.user_created is None and "user_created" in self.model_fields_set:
            _dict['userCreated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateHostInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "contact": obj.get("contact"),
            "fqdn": obj.get("fqdn"),
            "hostGroupIds": obj.get("hostGroupIds"),
            "initiatorIds": obj.get("initiatorIds"),
            "initiatorsToCreate": [InitiatorInput.from_dict(_item) for _item in obj["initiatorsToCreate"]] if obj.get("initiatorsToCreate") is not None else None,
            "ipAddress": obj.get("ipAddress"),
            "isVvolHost": obj.get("isVvolHost"),
            "location": obj.get("location"),
            "model": obj.get("model"),
            "name": obj.get("name"),
            "operatingSystem": obj.get("operatingSystem"),
            "persona": obj.get("persona"),
            "protocol": obj.get("protocol"),
            "subnet": obj.get("subnet"),
            "userCreated": obj.get("userCreated")
        })
        return _obj


