# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.host_summary_for_initiator_object import HostSummaryForInitiatorObject
from dscc.models.sc_associated_links_inner import ScAssociatedLinksInner
from typing import Optional, Set
from typing_extensions import Self

class InitiatorDetails(BaseModel):
    """
    InitiatorDetails
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="Address of the initiator. ")
    associated_links: Optional[List[Optional[ScAssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    customer_id: Optional[StrictStr] = Field(default=None, description="The customer application identifier", alias="customerId")
    driver_version: Optional[StrictStr] = Field(default=None, description="Driver version of the host initiator.", alias="driverVersion")
    firmware_version: Optional[StrictStr] = Field(default=None, description="Firmware version of the host initiator.", alias="firmwareVersion")
    generation: Optional[StrictInt] = Field(default=None, description="A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.")
    hba_model: Optional[StrictStr] = Field(default=None, description="Host bus adaptor model of the host initiator", alias="hbaModel")
    host_speed: Optional[StrictInt] = Field(default=None, description="Host speed", alias="hostSpeed")
    hosts: Optional[List[Optional[HostSummaryForInitiatorObject]]] = Field(default=None, description="List of hosts. `Filter` by hostId.")
    id: Optional[StrictStr] = Field(default=None, description="Identifier for an initiator.")
    ip_address: Optional[StrictStr] = Field(default=None, description="IP address of the initiator.", alias="ipAddress")
    name: Optional[StrictStr] = Field(default=None, description="Name of the initiator.")
    protocol: Optional[StrictStr] = Field(default=None, description="protocol supported are : FC ,iSCSI or NVMe")
    request_uri: Optional[StrictStr] = Field(default=None, description="requestUri for initiators", alias="requestUri")
    systems: Optional[List[StrictStr]] = Field(default=None, description="system IDs to which the host initiator is linked to")
    type: Optional[StrictStr] = Field(default=None, description="The type of resource.")
    vendor: Optional[StrictStr] = Field(default=None, description="Vendor of the host initiator")
    __properties: ClassVar[List[str]] = ["address", "associatedLinks", "customerId", "driverVersion", "firmwareVersion", "generation", "hbaModel", "hostSpeed", "hosts", "id", "ipAddress", "name", "protocol", "requestUri", "systems", "type", "vendor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InitiatorDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hosts (list)
        _items = []
        if self.hosts:
            for _item in self.hosts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hosts'] = _items
        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if driver_version (nullable) is None
        # and model_fields_set contains the field
        if self.driver_version is None and "driver_version" in self.model_fields_set:
            _dict['driverVersion'] = None

        # set to None if firmware_version (nullable) is None
        # and model_fields_set contains the field
        if self.firmware_version is None and "firmware_version" in self.model_fields_set:
            _dict['firmwareVersion'] = None

        # set to None if hba_model (nullable) is None
        # and model_fields_set contains the field
        if self.hba_model is None and "hba_model" in self.model_fields_set:
            _dict['hbaModel'] = None

        # set to None if host_speed (nullable) is None
        # and model_fields_set contains the field
        if self.host_speed is None and "host_speed" in self.model_fields_set:
            _dict['hostSpeed'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address is None and "ip_address" in self.model_fields_set:
            _dict['ipAddress'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if protocol (nullable) is None
        # and model_fields_set contains the field
        if self.protocol is None and "protocol" in self.model_fields_set:
            _dict['protocol'] = None

        # set to None if request_uri (nullable) is None
        # and model_fields_set contains the field
        if self.request_uri is None and "request_uri" in self.model_fields_set:
            _dict['requestUri'] = None

        # set to None if systems (nullable) is None
        # and model_fields_set contains the field
        if self.systems is None and "systems" in self.model_fields_set:
            _dict['systems'] = None

        # set to None if vendor (nullable) is None
        # and model_fields_set contains the field
        if self.vendor is None and "vendor" in self.model_fields_set:
            _dict['vendor'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InitiatorDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "associatedLinks": [ScAssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "customerId": obj.get("customerId"),
            "driverVersion": obj.get("driverVersion"),
            "firmwareVersion": obj.get("firmwareVersion"),
            "generation": obj.get("generation"),
            "hbaModel": obj.get("hbaModel"),
            "hostSpeed": obj.get("hostSpeed"),
            "hosts": [HostSummaryForInitiatorObject.from_dict(_item) for _item in obj["hosts"]] if obj.get("hosts") is not None else None,
            "id": obj.get("id"),
            "ipAddress": obj.get("ipAddress"),
            "name": obj.get("name"),
            "protocol": obj.get("protocol"),
            "requestUri": obj.get("requestUri"),
            "systems": obj.get("systems"),
            "type": obj.get("type"),
            "vendor": obj.get("vendor")
        })
        return _obj


