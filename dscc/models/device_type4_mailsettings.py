# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.common_resource_attributes import CommonResourceAttributes
from dscc.models.device_type4friendly_certificate import DeviceType4friendlyCertificate
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4Mailsettings(BaseModel):
    """
    DeviceType4Mailsettings
    """ # noqa: E501
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    authentication_required: Optional[StrictStr] = Field(default=None, description="Authentication needed for SMTP settings,possible options are:enabled or disabled", alias="authenticationRequired")
    common_resource_attributes: Optional[CommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    customer_id: Optional[StrictStr] = Field(default=None, description="The customer application identifier", alias="customerId")
    friendly_cert: Optional[DeviceType4friendlyCertificate] = Field(default=None, alias="friendlyCert")
    generation: Optional[StrictInt] = Field(default=None, description="A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date. ")
    mail_host_domain: Optional[StrictStr] = Field(default=None, description="SMTP server's Host Domain", alias="mailHostDomain")
    mail_host_server: Optional[StrictStr] = Field(default=None, description="SMTP server address/IP", alias="mailHostServer")
    port: Optional[StrictInt] = Field(default=None, description="SMTP server's port number")
    request_uri: Optional[StrictStr] = Field(default=None, description="requestUri for mail settings", alias="requestUri")
    sender_email_id: Optional[StrictStr] = Field(default=None, description="Sender email address", alias="senderEmailId")
    type: Optional[StrictStr] = Field(default=None, description="The type of resource.")
    username: Optional[StrictStr] = Field(default=None, description="SMTP server's username authentication")
    __properties: ClassVar[List[str]] = ["associatedLinks", "authenticationRequired", "commonResourceAttributes", "consoleUri", "customerId", "friendlyCert", "generation", "mailHostDomain", "mailHostServer", "port", "requestUri", "senderEmailId", "type", "username"]

    @field_validator('port')
    def port_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([25, 465, 587, 2525]):
            raise ValueError("must be one of enum values (25, 465, 587, 2525)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4Mailsettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of friendly_cert
        if self.friendly_cert:
            _dict['friendlyCert'] = self.friendly_cert.to_dict()
        # set to None if authentication_required (nullable) is None
        # and model_fields_set contains the field
        if self.authentication_required is None and "authentication_required" in self.model_fields_set:
            _dict['authenticationRequired'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if friendly_cert (nullable) is None
        # and model_fields_set contains the field
        if self.friendly_cert is None and "friendly_cert" in self.model_fields_set:
            _dict['friendlyCert'] = None

        # set to None if mail_host_domain (nullable) is None
        # and model_fields_set contains the field
        if self.mail_host_domain is None and "mail_host_domain" in self.model_fields_set:
            _dict['mailHostDomain'] = None

        # set to None if mail_host_server (nullable) is None
        # and model_fields_set contains the field
        if self.mail_host_server is None and "mail_host_server" in self.model_fields_set:
            _dict['mailHostServer'] = None

        # set to None if port (nullable) is None
        # and model_fields_set contains the field
        if self.port is None and "port" in self.model_fields_set:
            _dict['port'] = None

        # set to None if request_uri (nullable) is None
        # and model_fields_set contains the field
        if self.request_uri is None and "request_uri" in self.model_fields_set:
            _dict['requestUri'] = None

        # set to None if sender_email_id (nullable) is None
        # and model_fields_set contains the field
        if self.sender_email_id is None and "sender_email_id" in self.model_fields_set:
            _dict['senderEmailId'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4Mailsettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedLinks": [AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "authenticationRequired": obj.get("authenticationRequired"),
            "commonResourceAttributes": CommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "customerId": obj.get("customerId"),
            "friendlyCert": DeviceType4friendlyCertificate.from_dict(obj["friendlyCert"]) if obj.get("friendlyCert") is not None else None,
            "generation": obj.get("generation"),
            "mailHostDomain": obj.get("mailHostDomain"),
            "mailHostServer": obj.get("mailHostServer"),
            "port": obj.get("port"),
            "requestUri": obj.get("requestUri"),
            "senderEmailId": obj.get("senderEmailId"),
            "type": obj.get("type"),
            "username": obj.get("username")
        })
        return _obj


