# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CreateAppSetQosConfigInput(BaseModel):
    """
    Create QoS Configuration Input
    """ # noqa: E501
    bandwidth_max_limit_ki_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The maximum bandwidth limit permitted for the volume set associated with this policy. The bandwidth maximum limit must be between 0 and 9,007,199,254,740,991 KB/s. Pass -1 to unset the parameter", alias="bandwidthMaxLimitKiB")
    enable: Optional[StrictBool] = Field(default=None, description="Enabling of QoS Configuration")
    iops_max_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The maximum IOPS limit permitted for the volume set associated with this policy. The IOPS maximum limit must be between 0 and 2,147,483,647 IO/s. Pass -1 to unset the parameter", alias="iopsMaxLimit")
    __properties: ClassVar[List[str]] = ["bandwidthMaxLimitKiB", "enable", "iopsMaxLimit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAppSetQosConfigInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if bandwidth_max_limit_ki_b (nullable) is None
        # and model_fields_set contains the field
        if self.bandwidth_max_limit_ki_b is None and "bandwidth_max_limit_ki_b" in self.model_fields_set:
            _dict['bandwidthMaxLimitKiB'] = None

        # set to None if enable (nullable) is None
        # and model_fields_set contains the field
        if self.enable is None and "enable" in self.model_fields_set:
            _dict['enable'] = None

        # set to None if iops_max_limit (nullable) is None
        # and model_fields_set contains the field
        if self.iops_max_limit is None and "iops_max_limit" in self.model_fields_set:
            _dict['iopsMaxLimit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAppSetQosConfigInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bandwidthMaxLimitKiB": obj.get("bandwidthMaxLimitKiB"),
            "enable": obj.get("enable"),
            "iopsMaxLimit": obj.get("iopsMaxLimit")
        })
        return _obj


