# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.audit_resource import AuditResource
from typing import Optional, Set
from typing_extensions import Self

class AuditData(BaseModel):
    """
    AuditData
    """ # noqa: E501
    associated_resource: Optional[AuditResource] = Field(default=None, alias="associatedResource")
    code: Optional[StrictStr] = Field(default=None, description="Unique code that describes the type of audit event that occurred")
    context_id: Optional[StrictStr] = Field(default=None, description="Unique id used to track a request across services", alias="contextId")
    customer_id: Optional[StrictStr] = Field(default=None, description="Application Customer ID associated with this event", alias="customerId")
    id: StrictStr = Field(description="Required: Unique ID for this audit event message, for example a GUID")
    message: StrictStr = Field(description="Required: Human readable message string that describes the action that occurred")
    occurred_at: StrictStr = Field(description="Required: UTC timestamp when the event occurred", alias="occurredAt")
    permission: Optional[StrictStr] = Field(default=None, description="Which privilege was used to grant/deny the action. E.g. controller.edit.")
    scope: Optional[StrictStr] = Field(default=None, description="Provides additional limits on the authorization of the request.")
    source: Optional[StrictStr] = Field(default=None, description="Which service/device is responsible for sending this event")
    source_ip_address: Optional[StrictStr] = Field(default=None, description="IP address from where the request originated", alias="sourceIpAddress")
    state: StrictStr = Field(description="Required: Enum that identifies whether the action was successful or not: Success, Failure, PermissionDenied, Initiated")
    task_id: Optional[StrictStr] = Field(default=None, description="Identifier linking asynchronous operations allowing initiation and completion of operations to be linked", alias="taskId")
    unique_id: Optional[StrictStr] = Field(default=None, description="Unique identifier generated internally", alias="uniqueId")
    user_email: Optional[StrictStr] = Field(default=None, description="User who is associated with this event", alias="userEmail")
    version: StrictInt = Field(description="Required: Version of the event structure, allowing for changes in the future")
    __properties: ClassVar[List[str]] = ["associatedResource", "code", "contextId", "customerId", "id", "message", "occurredAt", "permission", "scope", "source", "sourceIpAddress", "state", "taskId", "uniqueId", "userEmail", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuditData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of associated_resource
        if self.associated_resource:
            _dict['associatedResource'] = self.associated_resource.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuditData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedResource": AuditResource.from_dict(obj["associatedResource"]) if obj.get("associatedResource") is not None else None,
            "code": obj.get("code"),
            "contextId": obj.get("contextId"),
            "customerId": obj.get("customerId"),
            "id": obj.get("id"),
            "message": obj.get("message"),
            "occurredAt": obj.get("occurredAt"),
            "permission": obj.get("permission"),
            "scope": obj.get("scope"),
            "source": obj.get("source"),
            "sourceIpAddress": obj.get("sourceIpAddress"),
            "state": obj.get("state"),
            "taskId": obj.get("taskId"),
            "uniqueId": obj.get("uniqueId"),
            "userEmail": obj.get("userEmail"),
            "version": obj.get("version")
        })
        return _obj


