# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.common_resource_attributes import CommonResourceAttributes
from dscc.models.device_type4_element_status_code import DeviceType4ElementStatusCode
from dscc.models.device_type4enclosure_connectors_list_node_port import DeviceType4enclosureConnectorsListNodePort
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4enclosureConnectorsList(BaseModel):
    """
    DeviceType4enclosureConnectorsList
    """ # noqa: E501
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    common_resource_attributes: Optional[CommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    connector: Optional[StrictInt] = Field(default=None, description="Connector on slot on IOM in Cage for connection")
    current_speed: Optional[StrictStr] = Field(default=None, description="Current speed of connection", alias="currentSpeed")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    disabled: Optional[StrictStr] = Field(default=None, description="Disabled for connection")
    displayname: Optional[StrictStr] = Field(default=None, description="Name to be used for display purposes")
    domain: Optional[StrictStr] = Field(default=None, description="Domain that the resource belongs to")
    element_status_code: Optional[DeviceType4ElementStatusCode] = Field(default=None, alias="elementStatusCode")
    enclosure_card_id: Optional[StrictInt] = Field(default=None, description="ID of the enclosure card", alias="enclosureCardId")
    enclosure_card_pci_uid: Optional[StrictStr] = Field(default=None, description="UID of the enclosure card PCI card", alias="enclosureCardPCIUid")
    enclosure_card_uid: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the enclosure card", alias="enclosureCardUid")
    enclosure_id: Optional[StrictInt] = Field(default=None, description="ID of the enclosure", alias="enclosureId")
    enclosure_name: Optional[StrictStr] = Field(default=None, description="Name of the enclosure. `Filter, Sort`", alias="enclosureName")
    enclosure_uid: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the enclosure", alias="enclosureUid")
    generation: Optional[StrictInt] = Field(default=None, description="generation `Filter, Sort`")
    id: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the resource. `Filter`")
    ipv4_address: Optional[StrictStr] = Field(default=None, description="ip v4 address of connection", alias="ipv4Address")
    ipv6_address: Optional[StrictStr] = Field(default=None, description="ip v6 address of connection", alias="ipv6Address")
    label: Optional[StrictStr] = Field(default=None, description="Connection label")
    link_speed: Optional[StrictStr] = Field(default=None, description="Link speed for connection", alias="linkSpeed")
    locate: Optional[StrictStr] = Field(default=None, description="Locate for connection")
    mac_address: Optional[StrictStr] = Field(default=None, description="mac address of connection", alias="macAddress")
    node_port: Optional[DeviceType4enclosureConnectorsListNodePort] = Field(default=None, alias="nodePort")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed enclosure connector object", alias="resourceUri")
    slot: Optional[StrictInt] = Field(default=None, description="Slot on IOM in Cage for connection")
    system_id: Optional[StrictStr] = Field(default=None, description="Id of the array", alias="systemId")
    type: Optional[StrictStr] = Field(default=None, description="Resource Type for the enclosure connector")
    type_connection: Optional[StrictStr] = Field(default=None, description="Type of connection", alias="typeConnection")
    __properties: ClassVar[List[str]] = ["associatedLinks", "commonResourceAttributes", "connector", "currentSpeed", "customerId", "disabled", "displayname", "domain", "elementStatusCode", "enclosureCardId", "enclosureCardPCIUid", "enclosureCardUid", "enclosureId", "enclosureName", "enclosureUid", "generation", "id", "ipv4Address", "ipv6Address", "label", "linkSpeed", "locate", "macAddress", "nodePort", "resourceUri", "slot", "systemId", "type", "typeConnection"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4enclosureConnectorsList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of element_status_code
        if self.element_status_code:
            _dict['elementStatusCode'] = self.element_status_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_port
        if self.node_port:
            _dict['nodePort'] = self.node_port.to_dict()
        # set to None if associated_links (nullable) is None
        # and model_fields_set contains the field
        if self.associated_links is None and "associated_links" in self.model_fields_set:
            _dict['associatedLinks'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if connector (nullable) is None
        # and model_fields_set contains the field
        if self.connector is None and "connector" in self.model_fields_set:
            _dict['connector'] = None

        # set to None if current_speed (nullable) is None
        # and model_fields_set contains the field
        if self.current_speed is None and "current_speed" in self.model_fields_set:
            _dict['currentSpeed'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if disabled (nullable) is None
        # and model_fields_set contains the field
        if self.disabled is None and "disabled" in self.model_fields_set:
            _dict['disabled'] = None

        # set to None if displayname (nullable) is None
        # and model_fields_set contains the field
        if self.displayname is None and "displayname" in self.model_fields_set:
            _dict['displayname'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if element_status_code (nullable) is None
        # and model_fields_set contains the field
        if self.element_status_code is None and "element_status_code" in self.model_fields_set:
            _dict['elementStatusCode'] = None

        # set to None if enclosure_card_id (nullable) is None
        # and model_fields_set contains the field
        if self.enclosure_card_id is None and "enclosure_card_id" in self.model_fields_set:
            _dict['enclosureCardId'] = None

        # set to None if enclosure_card_pci_uid (nullable) is None
        # and model_fields_set contains the field
        if self.enclosure_card_pci_uid is None and "enclosure_card_pci_uid" in self.model_fields_set:
            _dict['enclosureCardPCIUid'] = None

        # set to None if enclosure_card_uid (nullable) is None
        # and model_fields_set contains the field
        if self.enclosure_card_uid is None and "enclosure_card_uid" in self.model_fields_set:
            _dict['enclosureCardUid'] = None

        # set to None if enclosure_id (nullable) is None
        # and model_fields_set contains the field
        if self.enclosure_id is None and "enclosure_id" in self.model_fields_set:
            _dict['enclosureId'] = None

        # set to None if enclosure_name (nullable) is None
        # and model_fields_set contains the field
        if self.enclosure_name is None and "enclosure_name" in self.model_fields_set:
            _dict['enclosureName'] = None

        # set to None if enclosure_uid (nullable) is None
        # and model_fields_set contains the field
        if self.enclosure_uid is None and "enclosure_uid" in self.model_fields_set:
            _dict['enclosureUid'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if ipv4_address (nullable) is None
        # and model_fields_set contains the field
        if self.ipv4_address is None and "ipv4_address" in self.model_fields_set:
            _dict['ipv4Address'] = None

        # set to None if ipv6_address (nullable) is None
        # and model_fields_set contains the field
        if self.ipv6_address is None and "ipv6_address" in self.model_fields_set:
            _dict['ipv6Address'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if link_speed (nullable) is None
        # and model_fields_set contains the field
        if self.link_speed is None and "link_speed" in self.model_fields_set:
            _dict['linkSpeed'] = None

        # set to None if locate (nullable) is None
        # and model_fields_set contains the field
        if self.locate is None and "locate" in self.model_fields_set:
            _dict['locate'] = None

        # set to None if mac_address (nullable) is None
        # and model_fields_set contains the field
        if self.mac_address is None and "mac_address" in self.model_fields_set:
            _dict['macAddress'] = None

        # set to None if node_port (nullable) is None
        # and model_fields_set contains the field
        if self.node_port is None and "node_port" in self.model_fields_set:
            _dict['nodePort'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if slot (nullable) is None
        # and model_fields_set contains the field
        if self.slot is None and "slot" in self.model_fields_set:
            _dict['slot'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if type_connection (nullable) is None
        # and model_fields_set contains the field
        if self.type_connection is None and "type_connection" in self.model_fields_set:
            _dict['typeConnection'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4enclosureConnectorsList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedLinks": [AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "commonResourceAttributes": CommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "connector": obj.get("connector"),
            "currentSpeed": obj.get("currentSpeed"),
            "customerId": obj.get("customerId"),
            "disabled": obj.get("disabled"),
            "displayname": obj.get("displayname"),
            "domain": obj.get("domain"),
            "elementStatusCode": DeviceType4ElementStatusCode.from_dict(obj["elementStatusCode"]) if obj.get("elementStatusCode") is not None else None,
            "enclosureCardId": obj.get("enclosureCardId"),
            "enclosureCardPCIUid": obj.get("enclosureCardPCIUid"),
            "enclosureCardUid": obj.get("enclosureCardUid"),
            "enclosureId": obj.get("enclosureId"),
            "enclosureName": obj.get("enclosureName"),
            "enclosureUid": obj.get("enclosureUid"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "ipv4Address": obj.get("ipv4Address"),
            "ipv6Address": obj.get("ipv6Address"),
            "label": obj.get("label"),
            "linkSpeed": obj.get("linkSpeed"),
            "locate": obj.get("locate"),
            "macAddress": obj.get("macAddress"),
            "nodePort": DeviceType4enclosureConnectorsListNodePort.from_dict(obj["nodePort"]) if obj.get("nodePort") is not None else None,
            "resourceUri": obj.get("resourceUri"),
            "slot": obj.get("slot"),
            "systemId": obj.get("systemId"),
            "type": obj.get("type"),
            "typeConnection": obj.get("typeConnection")
        })
        return _obj


