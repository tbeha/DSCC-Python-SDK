# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dscc.models.common_resource_attributes import CommonResourceAttributes
from dscc.models.device_type4_snapshotset_list_single_creation_time import DeviceType4SnapshotsetListSingleCreationTime
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4snapshotsetsList(BaseModel):
    """
    DeviceType4snapshotsetsList
    """ # noqa: E501
    app_set_business_unit: Optional[StrictStr] = Field(default=None, description="Appset BusinessUnit", alias="appSetBusinessUnit")
    app_set_comments: Optional[StrictStr] = Field(default=None, description="Application set comments", alias="appSetComments")
    app_set_exclude_aiqo_s: Optional[StrictStr] = Field(default=None, description="Exclusion from AI QoS", alias="appSetExcludeAIQoS")
    app_set_importance: Optional[StrictStr] = Field(default=None, description="Importance Level", alias="appSetImportance")
    app_set_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Application set name", alias="appSetName")
    app_set_type: Optional[StrictStr] = Field(default=None, description="Type of the snapshotset", alias="appSetType")
    comment: Optional[StrictStr] = Field(default=None, description="Comments if any")
    common_resource_attributes: Optional[CommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    creation_time: Optional[DeviceType4SnapshotsetListSingleCreationTime] = Field(default=None, alias="creationTime")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    display_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Display Name", alias="displayName")
    domain: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Domain name")
    export_status: Optional[StrictStr] = Field(default=None, description="Export status", alias="exportStatus")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    id: Optional[StrictStr] = Field(default=None, description="uid of the snapshotset. `Filter`")
    kv_pairs_present: Optional[StrictBool] = Field(default=None, description="Represents KV pairs present or not", alias="kvPairsPresent")
    members: Optional[List[Optional[StrictStr]]] = Field(default=None, description="Volume Names")
    name: Optional[StrictStr] = Field(default=None, description="Name of the snapshotset. `Filter, Sort`")
    request_uri: Optional[StrictStr] = Field(default=None, description="RequestUri for snapshotsets resources", alias="requestUri")
    serial_number: Optional[StrictStr] = Field(default=None, description="Serial number.", alias="serialNumber")
    snap_set_id: Optional[StrictInt] = Field(default=None, description="ID", alias="snapSetId")
    snap_set_parent_id: Optional[StrictInt] = Field(default=None, description="ParentId of the snapSet", alias="snapSetParentId")
    snap_set_parent_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Parent name of the snapSet", alias="snapSetParentName")
    system_id: Optional[StrictStr] = Field(default=None, description="SystemUid/serialNumber of the array.", alias="systemId")
    type: Optional[StrictStr] = Field(default=None, description="type")
    vv_set_type: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Type of the volume-set", alias="vvSetType")
    __properties: ClassVar[List[str]] = ["appSetBusinessUnit", "appSetComments", "appSetExcludeAIQoS", "appSetImportance", "appSetName", "appSetType", "comment", "commonResourceAttributes", "creationTime", "customerId", "displayName", "domain", "exportStatus", "generation", "id", "kvPairsPresent", "members", "name", "requestUri", "serialNumber", "snapSetId", "snapSetParentId", "snapSetParentName", "systemId", "type", "vvSetType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4snapshotsetsList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creation_time
        if self.creation_time:
            _dict['creationTime'] = self.creation_time.to_dict()
        # set to None if app_set_business_unit (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_business_unit is None and "app_set_business_unit" in self.model_fields_set:
            _dict['appSetBusinessUnit'] = None

        # set to None if app_set_comments (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_comments is None and "app_set_comments" in self.model_fields_set:
            _dict['appSetComments'] = None

        # set to None if app_set_exclude_aiqo_s (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_exclude_aiqo_s is None and "app_set_exclude_aiqo_s" in self.model_fields_set:
            _dict['appSetExcludeAIQoS'] = None

        # set to None if app_set_importance (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_importance is None and "app_set_importance" in self.model_fields_set:
            _dict['appSetImportance'] = None

        # set to None if app_set_name (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_name is None and "app_set_name" in self.model_fields_set:
            _dict['appSetName'] = None

        # set to None if app_set_type (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_type is None and "app_set_type" in self.model_fields_set:
            _dict['appSetType'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if creation_time (nullable) is None
        # and model_fields_set contains the field
        if self.creation_time is None and "creation_time" in self.model_fields_set:
            _dict['creationTime'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if export_status (nullable) is None
        # and model_fields_set contains the field
        if self.export_status is None and "export_status" in self.model_fields_set:
            _dict['exportStatus'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if members (nullable) is None
        # and model_fields_set contains the field
        if self.members is None and "members" in self.model_fields_set:
            _dict['members'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if request_uri (nullable) is None
        # and model_fields_set contains the field
        if self.request_uri is None and "request_uri" in self.model_fields_set:
            _dict['requestUri'] = None

        # set to None if serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.serial_number is None and "serial_number" in self.model_fields_set:
            _dict['serialNumber'] = None

        # set to None if snap_set_id (nullable) is None
        # and model_fields_set contains the field
        if self.snap_set_id is None and "snap_set_id" in self.model_fields_set:
            _dict['snapSetId'] = None

        # set to None if snap_set_parent_id (nullable) is None
        # and model_fields_set contains the field
        if self.snap_set_parent_id is None and "snap_set_parent_id" in self.model_fields_set:
            _dict['snapSetParentId'] = None

        # set to None if snap_set_parent_name (nullable) is None
        # and model_fields_set contains the field
        if self.snap_set_parent_name is None and "snap_set_parent_name" in self.model_fields_set:
            _dict['snapSetParentName'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if vv_set_type (nullable) is None
        # and model_fields_set contains the field
        if self.vv_set_type is None and "vv_set_type" in self.model_fields_set:
            _dict['vvSetType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4snapshotsetsList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appSetBusinessUnit": obj.get("appSetBusinessUnit"),
            "appSetComments": obj.get("appSetComments"),
            "appSetExcludeAIQoS": obj.get("appSetExcludeAIQoS"),
            "appSetImportance": obj.get("appSetImportance"),
            "appSetName": obj.get("appSetName"),
            "appSetType": obj.get("appSetType"),
            "comment": obj.get("comment"),
            "commonResourceAttributes": CommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "creationTime": DeviceType4SnapshotsetListSingleCreationTime.from_dict(obj["creationTime"]) if obj.get("creationTime") is not None else None,
            "customerId": obj.get("customerId"),
            "displayName": obj.get("displayName"),
            "domain": obj.get("domain"),
            "exportStatus": obj.get("exportStatus"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "kvPairsPresent": obj.get("kvPairsPresent"),
            "members": obj.get("members"),
            "name": obj.get("name"),
            "requestUri": obj.get("requestUri"),
            "serialNumber": obj.get("serialNumber"),
            "snapSetId": obj.get("snapSetId"),
            "snapSetParentId": obj.get("snapSetParentId"),
            "snapSetParentName": obj.get("snapSetParentName"),
            "systemId": obj.get("systemId"),
            "type": obj.get("type"),
            "vvSetType": obj.get("vvSetType")
        })
        return _obj


