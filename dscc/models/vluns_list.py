# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.device_type4_vluns_list_single_initiators import DeviceType4VlunsListSingleInitiators
from dscc.models.device_type4_vluns_list_single_state import DeviceType4VlunsListSingleState
from dscc.models.device_type4vluns_list_port_pos import DeviceType4vlunsListPortPos
from dscc.models.primera_common_resource_attributes import PrimeraCommonResourceAttributes
from typing import Optional, Set
from typing_extensions import Self

class VlunsList(BaseModel):
    """
    VlunsList
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="Indicates if this is an active VLUN or a template")
    common_resource_attributes: Optional[PrimeraCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    device_wwns: Optional[StrictStr] = Field(default=None, description="Device WWNs", alias="deviceWWNs")
    disk_partition: Optional[StrictStr] = Field(default=None, description="Disk partition of host", alias="diskPartition")
    displayname: Optional[StrictStr] = Field(default=None, description="SED state")
    domain: Optional[StrictStr] = Field(default=None, description="SED state")
    failed_path_interval: Optional[StrictInt] = Field(default=None, description="Monitoring interval in seconds after which the host checks for failed paths", alias="failedPathInterval")
    failed_path_policy: Optional[StrictStr] = Field(default=None, description="Failed path monitoring method", alias="failedPathPolicy")
    generation: Optional[StrictInt] = Field(default=None, description="generation `Filter, Sort`")
    id: Optional[StrictStr] = Field(default=None, description="uid of the vlun `Filter`")
    initiators: Optional[DeviceType4VlunsListSingleInitiators] = None
    lun: Optional[StrictInt] = Field(default=None, description="Exported LUN ID `Filter, Sort`")
    mount_point: Optional[StrictStr] = Field(default=None, description="Mount points of devices", alias="mountPoint")
    mount_point_fsau: Optional[StrictInt] = Field(default=None, description="File system allocation unit in MiB", alias="mountPointFsau")
    multi_path_type: Optional[StrictStr] = Field(default=None, description="Multi-path method in use", alias="multiPathType")
    port_pos: Optional[DeviceType4vlunsListPortPos] = Field(default=None, alias="portPos")
    raw_volume: Optional[StrictStr] = Field(default=None, description="Volume that has not been formatted. Yes if it supports", alias="rawVolume")
    remote_name: Optional[StrictStr] = Field(default=None, description="Host WWN, iSCSI name, or SAS address; depending on port type", alias="remoteName")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed vlun object", alias="resourceUri")
    state: Optional[DeviceType4VlunsListSingleState] = None
    status: Optional[StrictStr] = Field(default=None, description="SED state")
    system_id: Optional[StrictStr] = Field(default=None, description="System Uid `Filter, Sort`", alias="systemId")
    tpg_id: Optional[StrictInt] = Field(default=None, description="SED state", alias="tpgId")
    type: Optional[StrictStr] = Field(default=None, description="type")
    used_space: Optional[StrictInt] = Field(default=None, description="Host devices used space in MiB", alias="usedSpace")
    vlun_type: Optional[StrictStr] = Field(default=None, description="VLUN type", alias="vlunType")
    volume_group: Optional[StrictStr] = Field(default=None, description="Volume group info", alias="volumeGroup")
    volume_manager: Optional[StrictStr] = Field(default=None, description="Volume Manager tool used", alias="volumeManager")
    volume_name: Optional[StrictStr] = Field(default=None, description="Name of exported virtual volume or volume set name `Filter, Sort`", alias="volumeName")
    volume_wwn: Optional[StrictStr] = Field(default=None, description="WWN of exported volume.If a volume set is exported, then this value is null. `Filter, Sort`", alias="volumeWWN")
    vv_reserved_user_space: Optional[StrictInt] = Field(default=None, description="Volume user reserved space in MiB", alias="vvReservedUserSpace")
    vv_size: Optional[StrictInt] = Field(default=None, description="Size of volume in MiB", alias="vvSize")
    __properties: ClassVar[List[str]] = ["active", "commonResourceAttributes", "customerId", "deviceWWNs", "diskPartition", "displayname", "domain", "failedPathInterval", "failedPathPolicy", "generation", "id", "initiators", "lun", "mountPoint", "mountPointFsau", "multiPathType", "portPos", "rawVolume", "remoteName", "resourceUri", "state", "status", "systemId", "tpgId", "type", "usedSpace", "vlunType", "volumeGroup", "volumeManager", "volumeName", "volumeWWN", "vvReservedUserSpace", "vvSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VlunsList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initiators
        if self.initiators:
            _dict['initiators'] = self.initiators.to_dict()
        # override the default output from pydantic by calling `to_dict()` of port_pos
        if self.port_pos:
            _dict['portPos'] = self.port_pos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # set to None if active (nullable) is None
        # and model_fields_set contains the field
        if self.active is None and "active" in self.model_fields_set:
            _dict['active'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if device_wwns (nullable) is None
        # and model_fields_set contains the field
        if self.device_wwns is None and "device_wwns" in self.model_fields_set:
            _dict['deviceWWNs'] = None

        # set to None if disk_partition (nullable) is None
        # and model_fields_set contains the field
        if self.disk_partition is None and "disk_partition" in self.model_fields_set:
            _dict['diskPartition'] = None

        # set to None if displayname (nullable) is None
        # and model_fields_set contains the field
        if self.displayname is None and "displayname" in self.model_fields_set:
            _dict['displayname'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if failed_path_interval (nullable) is None
        # and model_fields_set contains the field
        if self.failed_path_interval is None and "failed_path_interval" in self.model_fields_set:
            _dict['failedPathInterval'] = None

        # set to None if failed_path_policy (nullable) is None
        # and model_fields_set contains the field
        if self.failed_path_policy is None and "failed_path_policy" in self.model_fields_set:
            _dict['failedPathPolicy'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if initiators (nullable) is None
        # and model_fields_set contains the field
        if self.initiators is None and "initiators" in self.model_fields_set:
            _dict['initiators'] = None

        # set to None if lun (nullable) is None
        # and model_fields_set contains the field
        if self.lun is None and "lun" in self.model_fields_set:
            _dict['lun'] = None

        # set to None if mount_point (nullable) is None
        # and model_fields_set contains the field
        if self.mount_point is None and "mount_point" in self.model_fields_set:
            _dict['mountPoint'] = None

        # set to None if mount_point_fsau (nullable) is None
        # and model_fields_set contains the field
        if self.mount_point_fsau is None and "mount_point_fsau" in self.model_fields_set:
            _dict['mountPointFsau'] = None

        # set to None if multi_path_type (nullable) is None
        # and model_fields_set contains the field
        if self.multi_path_type is None and "multi_path_type" in self.model_fields_set:
            _dict['multiPathType'] = None

        # set to None if port_pos (nullable) is None
        # and model_fields_set contains the field
        if self.port_pos is None and "port_pos" in self.model_fields_set:
            _dict['portPos'] = None

        # set to None if raw_volume (nullable) is None
        # and model_fields_set contains the field
        if self.raw_volume is None and "raw_volume" in self.model_fields_set:
            _dict['rawVolume'] = None

        # set to None if remote_name (nullable) is None
        # and model_fields_set contains the field
        if self.remote_name is None and "remote_name" in self.model_fields_set:
            _dict['remoteName'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if tpg_id (nullable) is None
        # and model_fields_set contains the field
        if self.tpg_id is None and "tpg_id" in self.model_fields_set:
            _dict['tpgId'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if used_space (nullable) is None
        # and model_fields_set contains the field
        if self.used_space is None and "used_space" in self.model_fields_set:
            _dict['usedSpace'] = None

        # set to None if vlun_type (nullable) is None
        # and model_fields_set contains the field
        if self.vlun_type is None and "vlun_type" in self.model_fields_set:
            _dict['vlunType'] = None

        # set to None if volume_group (nullable) is None
        # and model_fields_set contains the field
        if self.volume_group is None and "volume_group" in self.model_fields_set:
            _dict['volumeGroup'] = None

        # set to None if volume_manager (nullable) is None
        # and model_fields_set contains the field
        if self.volume_manager is None and "volume_manager" in self.model_fields_set:
            _dict['volumeManager'] = None

        # set to None if volume_name (nullable) is None
        # and model_fields_set contains the field
        if self.volume_name is None and "volume_name" in self.model_fields_set:
            _dict['volumeName'] = None

        # set to None if volume_wwn (nullable) is None
        # and model_fields_set contains the field
        if self.volume_wwn is None and "volume_wwn" in self.model_fields_set:
            _dict['volumeWWN'] = None

        # set to None if vv_reserved_user_space (nullable) is None
        # and model_fields_set contains the field
        if self.vv_reserved_user_space is None and "vv_reserved_user_space" in self.model_fields_set:
            _dict['vvReservedUserSpace'] = None

        # set to None if vv_size (nullable) is None
        # and model_fields_set contains the field
        if self.vv_size is None and "vv_size" in self.model_fields_set:
            _dict['vvSize'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VlunsList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "commonResourceAttributes": PrimeraCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "customerId": obj.get("customerId"),
            "deviceWWNs": obj.get("deviceWWNs"),
            "diskPartition": obj.get("diskPartition"),
            "displayname": obj.get("displayname"),
            "domain": obj.get("domain"),
            "failedPathInterval": obj.get("failedPathInterval"),
            "failedPathPolicy": obj.get("failedPathPolicy"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "initiators": DeviceType4VlunsListSingleInitiators.from_dict(obj["initiators"]) if obj.get("initiators") is not None else None,
            "lun": obj.get("lun"),
            "mountPoint": obj.get("mountPoint"),
            "mountPointFsau": obj.get("mountPointFsau"),
            "multiPathType": obj.get("multiPathType"),
            "portPos": DeviceType4vlunsListPortPos.from_dict(obj["portPos"]) if obj.get("portPos") is not None else None,
            "rawVolume": obj.get("rawVolume"),
            "remoteName": obj.get("remoteName"),
            "resourceUri": obj.get("resourceUri"),
            "state": DeviceType4VlunsListSingleState.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "status": obj.get("status"),
            "systemId": obj.get("systemId"),
            "tpgId": obj.get("tpgId"),
            "type": obj.get("type"),
            "usedSpace": obj.get("usedSpace"),
            "vlunType": obj.get("vlunType"),
            "volumeGroup": obj.get("volumeGroup"),
            "volumeManager": obj.get("volumeManager"),
            "volumeName": obj.get("volumeName"),
            "volumeWWN": obj.get("volumeWWN"),
            "vvReservedUserSpace": obj.get("vvReservedUserSpace"),
            "vvSize": obj.get("vvSize")
        })
        return _obj


