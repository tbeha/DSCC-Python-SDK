# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.device_type4_remote_info import DeviceType4RemoteInfo
from dscc.models.device_type4_secondary_remote_info import DeviceType4SecondaryRemoteInfo
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4ProtectionPolicyPolicy(BaseModel):
    """
    DeviceType4ProtectionPolicyPolicy
    """ # noqa: E501
    auto_recover: Optional[StrictBool] = Field(default=None, description="If the Remote Copy is stopped as a result of links going down, the Remote Copy group can be automatically restarted after the links come back up.", alias="autoRecover")
    auto_synchronize: Optional[StrictBool] = Field(default=None, description="Auto synchronization ensure that remote copy system automatically recovers and synchronizes all volumes in the group after automatic or manual failover scenarios. In addition, this policy allows failover even when remote copy synchronous groups are started and online", alias="autoSynchronize")
    is_protection_policy_configured: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate if protection policy is properly configured on the volume set. If it is set to false, user needs to either delete the policy or fix the policy configuration. All other operations will be blocked in this scenario.", alias="isProtectionPolicyConfigured")
    no_automatic_synchronization: Optional[StrictBool] = Field(default=None, description="Specifies if the no-automatic-synchronization option is enabled in case of Asynchronous/Periodic replication. If this property is true, then no synchronization happens. Not applicable for Synchronous replication.", alias="noAutomaticSynchronization")
    over_period_alert: Optional[StrictBool] = Field(default=None, description="If synchronization of an asynchronous periodic Remote Copy group takes longer to complete than its synchronization period, an alert is generated. This property is not valid and hence cannot be enabled in case of synchronous replication.", alias="overPeriodAlert")
    remote: Optional[DeviceType4RemoteInfo] = Field(default=None, description="Replication partner details")
    rpo_secs: Optional[StrictInt] = Field(default=None, description="Specifies recovery point objective in seconds for Asynchronous periodic protection. This is not applicable for Synchronous replication, and in case of Asynchronous replication, rpoSecs will not contain any value if the no-automatic-synchronization option is enabled.", alias="rpoSecs")
    secondary_remote: Optional[DeviceType4SecondaryRemoteInfo] = Field(default=None, description="Second replication partner details from Synchronous Long Distance configuration and for 3DC Peer Persistence mode", alias="secondaryRemote")
    zero_rto_config: Optional[StrictStr] = Field(default=None, description="Zero RTO configuration. Supported config is Active Peer Persistence. Classic Peer Persistence is not supported for HPE Alletra Storage MP.  This property is nil in case of Plain Synchronous Replication, which is of non-zero-RTO type.", alias="zeroRtoConfig")
    __properties: ClassVar[List[str]] = ["autoRecover", "autoSynchronize", "isProtectionPolicyConfigured", "noAutomaticSynchronization", "overPeriodAlert", "remote", "rpoSecs", "secondaryRemote", "zeroRtoConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4ProtectionPolicyPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of remote
        if self.remote:
            _dict['remote'] = self.remote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secondary_remote
        if self.secondary_remote:
            _dict['secondaryRemote'] = self.secondary_remote.to_dict()
        # set to None if no_automatic_synchronization (nullable) is None
        # and model_fields_set contains the field
        if self.no_automatic_synchronization is None and "no_automatic_synchronization" in self.model_fields_set:
            _dict['noAutomaticSynchronization'] = None

        # set to None if over_period_alert (nullable) is None
        # and model_fields_set contains the field
        if self.over_period_alert is None and "over_period_alert" in self.model_fields_set:
            _dict['overPeriodAlert'] = None

        # set to None if rpo_secs (nullable) is None
        # and model_fields_set contains the field
        if self.rpo_secs is None and "rpo_secs" in self.model_fields_set:
            _dict['rpoSecs'] = None

        # set to None if secondary_remote (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_remote is None and "secondary_remote" in self.model_fields_set:
            _dict['secondaryRemote'] = None

        # set to None if zero_rto_config (nullable) is None
        # and model_fields_set contains the field
        if self.zero_rto_config is None and "zero_rto_config" in self.model_fields_set:
            _dict['zeroRtoConfig'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4ProtectionPolicyPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoRecover": obj.get("autoRecover"),
            "autoSynchronize": obj.get("autoSynchronize"),
            "isProtectionPolicyConfigured": obj.get("isProtectionPolicyConfigured"),
            "noAutomaticSynchronization": obj.get("noAutomaticSynchronization"),
            "overPeriodAlert": obj.get("overPeriodAlert"),
            "remote": DeviceType4RemoteInfo.from_dict(obj["remote"]) if obj.get("remote") is not None else None,
            "rpoSecs": obj.get("rpoSecs"),
            "secondaryRemote": DeviceType4SecondaryRemoteInfo.from_dict(obj["secondaryRemote"]) if obj.get("secondaryRemote") is not None else None,
            "zeroRtoConfig": obj.get("zeroRtoConfig")
        })
        return _obj


