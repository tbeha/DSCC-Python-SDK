# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class NimbleSpaceDomainFieldsWithoutSortKey(BaseModel):
    """
    NimbleSpaceDomainFieldsWithoutSortKey
    """ # noqa: E501
    app_category_id: Optional[StrictStr] = Field(default=None, description="Identifier of the application category associated with the space domain.")
    app_category_name: Optional[StrictStr] = Field(default=None, description="Name of the application category associated with the space domain.")
    block_size: Optional[StrictInt] = Field(default=None, description="Block size in bytes of volumes belonging to the space domain.")
    clone_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Clone savings for the space domain expressed as ratio.")
    compressed_usage_bytes: Optional[StrictInt] = Field(default=None, description="Compressed usage of volumes and snapshots in the space domain.")
    compression_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Compression savings for the space domain expressed as ratio.")
    dedupe_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Deduplication savings for the space domain expressed as ratio.")
    deduped: Optional[StrictBool] = Field(default=None, description="Volumes in space domain are deduplicated by default.")
    encrypted: Optional[StrictBool] = Field(default=None, description="Volumes in space domain are encrypted.")
    id: Optional[StrictStr] = Field(default=None, description="Identifier of the application summery.")
    logical_dedupe_usage: Optional[StrictInt] = Field(default=None, description="Logical space usage of volumes when deduped.")
    physical_dedupe_usage: Optional[StrictInt] = Field(default=None, description="Physical space usage of volumes including snapshots when deduped.")
    pool_id: Optional[StrictStr] = Field(default=None, description="Identifier associated with the pool in the storage pool table.")
    pool_name: Optional[StrictStr] = Field(default=None, description="Name of the pool containing the space domain.")
    savings_clone: Optional[StrictInt] = Field(default=None, description="Space usage savings in the space domain due to cloning of volumes.")
    savings_compression: Optional[StrictInt] = Field(default=None, description="Space usage savings in the space domain due to compression.")
    savings_dedupe: Optional[StrictInt] = Field(default=None, description="Space usage savings in the space domain due to deduplication.")
    snap_logical_usage: Optional[StrictInt] = Field(default=None, description="Logical usage of snapshots in the space domain.")
    uncompressed_usage_bytes: Optional[StrictInt] = Field(default=None, description="Uncompressed usage of volumes and snapshots in the space domain.")
    usage: Optional[StrictInt] = Field(default=None, description="Physical space usage of volumes in the space domain.")
    vol_logical_usage: Optional[StrictInt] = Field(default=None, description="Logical usage of volumes in the space domain.")
    vol_mapped_usage: Optional[StrictInt] = Field(default=None, description="Mapped usage of volumes in the space domain, useful for computing clone savings.")
    __properties: ClassVar[List[str]] = ["app_category_id", "app_category_name", "block_size", "clone_ratio", "compressed_usage_bytes", "compression_ratio", "dedupe_ratio", "deduped", "encrypted", "id", "logical_dedupe_usage", "physical_dedupe_usage", "pool_id", "pool_name", "savings_clone", "savings_compression", "savings_dedupe", "snap_logical_usage", "uncompressed_usage_bytes", "usage", "vol_logical_usage", "vol_mapped_usage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleSpaceDomainFieldsWithoutSortKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if app_category_id (nullable) is None
        # and model_fields_set contains the field
        if self.app_category_id is None and "app_category_id" in self.model_fields_set:
            _dict['app_category_id'] = None

        # set to None if app_category_name (nullable) is None
        # and model_fields_set contains the field
        if self.app_category_name is None and "app_category_name" in self.model_fields_set:
            _dict['app_category_name'] = None

        # set to None if block_size (nullable) is None
        # and model_fields_set contains the field
        if self.block_size is None and "block_size" in self.model_fields_set:
            _dict['block_size'] = None

        # set to None if clone_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.clone_ratio is None and "clone_ratio" in self.model_fields_set:
            _dict['clone_ratio'] = None

        # set to None if compressed_usage_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.compressed_usage_bytes is None and "compressed_usage_bytes" in self.model_fields_set:
            _dict['compressed_usage_bytes'] = None

        # set to None if compression_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.compression_ratio is None and "compression_ratio" in self.model_fields_set:
            _dict['compression_ratio'] = None

        # set to None if dedupe_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_ratio is None and "dedupe_ratio" in self.model_fields_set:
            _dict['dedupe_ratio'] = None

        # set to None if deduped (nullable) is None
        # and model_fields_set contains the field
        if self.deduped is None and "deduped" in self.model_fields_set:
            _dict['deduped'] = None

        # set to None if encrypted (nullable) is None
        # and model_fields_set contains the field
        if self.encrypted is None and "encrypted" in self.model_fields_set:
            _dict['encrypted'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if logical_dedupe_usage (nullable) is None
        # and model_fields_set contains the field
        if self.logical_dedupe_usage is None and "logical_dedupe_usage" in self.model_fields_set:
            _dict['logical_dedupe_usage'] = None

        # set to None if physical_dedupe_usage (nullable) is None
        # and model_fields_set contains the field
        if self.physical_dedupe_usage is None and "physical_dedupe_usage" in self.model_fields_set:
            _dict['physical_dedupe_usage'] = None

        # set to None if pool_id (nullable) is None
        # and model_fields_set contains the field
        if self.pool_id is None and "pool_id" in self.model_fields_set:
            _dict['pool_id'] = None

        # set to None if pool_name (nullable) is None
        # and model_fields_set contains the field
        if self.pool_name is None and "pool_name" in self.model_fields_set:
            _dict['pool_name'] = None

        # set to None if savings_clone (nullable) is None
        # and model_fields_set contains the field
        if self.savings_clone is None and "savings_clone" in self.model_fields_set:
            _dict['savings_clone'] = None

        # set to None if savings_compression (nullable) is None
        # and model_fields_set contains the field
        if self.savings_compression is None and "savings_compression" in self.model_fields_set:
            _dict['savings_compression'] = None

        # set to None if savings_dedupe (nullable) is None
        # and model_fields_set contains the field
        if self.savings_dedupe is None and "savings_dedupe" in self.model_fields_set:
            _dict['savings_dedupe'] = None

        # set to None if snap_logical_usage (nullable) is None
        # and model_fields_set contains the field
        if self.snap_logical_usage is None and "snap_logical_usage" in self.model_fields_set:
            _dict['snap_logical_usage'] = None

        # set to None if uncompressed_usage_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.uncompressed_usage_bytes is None and "uncompressed_usage_bytes" in self.model_fields_set:
            _dict['uncompressed_usage_bytes'] = None

        # set to None if usage (nullable) is None
        # and model_fields_set contains the field
        if self.usage is None and "usage" in self.model_fields_set:
            _dict['usage'] = None

        # set to None if vol_logical_usage (nullable) is None
        # and model_fields_set contains the field
        if self.vol_logical_usage is None and "vol_logical_usage" in self.model_fields_set:
            _dict['vol_logical_usage'] = None

        # set to None if vol_mapped_usage (nullable) is None
        # and model_fields_set contains the field
        if self.vol_mapped_usage is None and "vol_mapped_usage" in self.model_fields_set:
            _dict['vol_mapped_usage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleSpaceDomainFieldsWithoutSortKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_category_id": obj.get("app_category_id"),
            "app_category_name": obj.get("app_category_name"),
            "block_size": obj.get("block_size"),
            "clone_ratio": obj.get("clone_ratio"),
            "compressed_usage_bytes": obj.get("compressed_usage_bytes"),
            "compression_ratio": obj.get("compression_ratio"),
            "dedupe_ratio": obj.get("dedupe_ratio"),
            "deduped": obj.get("deduped"),
            "encrypted": obj.get("encrypted"),
            "id": obj.get("id"),
            "logical_dedupe_usage": obj.get("logical_dedupe_usage"),
            "physical_dedupe_usage": obj.get("physical_dedupe_usage"),
            "pool_id": obj.get("pool_id"),
            "pool_name": obj.get("pool_name"),
            "savings_clone": obj.get("savings_clone"),
            "savings_compression": obj.get("savings_compression"),
            "savings_dedupe": obj.get("savings_dedupe"),
            "snap_logical_usage": obj.get("snap_logical_usage"),
            "uncompressed_usage_bytes": obj.get("uncompressed_usage_bytes"),
            "usage": obj.get("usage"),
            "vol_logical_usage": obj.get("vol_logical_usage"),
            "vol_mapped_usage": obj.get("vol_mapped_usage")
        })
        return _obj


