# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PrimeraReplicationPartner(BaseModel):
    """
    PrimeraReplicationPartner
    """ # noqa: E501
    async_partner: Optional[StrictStr] = Field(default=None, description="Shows asynchronous replication partner associated with SLD configuration. This is applicable only if the parent partner is of sync type.", alias="asyncPartner")
    id: Optional[StrictStr] = Field(default=None, description="Id of replication partner")
    is_active_sync_supported: Optional[StrictBool] = Field(default=None, description="States if Active-Sync is supported or not", alias="isActiveSyncSupported")
    is_peer_persistance_supported: Optional[StrictBool] = Field(default=None, description="States if Peer Persistance is supported or not", alias="isPeerPersistanceSupported")
    min_async_rpo: Optional[StrictInt] = Field(default=None, description="Minimum async RPO value in seconds for asynchronous data replication.", alias="minAsyncRPO")
    name: Optional[StrictStr] = Field(default=None, description="Name of replication partner")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Resource URI for replication partner", alias="resourceUri")
    sync_partner: Optional[StrictStr] = Field(default=None, description="Shows synchronous replication partner associated with SLD configuration. This is applicable only if the parent partner is of async type.", alias="syncPartner")
    __properties: ClassVar[List[str]] = ["asyncPartner", "id", "isActiveSyncSupported", "isPeerPersistanceSupported", "minAsyncRPO", "name", "resourceUri", "syncPartner"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrimeraReplicationPartner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if async_partner (nullable) is None
        # and model_fields_set contains the field
        if self.async_partner is None and "async_partner" in self.model_fields_set:
            _dict['asyncPartner'] = None

        # set to None if is_active_sync_supported (nullable) is None
        # and model_fields_set contains the field
        if self.is_active_sync_supported is None and "is_active_sync_supported" in self.model_fields_set:
            _dict['isActiveSyncSupported'] = None

        # set to None if is_peer_persistance_supported (nullable) is None
        # and model_fields_set contains the field
        if self.is_peer_persistance_supported is None and "is_peer_persistance_supported" in self.model_fields_set:
            _dict['isPeerPersistanceSupported'] = None

        # set to None if min_async_rpo (nullable) is None
        # and model_fields_set contains the field
        if self.min_async_rpo is None and "min_async_rpo" in self.model_fields_set:
            _dict['minAsyncRPO'] = None

        # set to None if sync_partner (nullable) is None
        # and model_fields_set contains the field
        if self.sync_partner is None and "sync_partner" in self.model_fields_set:
            _dict['syncPartner'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrimeraReplicationPartner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asyncPartner": obj.get("asyncPartner"),
            "id": obj.get("id"),
            "isActiveSyncSupported": obj.get("isActiveSyncSupported"),
            "isPeerPersistanceSupported": obj.get("isPeerPersistanceSupported"),
            "minAsyncRPO": obj.get("minAsyncRPO"),
            "name": obj.get("name"),
            "resourceUri": obj.get("resourceUri"),
            "syncPartner": obj.get("syncPartner")
        })
        return _obj


