# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from dscc.models.app_set_qo_s_config import AppSetQoSConfig
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.device_type4_application_set_details_initiators_inner import DeviceType4ApplicationSetDetailsInitiatorsInner
from dscc.models.device_type4_application_set_details_replication_partner_inner import DeviceType4ApplicationSetDetailsReplicationPartnerInner
from dscc.models.primera_common_resource_attributes import PrimeraCommonResourceAttributes
from dscc.models.recovery_point import RecoveryPoint
from typing import Optional, Set
from typing_extensions import Self

class PrimeraApplicationSetDetails(BaseModel):
    """
    PrimeraApplicationSetDetails
    """ # noqa: E501
    app_set_business_unit: Optional[StrictStr] = Field(default=None, description="Appset BusinessUnit", alias="appSetBusinessUnit")
    app_set_comments: Optional[StrictStr] = Field(default=None, description="Application set comments", alias="appSetComments")
    app_set_exclude_aiqo_s: Optional[StrictStr] = Field(default=None, description="Exclusion from AI QoS", alias="appSetExcludeAIQoS")
    app_set_id: Optional[StrictInt] = Field(default=None, description="ID", alias="appSetId")
    app_set_importance: Optional[StrictStr] = Field(default=None, description="Importance Level", alias="appSetImportance")
    app_set_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Application set name", alias="appSetName")
    app_set_qo_s_config: Optional[AppSetQoSConfig] = Field(default=None, alias="appSetQoSConfig")
    app_set_type: Optional[StrictStr] = Field(default=None, description="Type of the application set", alias="appSetType")
    app_set_type_enum: Optional[StrictStr] = Field(default=None, description="Enum value of type of the application set", alias="appSetTypeEnum")
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    comment: Optional[StrictStr] = Field(default=None, description="Comments if any")
    common_resource_attributes: Optional[PrimeraCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    display_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Display Name", alias="displayName")
    domain: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Domain name")
    dr_state: Optional[StrictStr] = Field(default=None, description="Specifies replication disaster recovery state of a protected volume set.  Possible values: Normal, Failover, Recover, Unknown The disaster recovery state is Unknown for any intermediate state.", alias="drState")
    export_status: Optional[StrictStr] = Field(default=None, description="Export status", alias="exportStatus")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    id: Optional[StrictStr] = Field(default=None, description="uid of the applicationset")
    initiators: Optional[List[DeviceType4ApplicationSetDetailsInitiatorsInner]] = Field(default=None, description="Initiator details")
    is_failover_allowed: Optional[StrictBool] = Field(default=None, description="Shows if failover is allowed or not. This field is deprecated.", alias="isFailoverAllowed")
    is_override_allowed: Optional[StrictBool] = Field(default=None, description="Shows if Override is allowed or not. This field is deprecated.", alias="isOverrideAllowed")
    is_primary: Optional[StrictBool] = Field(default=None, description="States if the Application set is Primary or not", alias="isPrimary")
    is_sync_allowed: Optional[StrictBool] = Field(default=None, description="Shows if sync is allowed or not. This field is deprecated.", alias="isSyncAllowed")
    kv_pairs_present: Optional[StrictBool] = Field(default=None, description="Represents KV pairs present or not", alias="kvPairsPresent")
    members: Optional[List[Optional[StrictStr]]] = Field(default=None, description="Volume Names")
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Name of the application set")
    non_zero_rto_config: Optional[StrictStr] = Field(default=None, description="Non-Zero RTO configuration. Supported config is Active-Sync", alias="nonZeroRtoConfig")
    remote_recovery_point: Optional[RecoveryPoint] = Field(default=None, alias="remoteRecoveryPoint")
    replication_partner: Optional[List[Optional[DeviceType4ApplicationSetDetailsReplicationPartnerInner]]] = Field(default=None, description="Shows the Replication Partner Systems and Replication Partners", alias="replicationPartner")
    replication_state: Optional[StrictStr] = Field(default=None, description="Shows the replication state of the application set. This is not applicable in case of a 3DC/SLD configuration.", alias="replicationState")
    replication_traffic: Optional[StrictStr] = Field(default=None, description="Shows the direction of flow of data. This is not applicable in case of a 3DC/SLD configuration.", alias="replicationTraffic")
    replication_type: Optional[StrictStr] = Field(default=None, description="Mode of replication. Can be sync or periodic. This is not applicable in case of a 3DC/SLD configuration.", alias="replicationType")
    request_uri: Optional[StrictStr] = Field(default=None, description="RequestUri for applicationsets resources", alias="requestUri")
    role: Optional[StrictStr] = Field(default=None, description="Specifies remote copy role for a protected volume set.  Possible values: Primary, Secondary, Primary-Rev, Secondary-Rev, Unknown The role status is Unknown for any intermediate remote copy role of a protected volume set.")
    serial_number: Optional[StrictStr] = Field(default=None, description="Serial number.", alias="serialNumber")
    size_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Size in MB of appset", alias="sizeMiB")
    snap_set_parent_id: Optional[StrictInt] = Field(default=None, description="ParentId of the snapSet", alias="snapSetParentId")
    snap_set_parent_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Parent name of the snapSet", alias="snapSetParentName")
    system_id: Optional[StrictStr] = Field(default=None, description="SystemUid/serialNumber of the array.", alias="systemId")
    type: Optional[StrictStr] = Field(default=None, description="type")
    vv_set_type: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Type of the volume-set", alias="vvSetType")
    zero_rto_config: Optional[StrictStr] = Field(default=None, description="Zero RTO configuration. Supported configs are Active Peer Persistence and Peer Persistence", alias="zeroRtoConfig")
    __properties: ClassVar[List[str]] = ["appSetBusinessUnit", "appSetComments", "appSetExcludeAIQoS", "appSetId", "appSetImportance", "appSetName", "appSetQoSConfig", "appSetType", "appSetTypeEnum", "associatedLinks", "comment", "commonResourceAttributes", "consoleUri", "customerId", "displayName", "domain", "drState", "exportStatus", "generation", "id", "initiators", "isFailoverAllowed", "isOverrideAllowed", "isPrimary", "isSyncAllowed", "kvPairsPresent", "members", "name", "nonZeroRtoConfig", "remoteRecoveryPoint", "replicationPartner", "replicationState", "replicationTraffic", "replicationType", "requestUri", "role", "serialNumber", "sizeMiB", "snapSetParentId", "snapSetParentName", "systemId", "type", "vvSetType", "zeroRtoConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrimeraApplicationSetDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_set_qo_s_config
        if self.app_set_qo_s_config:
            _dict['appSetQoSConfig'] = self.app_set_qo_s_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in initiators (list)
        _items = []
        if self.initiators:
            for _item in self.initiators:
                if _item:
                    _items.append(_item.to_dict())
            _dict['initiators'] = _items
        # override the default output from pydantic by calling `to_dict()` of remote_recovery_point
        if self.remote_recovery_point:
            _dict['remoteRecoveryPoint'] = self.remote_recovery_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in replication_partner (list)
        _items = []
        if self.replication_partner:
            for _item in self.replication_partner:
                if _item:
                    _items.append(_item.to_dict())
            _dict['replicationPartner'] = _items
        # set to None if app_set_business_unit (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_business_unit is None and "app_set_business_unit" in self.model_fields_set:
            _dict['appSetBusinessUnit'] = None

        # set to None if app_set_comments (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_comments is None and "app_set_comments" in self.model_fields_set:
            _dict['appSetComments'] = None

        # set to None if app_set_exclude_aiqo_s (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_exclude_aiqo_s is None and "app_set_exclude_aiqo_s" in self.model_fields_set:
            _dict['appSetExcludeAIQoS'] = None

        # set to None if app_set_id (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_id is None and "app_set_id" in self.model_fields_set:
            _dict['appSetId'] = None

        # set to None if app_set_importance (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_importance is None and "app_set_importance" in self.model_fields_set:
            _dict['appSetImportance'] = None

        # set to None if app_set_name (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_name is None and "app_set_name" in self.model_fields_set:
            _dict['appSetName'] = None

        # set to None if app_set_qo_s_config (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_qo_s_config is None and "app_set_qo_s_config" in self.model_fields_set:
            _dict['appSetQoSConfig'] = None

        # set to None if app_set_type (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_type is None and "app_set_type" in self.model_fields_set:
            _dict['appSetType'] = None

        # set to None if app_set_type_enum (nullable) is None
        # and model_fields_set contains the field
        if self.app_set_type_enum is None and "app_set_type_enum" in self.model_fields_set:
            _dict['appSetTypeEnum'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if dr_state (nullable) is None
        # and model_fields_set contains the field
        if self.dr_state is None and "dr_state" in self.model_fields_set:
            _dict['drState'] = None

        # set to None if export_status (nullable) is None
        # and model_fields_set contains the field
        if self.export_status is None and "export_status" in self.model_fields_set:
            _dict['exportStatus'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if initiators (nullable) is None
        # and model_fields_set contains the field
        if self.initiators is None and "initiators" in self.model_fields_set:
            _dict['initiators'] = None

        # set to None if is_failover_allowed (nullable) is None
        # and model_fields_set contains the field
        if self.is_failover_allowed is None and "is_failover_allowed" in self.model_fields_set:
            _dict['isFailoverAllowed'] = None

        # set to None if is_override_allowed (nullable) is None
        # and model_fields_set contains the field
        if self.is_override_allowed is None and "is_override_allowed" in self.model_fields_set:
            _dict['isOverrideAllowed'] = None

        # set to None if is_primary (nullable) is None
        # and model_fields_set contains the field
        if self.is_primary is None and "is_primary" in self.model_fields_set:
            _dict['isPrimary'] = None

        # set to None if is_sync_allowed (nullable) is None
        # and model_fields_set contains the field
        if self.is_sync_allowed is None and "is_sync_allowed" in self.model_fields_set:
            _dict['isSyncAllowed'] = None

        # set to None if members (nullable) is None
        # and model_fields_set contains the field
        if self.members is None and "members" in self.model_fields_set:
            _dict['members'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if non_zero_rto_config (nullable) is None
        # and model_fields_set contains the field
        if self.non_zero_rto_config is None and "non_zero_rto_config" in self.model_fields_set:
            _dict['nonZeroRtoConfig'] = None

        # set to None if remote_recovery_point (nullable) is None
        # and model_fields_set contains the field
        if self.remote_recovery_point is None and "remote_recovery_point" in self.model_fields_set:
            _dict['remoteRecoveryPoint'] = None

        # set to None if replication_partner (nullable) is None
        # and model_fields_set contains the field
        if self.replication_partner is None and "replication_partner" in self.model_fields_set:
            _dict['replicationPartner'] = None

        # set to None if replication_state (nullable) is None
        # and model_fields_set contains the field
        if self.replication_state is None and "replication_state" in self.model_fields_set:
            _dict['replicationState'] = None

        # set to None if replication_traffic (nullable) is None
        # and model_fields_set contains the field
        if self.replication_traffic is None and "replication_traffic" in self.model_fields_set:
            _dict['replicationTraffic'] = None

        # set to None if replication_type (nullable) is None
        # and model_fields_set contains the field
        if self.replication_type is None and "replication_type" in self.model_fields_set:
            _dict['replicationType'] = None

        # set to None if request_uri (nullable) is None
        # and model_fields_set contains the field
        if self.request_uri is None and "request_uri" in self.model_fields_set:
            _dict['requestUri'] = None

        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict['role'] = None

        # set to None if serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.serial_number is None and "serial_number" in self.model_fields_set:
            _dict['serialNumber'] = None

        # set to None if size_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.size_mi_b is None and "size_mi_b" in self.model_fields_set:
            _dict['sizeMiB'] = None

        # set to None if snap_set_parent_id (nullable) is None
        # and model_fields_set contains the field
        if self.snap_set_parent_id is None and "snap_set_parent_id" in self.model_fields_set:
            _dict['snapSetParentId'] = None

        # set to None if snap_set_parent_name (nullable) is None
        # and model_fields_set contains the field
        if self.snap_set_parent_name is None and "snap_set_parent_name" in self.model_fields_set:
            _dict['snapSetParentName'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if vv_set_type (nullable) is None
        # and model_fields_set contains the field
        if self.vv_set_type is None and "vv_set_type" in self.model_fields_set:
            _dict['vvSetType'] = None

        # set to None if zero_rto_config (nullable) is None
        # and model_fields_set contains the field
        if self.zero_rto_config is None and "zero_rto_config" in self.model_fields_set:
            _dict['zeroRtoConfig'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrimeraApplicationSetDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appSetBusinessUnit": obj.get("appSetBusinessUnit"),
            "appSetComments": obj.get("appSetComments"),
            "appSetExcludeAIQoS": obj.get("appSetExcludeAIQoS"),
            "appSetId": obj.get("appSetId"),
            "appSetImportance": obj.get("appSetImportance"),
            "appSetName": obj.get("appSetName"),
            "appSetQoSConfig": AppSetQoSConfig.from_dict(obj["appSetQoSConfig"]) if obj.get("appSetQoSConfig") is not None else None,
            "appSetType": obj.get("appSetType"),
            "appSetTypeEnum": obj.get("appSetTypeEnum"),
            "associatedLinks": [AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "comment": obj.get("comment"),
            "commonResourceAttributes": PrimeraCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "customerId": obj.get("customerId"),
            "displayName": obj.get("displayName"),
            "domain": obj.get("domain"),
            "drState": obj.get("drState"),
            "exportStatus": obj.get("exportStatus"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "initiators": [DeviceType4ApplicationSetDetailsInitiatorsInner.from_dict(_item) for _item in obj["initiators"]] if obj.get("initiators") is not None else None,
            "isFailoverAllowed": obj.get("isFailoverAllowed"),
            "isOverrideAllowed": obj.get("isOverrideAllowed"),
            "isPrimary": obj.get("isPrimary"),
            "isSyncAllowed": obj.get("isSyncAllowed"),
            "kvPairsPresent": obj.get("kvPairsPresent"),
            "members": obj.get("members"),
            "name": obj.get("name"),
            "nonZeroRtoConfig": obj.get("nonZeroRtoConfig"),
            "remoteRecoveryPoint": RecoveryPoint.from_dict(obj["remoteRecoveryPoint"]) if obj.get("remoteRecoveryPoint") is not None else None,
            "replicationPartner": [DeviceType4ApplicationSetDetailsReplicationPartnerInner.from_dict(_item) for _item in obj["replicationPartner"]] if obj.get("replicationPartner") is not None else None,
            "replicationState": obj.get("replicationState"),
            "replicationTraffic": obj.get("replicationTraffic"),
            "replicationType": obj.get("replicationType"),
            "requestUri": obj.get("requestUri"),
            "role": obj.get("role"),
            "serialNumber": obj.get("serialNumber"),
            "sizeMiB": obj.get("sizeMiB"),
            "snapSetParentId": obj.get("snapSetParentId"),
            "snapSetParentName": obj.get("snapSetParentName"),
            "systemId": obj.get("systemId"),
            "type": obj.get("type"),
            "vvSetType": obj.get("vvSetType"),
            "zeroRtoConfig": obj.get("zeroRtoConfig")
        })
        return _obj


