# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.device_type4_sync_time import DeviceType4SyncTime
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4ReplicationPartnerVolumeListRemoteVolume(BaseModel):
    """
    remote volume properties associated with replication partner
    """ # noqa: E501
    async_outstanding: Optional[StrictInt] = Field(default=None, description="Total outstanding data to be synchronized in MB. You can calculate backlog data for the Remote Copy Async group by summing up the asyncOutsstanding value for all the volumes in the group. Defaults to -1.", alias="asyncOutstanding")
    remote_volume_id: Optional[StrictInt] = Field(default=None, description="Volume ID on the target system.", alias="remoteVolumeID")
    remote_volume_name: Optional[StrictStr] = Field(default=None, description="Volume name on the target system.", alias="remoteVolumeName")
    resync_iteration: Optional[StrictStr] = Field(default=None, description="A correlator used to determine the data consistency point of the resynchroniztion snapshot relative to the remote volume and/or snapshots. Returns 'NA' if not set.", alias="resyncIteration")
    resync_snapshot_name: Optional[StrictStr] = Field(default=None, description="Snapshot indicating the starting point of the remote volume. The primary array uses this snapshot to determine which changes to synchronize to the secondary volume. The target array uses this snapshot as a recovery point if there is a resynchronization failure.", alias="resyncSnapshotName")
    sync_iteration: Optional[StrictStr] = Field(default=None, description="A correlator used to determine the data consistency point of the synchronization snapshot relative to the remote volume and/or snapshots. Returns 'NA' if not set.", alias="syncIteration")
    sync_percentage: Optional[StrictInt] = Field(default=None, description="Synchronization percentage of the volume.", alias="syncPercentage")
    sync_snapshot_name: Optional[StrictStr] = Field(default=None, description="Snapshot indicating the destination point of the Remote Copy volume on successful completion of resynchronization. Upon completion of a resynchronization, the remote base volume mirrors this synchronization snapshot. This snapshot becomes the resync snapshot when resynchronization completes.", alias="syncSnapshotName")
    sync_status: Optional[StrictStr] = Field(default=None, description="Synchronization status of the volume. Can be New, Syncing, Synced, Not Synced, Stale, New Pre Synced, New Sync from Snap, Failsafe, Logging, New Pending, Pending Dismiss or Remote Pending Dismiss. Null if unset.", alias="syncStatus")
    target_name: Optional[StrictStr] = Field(default=None, description="Target to which the volume group is mirrored.", alias="targetName")
    volume_iteration: Optional[StrictStr] = Field(default=None, description="A correlator used to determine the data consistency point of the volume relative to the remote volume and/or snapshots. Returns 'NA' if not set.", alias="volumeIteration")
    volume_last_sync_time: Optional[DeviceType4SyncTime] = Field(default=None, alias="volumeLastSyncTime")
    volume_sync_length: Optional[StrictInt] = Field(default=None, description="Volume synchronization total length. Returns -1 if unset", alias="volumeSyncLength")
    volume_sync_offset: Optional[StrictInt] = Field(default=None, description="Volume synchronization offset. Returns -1 if unset.", alias="volumeSyncOffset")
    __properties: ClassVar[List[str]] = ["asyncOutstanding", "remoteVolumeID", "remoteVolumeName", "resyncIteration", "resyncSnapshotName", "syncIteration", "syncPercentage", "syncSnapshotName", "syncStatus", "targetName", "volumeIteration", "volumeLastSyncTime", "volumeSyncLength", "volumeSyncOffset"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4ReplicationPartnerVolumeListRemoteVolume from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of volume_last_sync_time
        if self.volume_last_sync_time:
            _dict['volumeLastSyncTime'] = self.volume_last_sync_time.to_dict()
        # set to None if async_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.async_outstanding is None and "async_outstanding" in self.model_fields_set:
            _dict['asyncOutstanding'] = None

        # set to None if remote_volume_id (nullable) is None
        # and model_fields_set contains the field
        if self.remote_volume_id is None and "remote_volume_id" in self.model_fields_set:
            _dict['remoteVolumeID'] = None

        # set to None if remote_volume_name (nullable) is None
        # and model_fields_set contains the field
        if self.remote_volume_name is None and "remote_volume_name" in self.model_fields_set:
            _dict['remoteVolumeName'] = None

        # set to None if resync_iteration (nullable) is None
        # and model_fields_set contains the field
        if self.resync_iteration is None and "resync_iteration" in self.model_fields_set:
            _dict['resyncIteration'] = None

        # set to None if resync_snapshot_name (nullable) is None
        # and model_fields_set contains the field
        if self.resync_snapshot_name is None and "resync_snapshot_name" in self.model_fields_set:
            _dict['resyncSnapshotName'] = None

        # set to None if sync_iteration (nullable) is None
        # and model_fields_set contains the field
        if self.sync_iteration is None and "sync_iteration" in self.model_fields_set:
            _dict['syncIteration'] = None

        # set to None if sync_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.sync_percentage is None and "sync_percentage" in self.model_fields_set:
            _dict['syncPercentage'] = None

        # set to None if sync_snapshot_name (nullable) is None
        # and model_fields_set contains the field
        if self.sync_snapshot_name is None and "sync_snapshot_name" in self.model_fields_set:
            _dict['syncSnapshotName'] = None

        # set to None if sync_status (nullable) is None
        # and model_fields_set contains the field
        if self.sync_status is None and "sync_status" in self.model_fields_set:
            _dict['syncStatus'] = None

        # set to None if target_name (nullable) is None
        # and model_fields_set contains the field
        if self.target_name is None and "target_name" in self.model_fields_set:
            _dict['targetName'] = None

        # set to None if volume_iteration (nullable) is None
        # and model_fields_set contains the field
        if self.volume_iteration is None and "volume_iteration" in self.model_fields_set:
            _dict['volumeIteration'] = None

        # set to None if volume_last_sync_time (nullable) is None
        # and model_fields_set contains the field
        if self.volume_last_sync_time is None and "volume_last_sync_time" in self.model_fields_set:
            _dict['volumeLastSyncTime'] = None

        # set to None if volume_sync_length (nullable) is None
        # and model_fields_set contains the field
        if self.volume_sync_length is None and "volume_sync_length" in self.model_fields_set:
            _dict['volumeSyncLength'] = None

        # set to None if volume_sync_offset (nullable) is None
        # and model_fields_set contains the field
        if self.volume_sync_offset is None and "volume_sync_offset" in self.model_fields_set:
            _dict['volumeSyncOffset'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4ReplicationPartnerVolumeListRemoteVolume from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asyncOutstanding": obj.get("asyncOutstanding"),
            "remoteVolumeID": obj.get("remoteVolumeID"),
            "remoteVolumeName": obj.get("remoteVolumeName"),
            "resyncIteration": obj.get("resyncIteration"),
            "resyncSnapshotName": obj.get("resyncSnapshotName"),
            "syncIteration": obj.get("syncIteration"),
            "syncPercentage": obj.get("syncPercentage"),
            "syncSnapshotName": obj.get("syncSnapshotName"),
            "syncStatus": obj.get("syncStatus"),
            "targetName": obj.get("targetName"),
            "volumeIteration": obj.get("volumeIteration"),
            "volumeLastSyncTime": DeviceType4SyncTime.from_dict(obj["volumeLastSyncTime"]) if obj.get("volumeLastSyncTime") is not None else None,
            "volumeSyncLength": obj.get("volumeSyncLength"),
            "volumeSyncOffset": obj.get("volumeSyncOffset")
        })
        return _obj


