# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.common_resource_attributes_device_type4_host_path import CommonResourceAttributesDeviceType4HostPath
from dscc.models.device_type4_host_path_list_obj_port_pos import DeviceType4HostPathListObjPortPos
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4HostPathListObj(BaseModel):
    """
    DeviceType4HostPathListObj
    """ # noqa: E501
    ip_addr: Optional[StrictStr] = Field(default=None, description="Ip Address", alias="IPAddr")
    address: Optional[StrictStr] = Field(default=None, description="WWN Address of the Host Path `Filter`")
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    common_resource_attributes: Optional[CommonResourceAttributesDeviceType4HostPath] = Field(default=None, alias="commonResourceAttributes")
    displayname: Optional[StrictStr] = Field(default=None, description="Name to be used for display purposes")
    domain: Optional[StrictStr] = Field(default=None, description="Domain name of the Host")
    driver_version: Optional[StrictStr] = Field(default=None, description="Driver version   ", alias="driverVersion")
    firmware_version: Optional[StrictStr] = Field(default=None, description="Firmware version", alias="firmwareVersion")
    generation: Optional[StrictInt] = Field(default=None, description="Generation Time of the Resource `Filter, Sort`")
    host_id: Optional[StrictInt] = Field(default=None, description="ID of the Host resource", alias="hostId")
    host_name: Optional[StrictStr] = Field(default=None, description="Host Name `Filter, Sort`", alias="hostName")
    host_speed: Optional[StrictInt] = Field(default=None, description="ID of the Host resource", alias="hostSpeed")
    id: Optional[StrictStr] = Field(default=None, description="HostPath Resource UID `Filter`")
    model: Optional[StrictStr] = Field(default=None, description="Host Model")
    path_type: Optional[StrictStr] = Field(default=None, description="Path Type `Filter`", alias="pathType")
    port_pos: Optional[DeviceType4HostPathListObjPortPos] = Field(default=None, alias="portPos")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed hostpath object", alias="resourceUri")
    sc_host_initiator_id: Optional[StrictStr] = Field(default=None, description="Host Service Initiator Id `Filter`", alias="sc_HostInitiatorId")
    switch_port_wwn: Optional[StrictStr] = Field(default=None, description="Switch Port WWN", alias="switchPortWWN")
    system_uid: Optional[StrictStr] = Field(default=None, description="System Uid `Filter`", alias="systemUid")
    system_wwn: Optional[StrictStr] = Field(default=None, description="System serial Number `Filter, Sort`", alias="systemWWN")
    uri: Optional[StrictStr] = Field(default=None, description="Uri ")
    vendor: Optional[StrictStr] = Field(default=None, description="Vendor")
    __properties: ClassVar[List[str]] = ["IPAddr", "address", "associatedLinks", "commonResourceAttributes", "displayname", "domain", "driverVersion", "firmwareVersion", "generation", "hostId", "hostName", "hostSpeed", "id", "model", "pathType", "portPos", "resourceUri", "sc_HostInitiatorId", "switchPortWWN", "systemUid", "systemWWN", "uri", "vendor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4HostPathListObj from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of port_pos
        if self.port_pos:
            _dict['portPos'] = self.port_pos.to_dict()
        # set to None if ip_addr (nullable) is None
        # and model_fields_set contains the field
        if self.ip_addr is None and "ip_addr" in self.model_fields_set:
            _dict['IPAddr'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if displayname (nullable) is None
        # and model_fields_set contains the field
        if self.displayname is None and "displayname" in self.model_fields_set:
            _dict['displayname'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if driver_version (nullable) is None
        # and model_fields_set contains the field
        if self.driver_version is None and "driver_version" in self.model_fields_set:
            _dict['driverVersion'] = None

        # set to None if firmware_version (nullable) is None
        # and model_fields_set contains the field
        if self.firmware_version is None and "firmware_version" in self.model_fields_set:
            _dict['firmwareVersion'] = None

        # set to None if host_id (nullable) is None
        # and model_fields_set contains the field
        if self.host_id is None and "host_id" in self.model_fields_set:
            _dict['hostId'] = None

        # set to None if host_name (nullable) is None
        # and model_fields_set contains the field
        if self.host_name is None and "host_name" in self.model_fields_set:
            _dict['hostName'] = None

        # set to None if host_speed (nullable) is None
        # and model_fields_set contains the field
        if self.host_speed is None and "host_speed" in self.model_fields_set:
            _dict['hostSpeed'] = None

        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict['model'] = None

        # set to None if path_type (nullable) is None
        # and model_fields_set contains the field
        if self.path_type is None and "path_type" in self.model_fields_set:
            _dict['pathType'] = None

        # set to None if port_pos (nullable) is None
        # and model_fields_set contains the field
        if self.port_pos is None and "port_pos" in self.model_fields_set:
            _dict['portPos'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if sc_host_initiator_id (nullable) is None
        # and model_fields_set contains the field
        if self.sc_host_initiator_id is None and "sc_host_initiator_id" in self.model_fields_set:
            _dict['sc_HostInitiatorId'] = None

        # set to None if switch_port_wwn (nullable) is None
        # and model_fields_set contains the field
        if self.switch_port_wwn is None and "switch_port_wwn" in self.model_fields_set:
            _dict['switchPortWWN'] = None

        # set to None if uri (nullable) is None
        # and model_fields_set contains the field
        if self.uri is None and "uri" in self.model_fields_set:
            _dict['uri'] = None

        # set to None if vendor (nullable) is None
        # and model_fields_set contains the field
        if self.vendor is None and "vendor" in self.model_fields_set:
            _dict['vendor'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4HostPathListObj from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "IPAddr": obj.get("IPAddr"),
            "address": obj.get("address"),
            "associatedLinks": [AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "commonResourceAttributes": CommonResourceAttributesDeviceType4HostPath.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "displayname": obj.get("displayname"),
            "domain": obj.get("domain"),
            "driverVersion": obj.get("driverVersion"),
            "firmwareVersion": obj.get("firmwareVersion"),
            "generation": obj.get("generation"),
            "hostId": obj.get("hostId"),
            "hostName": obj.get("hostName"),
            "hostSpeed": obj.get("hostSpeed"),
            "id": obj.get("id"),
            "model": obj.get("model"),
            "pathType": obj.get("pathType"),
            "portPos": DeviceType4HostPathListObjPortPos.from_dict(obj["portPos"]) if obj.get("portPos") is not None else None,
            "resourceUri": obj.get("resourceUri"),
            "sc_HostInitiatorId": obj.get("sc_HostInitiatorId"),
            "switchPortWWN": obj.get("switchPortWWN"),
            "systemUid": obj.get("systemUid"),
            "systemWWN": obj.get("systemWWN"),
            "uri": obj.get("uri"),
            "vendor": obj.get("vendor")
        })
        return _obj


