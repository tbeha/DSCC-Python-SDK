# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CollectSupportDataInput(BaseModel):
    """
    Trigger and collect support data collection on the system
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Type of a collection.")
    options: Optional[List[StrictStr]] = Field(default=None, description="Options needed for the collection. If options are not specified, default values will be used.   INSPLORECOLLECTION can have any or all of \"clidata\", \"nodedata\" and \"tocdata\"     Default options - [\"clidata\",\"nodedata\",\"tocdata\"]   PERFCOLLECTION should have 3 options,   * Iteration - a number between 1 to 1000 as a string,   * Interval - a number in seconds between 1 to 172800 as a string   * Type of collection -default or -comprehensive   Default options - [\"60\",\"10\",\"-default\"]  Other collection types won't require any options, if provided will be ignored.")
    __properties: ClassVar[List[str]] = ["action", "options"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PERFCOLLECTION', 'INSPLORECOLLECTION', 'APPDUMPCOLLECTION', 'CRASHDUMPCOLLECTION', 'SPLORCOLLECTION', 'WEEKLYCOLLECTION']):
            raise ValueError("must be one of enum values ('PERFCOLLECTION', 'INSPLORECOLLECTION', 'APPDUMPCOLLECTION', 'CRASHDUMPCOLLECTION', 'SPLORCOLLECTION', 'WEEKLYCOLLECTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CollectSupportDataInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if action (nullable) is None
        # and model_fields_set contains the field
        if self.action is None and "action" in self.model_fields_set:
            _dict['action'] = None

        # set to None if options (nullable) is None
        # and model_fields_set contains the field
        if self.options is None and "options" in self.model_fields_set:
            _dict['options'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CollectSupportDataInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "options": obj.get("options")
        })
        return _obj


