# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EditNetworkSettingsInputProxyParams(BaseModel):
    """
    Proxy Setting details for a device
    """ # noqa: E501
    authentication_required: Optional[StrictStr] = Field(default=None, description="Is authentication required. Allowed values are enabled or disabled", alias="authenticationRequired")
    proxy_password: Optional[StrictStr] = Field(default=None, description="Password for authentication. (Required only if Authentication required is enabled). This field is deprecated", alias="proxyPassword")
    proxy_port: Optional[StrictInt] = Field(default=None, description="Proxy Server Port. Allowed values are 1-65535", alias="proxyPort")
    proxy_protocol: Optional[StrictStr] = Field(default=None, description="Supported proxy protocols are HTTP, SOCKS4 and SOCKS5.", alias="proxyProtocol")
    proxy_server: Optional[StrictStr] = Field(default=None, description="Proxy server IP address", alias="proxyServer")
    proxy_user: Optional[StrictStr] = Field(default=None, description="Username for authentication. (Required only if Authentication required is enabled). This field is deprecated", alias="proxyUser")
    __properties: ClassVar[List[str]] = ["authenticationRequired", "proxyPassword", "proxyPort", "proxyProtocol", "proxyServer", "proxyUser"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EditNetworkSettingsInputProxyParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if authentication_required (nullable) is None
        # and model_fields_set contains the field
        if self.authentication_required is None and "authentication_required" in self.model_fields_set:
            _dict['authenticationRequired'] = None

        # set to None if proxy_password (nullable) is None
        # and model_fields_set contains the field
        if self.proxy_password is None and "proxy_password" in self.model_fields_set:
            _dict['proxyPassword'] = None

        # set to None if proxy_port (nullable) is None
        # and model_fields_set contains the field
        if self.proxy_port is None and "proxy_port" in self.model_fields_set:
            _dict['proxyPort'] = None

        # set to None if proxy_protocol (nullable) is None
        # and model_fields_set contains the field
        if self.proxy_protocol is None and "proxy_protocol" in self.model_fields_set:
            _dict['proxyProtocol'] = None

        # set to None if proxy_server (nullable) is None
        # and model_fields_set contains the field
        if self.proxy_server is None and "proxy_server" in self.model_fields_set:
            _dict['proxyServer'] = None

        # set to None if proxy_user (nullable) is None
        # and model_fields_set contains the field
        if self.proxy_user is None and "proxy_user" in self.model_fields_set:
            _dict['proxyUser'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EditNetworkSettingsInputProxyParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authenticationRequired": obj.get("authenticationRequired"),
            "proxyPassword": obj.get("proxyPassword"),
            "proxyPort": obj.get("proxyPort"),
            "proxyProtocol": obj.get("proxyProtocol"),
            "proxyServer": obj.get("proxyServer"),
            "proxyUser": obj.get("proxyUser")
        })
        return _obj


