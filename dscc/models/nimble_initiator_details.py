# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.nimble_common_resource_attributes import NimbleCommonResourceAttributes
from typing import Optional, Set
from typing_extensions import Self

class NimbleInitiatorDetails(BaseModel):
    """
    NimbleInitiatorDetails
    """ # noqa: E501
    access_protocol: Optional[StrictStr] = Field(default=None, description="Access protocol used by the initiator. Possible values: 'iscsi', 'fc'.")
    alias: Optional[StrictStr] = Field(default=None, description="Alias of the Fibre Channel initiator. Maximum alias length is 32 characters. Each initiator alias must have an associated WWPN specified using the 'wwpn' attribute.You can choose not to enter the WWPN for an initiator when using previously saved initiator alias.String of up to 32 alphanumeric characters, or one of $^-_.: cannot begin with non-alphanumeric character.")
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details")
    chapuser_id: Optional[StrictStr] = Field(default=None, description="Identifier for the CHAP user.")
    common_resource_attributes: Optional[NimbleCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object    ", alias="consoleUri")
    creation_time: Optional[StrictInt] = Field(default=None, description="Time when this initiator group was created. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    generation: Optional[StrictInt] = Field(default=None, description="A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.")
    id: Optional[StrictStr] = Field(default=None, description="Identifier for initiator. A 42 digit hexadecimal number.")
    initiator_group_id: Optional[StrictStr] = Field(default=None, description="Identifier of the initiator group that this initiator is assigned to. A 42 digit hexadecimal number.")
    initiator_group_name: Optional[StrictStr] = Field(default=None, description="Name of the initiator group that this initiator is assigned to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character")
    ip_address: Optional[StrictStr] = Field(default=None, description="IP address of the iSCSI initiator. Each initiator IP address must have an associated name specified using 'name' attribute.You can choose not to enter the name for an initiator if you prefer not to authenticate using both name and IP address, in this case the IQN name will be returned as '*'. Alphanumeric, hyphenated, colon or period separated string of up to 255 characters or '*'")
    iqn: Optional[StrictStr] = Field(default=None, description="IQN name of the iSCSI initiator. Each initiator IQN name must have an associated IP address specified using the 'ip_address' attribute.You can choose not to enter the IP address for an initiator if you prefer not to authenticate using both name and IP address,in this case the IP address will be returned as '*'.")
    label: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the iSCSI initiator. Label is required when creating iSCSI initiator. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    last_modified: Optional[StrictInt] = Field(default=None, description="Time when this initiator group was last modified.Seconds since last epoch i.e. 00:00 January 1, 1970.")
    override_existing_alias: Optional[StrictBool] = Field(default=None, description="Forcibly add Fibre Channel initiator to initiator group by updating or removing conflicting Fibre Channel initiator aliases. (this argument is deprecated)")
    request_uri: Optional[StrictStr] = Field(default=None, description="requestUri for detailed initiators object", alias="requestUri")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Link to the object URI", alias="resourceUri")
    sc_host_initiator_id: Optional[StrictStr] = Field(default=None, description="Host Service Initiator Id (this argument is deprecated)", alias="sc_HostInitiatorId")
    type: Optional[StrictStr] = Field(default=None, description="The type of resource")
    wwpn: Optional[StrictStr] = Field(default=None, description="WWPN (World Wide Port Name) of the Fibre Channel initiator. WWPN is required when creating a Fibre Channel initiator. Each initiator WWPN can have an associated alias specified using the 'alias' attribute. You can choose not to enter the alias for an initiator if you prefer not to assign an initiator alias. Eight bytes expressed in hex separated by colons.")
    __properties: ClassVar[List[str]] = ["access_protocol", "alias", "associated_links", "chapuser_id", "commonResourceAttributes", "consoleUri", "creation_time", "customerId", "generation", "id", "initiator_group_id", "initiator_group_name", "ip_address", "iqn", "label", "last_modified", "override_existing_alias", "requestUri", "resourceUri", "sc_HostInitiatorId", "type", "wwpn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleInitiatorDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associated_links'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # set to None if access_protocol (nullable) is None
        # and model_fields_set contains the field
        if self.access_protocol is None and "access_protocol" in self.model_fields_set:
            _dict['access_protocol'] = None

        # set to None if alias (nullable) is None
        # and model_fields_set contains the field
        if self.alias is None and "alias" in self.model_fields_set:
            _dict['alias'] = None

        # set to None if chapuser_id (nullable) is None
        # and model_fields_set contains the field
        if self.chapuser_id is None and "chapuser_id" in self.model_fields_set:
            _dict['chapuser_id'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if creation_time (nullable) is None
        # and model_fields_set contains the field
        if self.creation_time is None and "creation_time" in self.model_fields_set:
            _dict['creation_time'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if initiator_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_group_id is None and "initiator_group_id" in self.model_fields_set:
            _dict['initiator_group_id'] = None

        # set to None if initiator_group_name (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_group_name is None and "initiator_group_name" in self.model_fields_set:
            _dict['initiator_group_name'] = None

        # set to None if ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address is None and "ip_address" in self.model_fields_set:
            _dict['ip_address'] = None

        # set to None if iqn (nullable) is None
        # and model_fields_set contains the field
        if self.iqn is None and "iqn" in self.model_fields_set:
            _dict['iqn'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['last_modified'] = None

        # set to None if override_existing_alias (nullable) is None
        # and model_fields_set contains the field
        if self.override_existing_alias is None and "override_existing_alias" in self.model_fields_set:
            _dict['override_existing_alias'] = None

        # set to None if request_uri (nullable) is None
        # and model_fields_set contains the field
        if self.request_uri is None and "request_uri" in self.model_fields_set:
            _dict['requestUri'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if sc_host_initiator_id (nullable) is None
        # and model_fields_set contains the field
        if self.sc_host_initiator_id is None and "sc_host_initiator_id" in self.model_fields_set:
            _dict['sc_HostInitiatorId'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if wwpn (nullable) is None
        # and model_fields_set contains the field
        if self.wwpn is None and "wwpn" in self.model_fields_set:
            _dict['wwpn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleInitiatorDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_protocol": obj.get("access_protocol"),
            "alias": obj.get("alias"),
            "associated_links": [AssociatedLinksInner.from_dict(_item) for _item in obj["associated_links"]] if obj.get("associated_links") is not None else None,
            "chapuser_id": obj.get("chapuser_id"),
            "commonResourceAttributes": NimbleCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "creation_time": obj.get("creation_time"),
            "customerId": obj.get("customerId"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "initiator_group_id": obj.get("initiator_group_id"),
            "initiator_group_name": obj.get("initiator_group_name"),
            "ip_address": obj.get("ip_address"),
            "iqn": obj.get("iqn"),
            "label": obj.get("label"),
            "last_modified": obj.get("last_modified"),
            "override_existing_alias": obj.get("override_existing_alias"),
            "requestUri": obj.get("requestUri"),
            "resourceUri": obj.get("resourceUri"),
            "sc_HostInitiatorId": obj.get("sc_HostInitiatorId"),
            "type": obj.get("type"),
            "wwpn": obj.get("wwpn")
        })
        return _obj


