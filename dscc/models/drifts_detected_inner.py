# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dscc.models.drift_buckets_inner import DriftBucketsInner
from typing import Optional, Set
from typing_extensions import Self

class DriftsDetectedInner(BaseModel):
    """
    DriftsDetectedInner
    """ # noqa: E501
    actual_end_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Actual end time of the Drift.", alias="actualEndTime")
    actual_start_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Actual start time of the Drift.", alias="actualStartTime")
    avg90th_percentile: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="90th quantile of latency", alias="avg90thPercentile")
    drift_buckets: Optional[List[Optional[DriftBucketsInner]]] = Field(default=None, description="IO size buckets in which drifts are observed", alias="driftBuckets")
    end_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="End time of the Drift", alias="endTime")
    io_type: Optional[StrictStr] = Field(default=None, description="Drift detected in operation type", alias="ioType")
    latency_range_unit: Optional[StrictStr] = Field(default=None, description="Metric of the latency range", alias="latencyRangeUnit")
    max_latency_lower_range: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Floor of the latency bucket", alias="maxLatencyLowerRange")
    max_latency_upper_range: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ceiling of the latency bucket", alias="maxLatencyUpperRange")
    start_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Start time of the Drift", alias="startTime")
    updated: Optional[StrictBool] = Field(default=None, description="Specifies if the values are changed.")
    __properties: ClassVar[List[str]] = ["actualEndTime", "actualStartTime", "avg90thPercentile", "driftBuckets", "endTime", "ioType", "latencyRangeUnit", "maxLatencyLowerRange", "maxLatencyUpperRange", "startTime", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DriftsDetectedInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in drift_buckets (list)
        _items = []
        if self.drift_buckets:
            for _item in self.drift_buckets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['driftBuckets'] = _items
        # set to None if drift_buckets (nullable) is None
        # and model_fields_set contains the field
        if self.drift_buckets is None and "drift_buckets" in self.model_fields_set:
            _dict['driftBuckets'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DriftsDetectedInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actualEndTime": obj.get("actualEndTime"),
            "actualStartTime": obj.get("actualStartTime"),
            "avg90thPercentile": obj.get("avg90thPercentile"),
            "driftBuckets": [DriftBucketsInner.from_dict(_item) for _item in obj["driftBuckets"]] if obj.get("driftBuckets") is not None else None,
            "endTime": obj.get("endTime"),
            "ioType": obj.get("ioType"),
            "latencyRangeUnit": obj.get("latencyRangeUnit"),
            "maxLatencyLowerRange": obj.get("maxLatencyLowerRange"),
            "maxLatencyUpperRange": obj.get("maxLatencyUpperRange"),
            "startTime": obj.get("startTime"),
            "updated": obj.get("updated")
        })
        return _obj


