# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4Schedule(BaseModel):
    """
    Schedule created on application set
    """ # noqa: E501
    at_time: Optional[StrictInt] = Field(default=None, description="Time of the day when snapshot should be taken. If more than one snapshots in a day then untilTime specifies until what time snapshots should be taken", alias="atTime")
    customer_id: Optional[StrictStr] = Field(default=None, description="tenantId of resource", alias="customerId")
    day_of_month: Optional[StrictInt] = Field(default=None, description="Day of month that a scheduled task will execute. Allowed values are 1-28", alias="dayOfMonth")
    days: Optional[StrictStr] = Field(default=None, description="Days on which schedule task will run. Possible values: sunday,monday,tuesday,wednesday,thursday,friday,saturday")
    expire_secs: Optional[StrictInt] = Field(default=None, description="Expiration time in seconds", alias="expireSecs")
    generation: Optional[StrictInt] = Field(default=None, description="Generation value")
    id: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the resource")
    is_alert_enabled: Optional[StrictBool] = Field(default=None, description="Whether the schedule will generate an alert if it could not run.", alias="isAlertEnabled")
    is_paused: Optional[StrictBool] = Field(default=None, description="Whether the schedule has been paused.", alias="isPaused")
    is_remote: Optional[StrictBool] = Field(default=None, description="Specifies that this schedule is remote protection schedule", alias="isRemote")
    is_system_task: Optional[StrictBool] = Field(default=None, description="Whether the schedule is a system created one.", alias="isSystemTask")
    name: Optional[StrictStr] = Field(default=None, description="Name of the resource")
    next_run_time: Optional[StrictInt] = Field(default=None, description="The next time a schedule will run", alias="nextRunTime")
    period: Optional[StrictInt] = Field(default=None, description="Time interval for schedule task to run. Possible values:               - hours: 1,2,3,4,6,8,12               - minutes: 15,20,30               - days & months: 1")
    period_unit: Optional[StrictStr] = Field(default=None, description="Unit of time in which period is defined. Possible values: minutes, hours, days, months", alias="periodUnit")
    retain_secs: Optional[StrictInt] = Field(default=None, description="Retention time in seconds.", alias="retainSecs")
    status: Optional[StrictStr] = Field(default=None, description="Whether the schedule task is active or has been suspended")
    system_wwn: Optional[StrictStr] = Field(default=None, description="WWN of the array", alias="systemWwn")
    type: Optional[StrictStr] = Field(default=None, description="Type of object")
    until_time: Optional[StrictInt] = Field(default=None, description="Time of the day to stop taking snapshots. Applicable only when more than one snapshots should be taken in a day.", alias="untilTime")
    user: Optional[StrictStr] = Field(default=None, description="The user that created the schedule.")
    __properties: ClassVar[List[str]] = ["atTime", "customerId", "dayOfMonth", "days", "expireSecs", "generation", "id", "isAlertEnabled", "isPaused", "isRemote", "isSystemTask", "name", "nextRunTime", "period", "periodUnit", "retainSecs", "status", "systemWwn", "type", "untilTime", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4Schedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if at_time (nullable) is None
        # and model_fields_set contains the field
        if self.at_time is None and "at_time" in self.model_fields_set:
            _dict['atTime'] = None

        # set to None if day_of_month (nullable) is None
        # and model_fields_set contains the field
        if self.day_of_month is None and "day_of_month" in self.model_fields_set:
            _dict['dayOfMonth'] = None

        # set to None if expire_secs (nullable) is None
        # and model_fields_set contains the field
        if self.expire_secs is None and "expire_secs" in self.model_fields_set:
            _dict['expireSecs'] = None

        # set to None if retain_secs (nullable) is None
        # and model_fields_set contains the field
        if self.retain_secs is None and "retain_secs" in self.model_fields_set:
            _dict['retainSecs'] = None

        # set to None if until_time (nullable) is None
        # and model_fields_set contains the field
        if self.until_time is None and "until_time" in self.model_fields_set:
            _dict['untilTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4Schedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "atTime": obj.get("atTime"),
            "customerId": obj.get("customerId"),
            "dayOfMonth": obj.get("dayOfMonth"),
            "days": obj.get("days"),
            "expireSecs": obj.get("expireSecs"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "isAlertEnabled": obj.get("isAlertEnabled"),
            "isPaused": obj.get("isPaused"),
            "isRemote": obj.get("isRemote"),
            "isSystemTask": obj.get("isSystemTask"),
            "name": obj.get("name"),
            "nextRunTime": obj.get("nextRunTime"),
            "period": obj.get("period"),
            "periodUnit": obj.get("periodUnit"),
            "retainSecs": obj.get("retainSecs"),
            "status": obj.get("status"),
            "systemWwn": obj.get("systemWwn"),
            "type": obj.get("type"),
            "untilTime": obj.get("untilTime"),
            "user": obj.get("user")
        })
        return _obj


