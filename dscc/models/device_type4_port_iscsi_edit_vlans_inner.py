# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4PortISCSIEditVlansInner(BaseModel):
    """
    DeviceType4PortISCSIEditVlansInner
    """ # noqa: E501
    gateway_address: Optional[StrictStr] = Field(default=None, description="Gateway address for the iSCSI port. If you are configuring VLAN then this is the VLAN Gateway for this port. If you want to clear or don't want to set the gateway address, then the gateway address should be 0.0.0.0.Configuring the gateway address supported from OS version 10.3.0.", alias="gatewayAddress")
    gateway_address_v6: Optional[StrictStr] = Field(default=None, description="Gateway address for the iSCSI port. If you are configuring VLAN then this is the VLAN Gateway for this port. Configuring the IPV6 gateway address supported from OS version 10.4.0.", alias="gatewayAddressV6")
    ip_address: Optional[StrictStr] = Field(default=None, description="IP address for the iSCSI port. If you are configuring VLAN then this is the VLAN IP address for this port.", alias="ipAddress")
    ip_address_v6: Optional[StrictStr] = Field(default=None, description="IPv6 address for the iSCSI port. If you are configuring VLAN then this is the VLAN IPv6 address for this port. Configuring IPv6 address is supported from OS version 10.4.0.", alias="ipAddressV6")
    net_mask: Optional[StrictStr] = Field(default=None, description="NetMask for the iSCSI port. If you are configuring VLAN then this is the VLAN Netmask for this port.", alias="netMask")
    net_mask_v6: Optional[StrictStr] = Field(default=None, description="NetMask for the iSCSI port. If you are configuring VLAN then this is the VLAN Netmask for this port. Configuring this is supported from OS version 10.4.0.", alias="netMaskV6")
    send_target_group_tag: Optional[StrictInt] = Field(default=None, description="The SendTargets Group Tag (STGT) for the iSCSI port", alias="sendTargetGroupTag")
    vlan_id: Optional[StrictStr] = Field(default=None, description="VLAN id for the iSCSI port. Value ranges between 1 to 4096", alias="vlanId")
    __properties: ClassVar[List[str]] = ["gatewayAddress", "gatewayAddressV6", "ipAddress", "ipAddressV6", "netMask", "netMaskV6", "sendTargetGroupTag", "vlanId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4PortISCSIEditVlansInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if gateway_address (nullable) is None
        # and model_fields_set contains the field
        if self.gateway_address is None and "gateway_address" in self.model_fields_set:
            _dict['gatewayAddress'] = None

        # set to None if gateway_address_v6 (nullable) is None
        # and model_fields_set contains the field
        if self.gateway_address_v6 is None and "gateway_address_v6" in self.model_fields_set:
            _dict['gatewayAddressV6'] = None

        # set to None if ip_address_v6 (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address_v6 is None and "ip_address_v6" in self.model_fields_set:
            _dict['ipAddressV6'] = None

        # set to None if net_mask_v6 (nullable) is None
        # and model_fields_set contains the field
        if self.net_mask_v6 is None and "net_mask_v6" in self.model_fields_set:
            _dict['netMaskV6'] = None

        # set to None if send_target_group_tag (nullable) is None
        # and model_fields_set contains the field
        if self.send_target_group_tag is None and "send_target_group_tag" in self.model_fields_set:
            _dict['sendTargetGroupTag'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4PortISCSIEditVlansInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gatewayAddress": obj.get("gatewayAddress"),
            "gatewayAddressV6": obj.get("gatewayAddressV6"),
            "ipAddress": obj.get("ipAddress"),
            "ipAddressV6": obj.get("ipAddressV6"),
            "netMask": obj.get("netMask"),
            "netMaskV6": obj.get("netMaskV6"),
            "sendTargetGroupTag": obj.get("sendTargetGroupTag"),
            "vlanId": obj.get("vlanId")
        })
        return _obj


