# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleEditPerformancePolicyInput(BaseModel):
    """
    Edit Nimble / Alletra 6K performance policy.
    """ # noqa: E501
    app_category: Optional[StrictStr] = Field(default=None, description="Specifies the application category of the associated volume. Plain string. Defaults to 'Unassigned'.")
    cache: Optional[StrictBool] = Field(default=None, description="Flag denoting if data in the associated volume should be cached. Defaults to 'true'.")
    cache_policy: Optional[StrictStr] = Field(default=None, description="Specifies how data of associated volume should be cached. Supports two policies, 'normal' and 'aggressive'. 'normal' policy caches data but skips in certain conditions such as sequential I/O. 'aggressive' policy will accelerate caching of all data belonging to this volume, regardless of sequentiality. Possible values:'normal', 'no_write', 'aggressive_read_no_write', 'disabled', 'aggressive'. Defaults to 'normal'.")
    compress: Optional[StrictBool] = Field(default=None, description="Flag denoting if data in the associated volume should be compressed. Defaults to 'true'.")
    dedupe_enabled: Optional[StrictBool] = Field(default=None, description="Specifies if dedupe is enabled for volumes created with this performance policy.")
    description: Optional[StrictStr] = Field(default=None, description="Description of a performance policy. String of up to 255 printable ASCII characters.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the Performance Policy. String of up to 64 alphanumeric characters, - and . and : and space are allowed after first character.")
    space_policy: Optional[StrictStr] = Field(default=None, description="Specifies the state of the volume upon space constraint violation such as volume limit violation or volumes above their volume reserve, if the pool free space is exhausted. Supports two policies, 'offline' and 'non_writable'. Possible values:'offline', 'login_only', 'non_writable', 'read_only', 'invalid'. Defaults to 'offline'.")
    __properties: ClassVar[List[str]] = ["app_category", "cache", "cache_policy", "compress", "dedupe_enabled", "description", "name", "space_policy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleEditPerformancePolicyInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if app_category (nullable) is None
        # and model_fields_set contains the field
        if self.app_category is None and "app_category" in self.model_fields_set:
            _dict['app_category'] = None

        # set to None if cache (nullable) is None
        # and model_fields_set contains the field
        if self.cache is None and "cache" in self.model_fields_set:
            _dict['cache'] = None

        # set to None if cache_policy (nullable) is None
        # and model_fields_set contains the field
        if self.cache_policy is None and "cache_policy" in self.model_fields_set:
            _dict['cache_policy'] = None

        # set to None if compress (nullable) is None
        # and model_fields_set contains the field
        if self.compress is None and "compress" in self.model_fields_set:
            _dict['compress'] = None

        # set to None if dedupe_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_enabled is None and "dedupe_enabled" in self.model_fields_set:
            _dict['dedupe_enabled'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if space_policy (nullable) is None
        # and model_fields_set contains the field
        if self.space_policy is None and "space_policy" in self.model_fields_set:
            _dict['space_policy'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleEditPerformancePolicyInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_category": obj.get("app_category"),
            "cache": obj.get("cache"),
            "cache_policy": obj.get("cache_policy"),
            "compress": obj.get("compress"),
            "dedupe_enabled": obj.get("dedupe_enabled"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "space_policy": obj.get("space_policy")
        })
        return _obj


