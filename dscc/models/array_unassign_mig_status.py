# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.nimble_arr_summary import NimbleArrSummary
from typing import Optional, Set
from typing_extensions import Self

class ArrayUnassignMigStatus(BaseModel):
    """
    Data migration status for array being unassigned from its pool.
    """ # noqa: E501
    bytes_migrated: Optional[StrictInt] = Field(default=None, description="Number of bytes already migrated to the destination arrays.")
    bytes_remaining: Optional[StrictInt] = Field(default=None, description="Number of bytes yet to be migrated to the destination arrays.")
    destination_arrays: Optional[List[Optional[NimbleArrSummary]]] = Field(default=None, description="List of arrays to which data is being migrated.")
    estimated_completion_time: Optional[StrictInt] = Field(default=None, description="Estimated completion time. 0 if unknown.")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the array being unassigned.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the array being unassigned.")
    start_time: Optional[StrictInt] = Field(default=None, description="Time when array unassign operation started.")
    __properties: ClassVar[List[str]] = ["bytes_migrated", "bytes_remaining", "destination_arrays", "estimated_completion_time", "id", "name", "start_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArrayUnassignMigStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in destination_arrays (list)
        _items = []
        if self.destination_arrays:
            for _item in self.destination_arrays:
                if _item:
                    _items.append(_item.to_dict())
            _dict['destination_arrays'] = _items
        # set to None if bytes_migrated (nullable) is None
        # and model_fields_set contains the field
        if self.bytes_migrated is None and "bytes_migrated" in self.model_fields_set:
            _dict['bytes_migrated'] = None

        # set to None if bytes_remaining (nullable) is None
        # and model_fields_set contains the field
        if self.bytes_remaining is None and "bytes_remaining" in self.model_fields_set:
            _dict['bytes_remaining'] = None

        # set to None if destination_arrays (nullable) is None
        # and model_fields_set contains the field
        if self.destination_arrays is None and "destination_arrays" in self.model_fields_set:
            _dict['destination_arrays'] = None

        # set to None if estimated_completion_time (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_completion_time is None and "estimated_completion_time" in self.model_fields_set:
            _dict['estimated_completion_time'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['start_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArrayUnassignMigStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bytes_migrated": obj.get("bytes_migrated"),
            "bytes_remaining": obj.get("bytes_remaining"),
            "destination_arrays": [NimbleArrSummary.from_dict(_item) for _item in obj["destination_arrays"]] if obj.get("destination_arrays") is not None else None,
            "estimated_completion_time": obj.get("estimated_completion_time"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "start_time": obj.get("start_time")
        })
        return _obj


