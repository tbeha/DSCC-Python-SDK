# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.nimble_common_resource_attributes import NimbleCommonResourceAttributes
from typing import Optional, Set
from typing_extensions import Self

class ExternalKeyManager(BaseModel):
    """
    ExternalKeyManager
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Identifier for the external key manager. A 42 digit hexadecimal number. `Filter`")
    name: Optional[StrictStr] = Field(default='default', description="Name of external key manager. `Filter, Sort`")
    system_id: Optional[StrictStr] = Field(default=None, description="Id of the storage system", alias="systemId")
    active: Optional[StrictBool] = Field(default=None, description="Indicates if the external key manager is active or not")
    common_resource_attributes: Optional[NimbleCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    description: Optional[StrictStr] = Field(default=None, description="String of up to 255 printable ASCII characters. Example: '99.9999% availability'.")
    hostname: Optional[StrictStr] = Field(default=None, description="Hostname of the external key manager")
    port: Optional[StrictInt] = Field(default=None, description="Positive integer value up to 65535 representing External key manager port.")
    protocol: Optional[StrictStr] = Field(default=None, description="Possible values: 'KMIP1_0', 'KMIP1_1', 'KMIP1_2', 'KMIP1_3'.")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Link to the object URI", alias="resourceUri")
    status: Optional[StrictStr] = Field(default=None, description="status")
    username: Optional[StrictStr] = Field(default=None, description="External key manager username. String of up to 255 printable ASCII characters.")
    __properties: ClassVar[List[str]] = ["id", "name", "systemId", "active", "commonResourceAttributes", "consoleUri", "description", "hostname", "port", "protocol", "resourceUri", "status", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternalKeyManager from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if active (nullable) is None
        # and model_fields_set contains the field
        if self.active is None and "active" in self.model_fields_set:
            _dict['active'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternalKeyManager from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name") if obj.get("name") is not None else 'default',
            "systemId": obj.get("systemId"),
            "active": obj.get("active"),
            "commonResourceAttributes": NimbleCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "description": obj.get("description"),
            "hostname": obj.get("hostname"),
            "port": obj.get("port"),
            "protocol": obj.get("protocol"),
            "resourceUri": obj.get("resourceUri"),
            "status": obj.get("status"),
            "username": obj.get("username")
        })
        return _obj


