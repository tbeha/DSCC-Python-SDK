# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleEditFolderInput(BaseModel):
    """
    Edit Nimble / Alletra 6K Folder input.
    """ # noqa: E501
    appserver_id: Optional[StrictStr] = Field(default=None, description="Identifier of the application server associated with the folder.")
    description: Optional[StrictStr] = Field(default=None, description="Text description of folder.")
    inherited_vol_perfpol_id: Optional[StrictStr] = Field(default=None, description="Identifier of the default performance policy for a newly created volume.")
    limit_iops: Optional[StrictInt] = Field(default=None, description="IOPS limit for this folder. If limit_iops is not specified when a folder is created, or if limit_iops is set to -1, then the folder has no IOPS limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited.")
    limit_mbps: Optional[StrictInt] = Field(default=None, description="Throughput limit for this folder in MB/s. If limit_mbps is not specified when a folder is created, or if limit_mbps is set to -1, then the folder has no throughput limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited.")
    limit_size_bytes: Optional[StrictInt] = Field(default=None, description="Folder size limit in bytes. If limit_size_bytes is not specified when a folder is created, or if limit_size_bytes is set to -1, then the folder has no limit. Otherwise, a limit smaller than the capacity of the pool can be set. Folders with an agent_type of 'smis' or 'vvol' must have a size limit.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the folder.")
    overdraft_limit_pct: Optional[StrictInt] = Field(default=None, description="Amount of space to consider as overdraft range for this folder as a percentage of folder used limit. Valid values are from 0% - 200%. This is the limit above the folder usage limit beyond which enforcement action(volume offline/non-writable) is issued.")
    provisioned_limit_size_bytes: Optional[StrictInt] = Field(default=None, description="Limit on the provisioned size of volumes in a folder. If provisioned_limit_size_bytes is not specified when a folder is created, or if provisioned_limit_size_bytes is set to -1, then the folder has no provisioned size limit.")
    __properties: ClassVar[List[str]] = ["appserver_id", "description", "inherited_vol_perfpol_id", "limit_iops", "limit_mbps", "limit_size_bytes", "name", "overdraft_limit_pct", "provisioned_limit_size_bytes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleEditFolderInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if appserver_id (nullable) is None
        # and model_fields_set contains the field
        if self.appserver_id is None and "appserver_id" in self.model_fields_set:
            _dict['appserver_id'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if inherited_vol_perfpol_id (nullable) is None
        # and model_fields_set contains the field
        if self.inherited_vol_perfpol_id is None and "inherited_vol_perfpol_id" in self.model_fields_set:
            _dict['inherited_vol_perfpol_id'] = None

        # set to None if limit_iops (nullable) is None
        # and model_fields_set contains the field
        if self.limit_iops is None and "limit_iops" in self.model_fields_set:
            _dict['limit_iops'] = None

        # set to None if limit_mbps (nullable) is None
        # and model_fields_set contains the field
        if self.limit_mbps is None and "limit_mbps" in self.model_fields_set:
            _dict['limit_mbps'] = None

        # set to None if limit_size_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.limit_size_bytes is None and "limit_size_bytes" in self.model_fields_set:
            _dict['limit_size_bytes'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if overdraft_limit_pct (nullable) is None
        # and model_fields_set contains the field
        if self.overdraft_limit_pct is None and "overdraft_limit_pct" in self.model_fields_set:
            _dict['overdraft_limit_pct'] = None

        # set to None if provisioned_limit_size_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.provisioned_limit_size_bytes is None and "provisioned_limit_size_bytes" in self.model_fields_set:
            _dict['provisioned_limit_size_bytes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleEditFolderInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appserver_id": obj.get("appserver_id"),
            "description": obj.get("description"),
            "inherited_vol_perfpol_id": obj.get("inherited_vol_perfpol_id"),
            "limit_iops": obj.get("limit_iops"),
            "limit_mbps": obj.get("limit_mbps"),
            "limit_size_bytes": obj.get("limit_size_bytes"),
            "name": obj.get("name"),
            "overdraft_limit_pct": obj.get("overdraft_limit_pct"),
            "provisioned_limit_size_bytes": obj.get("provisioned_limit_size_bytes")
        })
        return _obj


