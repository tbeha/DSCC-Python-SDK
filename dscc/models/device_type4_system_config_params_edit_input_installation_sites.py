# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4SystemConfigParamsEditInputInstallationSites(BaseModel):
    """
    DeviceType4SystemConfigParamsEditInputInstallationSites
    """ # noqa: E501
    city: Optional[StrictStr] = Field(default=None, description="City of the installation site")
    company: Optional[StrictStr] = Field(default=None, description="Company name of the installation site")
    country: Optional[StrictStr] = Field(default=None, description="Country of the installation site")
    postal_code: Optional[StrictStr] = Field(default=None, description="Postal code of the installation site", alias="postalCode")
    set_system_location: Optional[StrictBool] = Field(default=None, description="Apply system location to the system descriptor property", alias="setSystemLocation")
    state: Optional[StrictStr] = Field(default=None, description="State of the installation site")
    street_address: Optional[StrictStr] = Field(default=None, description="Street address of the installation site", alias="streetAddress")
    support_provider: Optional[StrictStr] = Field(default=None, description="Support provider of the installation site", alias="supportProvider")
    __properties: ClassVar[List[str]] = ["city", "company", "country", "postalCode", "setSystemLocation", "state", "streetAddress", "supportProvider"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4SystemConfigParamsEditInputInstallationSites from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if company (nullable) is None
        # and model_fields_set contains the field
        if self.company is None and "company" in self.model_fields_set:
            _dict['company'] = None

        # set to None if postal_code (nullable) is None
        # and model_fields_set contains the field
        if self.postal_code is None and "postal_code" in self.model_fields_set:
            _dict['postalCode'] = None

        # set to None if set_system_location (nullable) is None
        # and model_fields_set contains the field
        if self.set_system_location is None and "set_system_location" in self.model_fields_set:
            _dict['setSystemLocation'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if street_address (nullable) is None
        # and model_fields_set contains the field
        if self.street_address is None and "street_address" in self.model_fields_set:
            _dict['streetAddress'] = None

        # set to None if support_provider (nullable) is None
        # and model_fields_set contains the field
        if self.support_provider is None and "support_provider" in self.model_fields_set:
            _dict['supportProvider'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4SystemConfigParamsEditInputInstallationSites from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "city": obj.get("city"),
            "company": obj.get("company"),
            "country": obj.get("country"),
            "postalCode": obj.get("postalCode"),
            "setSystemLocation": obj.get("setSystemLocation"),
            "state": obj.get("state"),
            "streetAddress": obj.get("streetAddress"),
            "supportProvider": obj.get("supportProvider")
        })
        return _obj


