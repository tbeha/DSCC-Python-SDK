# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.device_type4_cert_subject_alt_name import DeviceType4CertSubjectAltName
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4CreateCertificateInput(BaseModel):
    """
    Create Certificate input.
    """ # noqa: E501
    authority_chain: Optional[StrictStr] = Field(default=None, description="The authority chain for Quorum Witness server certificate.", alias="authorityChain")
    common_name: Optional[StrictStr] = Field(default=None, description="CommonName for the certificate.", alias="commonName")
    country: Optional[StrictStr] = Field(default=None, description="Two-letter code for the country where organization is located.")
    days: Optional[StrictInt] = Field(default=None, description="Number of days valid for the certificate.")
    key_length: Optional[StrictInt] = Field(default=None, description="Key length for the certificate.", alias="keyLength")
    locality: Optional[StrictStr] = Field(default=None, description="Locality where organization is located.")
    organization: Optional[StrictStr] = Field(default=None, description="Organization for the certificate")
    organization_unit: Optional[StrictStr] = Field(default=None, description="Division of organization handling the certificate.", alias="organizationUnit")
    province: Optional[StrictStr] = Field(default=None, description="Province where organization is located.")
    service: StrictStr = Field(description="Name of service the certificate is for.")
    subject_alt_name: Optional[DeviceType4CertSubjectAltName] = Field(default=None, alias="subjectAltName")
    type: StrictStr = Field(description="Type of certificate to create.")
    __properties: ClassVar[List[str]] = ["authorityChain", "commonName", "country", "days", "keyLength", "locality", "organization", "organizationUnit", "province", "service", "subjectAltName", "type"]

    @field_validator('service')
    def service_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['QW_CLIENT', 'QW_SERVER', 'WSAPI', 'CLI', 'CIM', 'VASA', 'EKM_CLIENT', 'SYSLOG_GEN_CLIENT', 'SYSLOG_SEC_CLIENT', 'UNIFIED_SERVER', 'EKM_SERVER']):
            raise ValueError("must be one of enum values ('QW_CLIENT', 'QW_SERVER', 'WSAPI', 'CLI', 'CIM', 'VASA', 'EKM_CLIENT', 'SYSLOG_GEN_CLIENT', 'SYSLOG_SEC_CLIENT', 'UNIFIED_SERVER', 'EKM_SERVER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4CreateCertificateInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of subject_alt_name
        if self.subject_alt_name:
            _dict['subjectAltName'] = self.subject_alt_name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4CreateCertificateInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorityChain": obj.get("authorityChain"),
            "commonName": obj.get("commonName"),
            "country": obj.get("country"),
            "days": obj.get("days"),
            "keyLength": obj.get("keyLength"),
            "locality": obj.get("locality"),
            "organization": obj.get("organization"),
            "organizationUnit": obj.get("organizationUnit"),
            "province": obj.get("province"),
            "service": obj.get("service"),
            "subjectAltName": DeviceType4CertSubjectAltName.from_dict(obj["subjectAltName"]) if obj.get("subjectAltName") is not None else None,
            "type": obj.get("type")
        })
        return _obj


