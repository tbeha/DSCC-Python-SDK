# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.device_type4_host_agent_last_updated import DeviceType4HostAgentLastUpdated
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4HostAgent(BaseModel):
    """
    HPE Alletra Storage MP Host Agent
    """ # noqa: E501
    ip_addr: Optional[StrictStr] = Field(default=None, description="Ip Address", alias="IPAddr")
    architecture: Optional[StrictStr] = Field(default=None, description="Architecture Name")
    boot_from_san: Optional[StrictStr] = Field(default=None, description="Boot from SAN", alias="bootFromSan")
    cluster_id: Optional[StrictStr] = Field(default=None, description="Cluster ID ", alias="clusterID")
    cluster_name: Optional[StrictStr] = Field(default=None, description="Cluster Cluster", alias="clusterName")
    cluster_software: Optional[StrictStr] = Field(default=None, description="Cluster OS", alias="clusterSoftware")
    cluster_version: Optional[StrictStr] = Field(default=None, description="Cluster Version ", alias="clusterVersion")
    host_apps: Optional[StrictStr] = Field(default=None, description="Host Applications", alias="hostApps")
    last_updated: Optional[DeviceType4HostAgentLastUpdated] = Field(default=None, alias="lastUpdated")
    multi_path_software: Optional[StrictStr] = Field(default=None, description="Multipath Software", alias="multiPathSoftware")
    multi_path_software_version: Optional[StrictStr] = Field(default=None, description="MultiPath Software Version", alias="multiPathSoftwareVersion")
    os: Optional[StrictStr] = Field(default=None, description="Operating System Name")
    os_patch: Optional[StrictStr] = Field(default=None, description="Os patch", alias="osPatch")
    os_version: Optional[StrictStr] = Field(default=None, description="Os version", alias="osVersion")
    reported_name: Optional[StrictStr] = Field(default=None, description="Reported Name", alias="reportedName")
    __properties: ClassVar[List[str]] = ["IPAddr", "architecture", "bootFromSan", "clusterID", "clusterName", "clusterSoftware", "clusterVersion", "hostApps", "lastUpdated", "multiPathSoftware", "multiPathSoftwareVersion", "os", "osPatch", "osVersion", "reportedName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4HostAgent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_updated
        if self.last_updated:
            _dict['lastUpdated'] = self.last_updated.to_dict()
        # set to None if ip_addr (nullable) is None
        # and model_fields_set contains the field
        if self.ip_addr is None and "ip_addr" in self.model_fields_set:
            _dict['IPAddr'] = None

        # set to None if architecture (nullable) is None
        # and model_fields_set contains the field
        if self.architecture is None and "architecture" in self.model_fields_set:
            _dict['architecture'] = None

        # set to None if boot_from_san (nullable) is None
        # and model_fields_set contains the field
        if self.boot_from_san is None and "boot_from_san" in self.model_fields_set:
            _dict['bootFromSan'] = None

        # set to None if cluster_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_id is None and "cluster_id" in self.model_fields_set:
            _dict['clusterID'] = None

        # set to None if cluster_name (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_name is None and "cluster_name" in self.model_fields_set:
            _dict['clusterName'] = None

        # set to None if cluster_software (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_software is None and "cluster_software" in self.model_fields_set:
            _dict['clusterSoftware'] = None

        # set to None if cluster_version (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_version is None and "cluster_version" in self.model_fields_set:
            _dict['clusterVersion'] = None

        # set to None if host_apps (nullable) is None
        # and model_fields_set contains the field
        if self.host_apps is None and "host_apps" in self.model_fields_set:
            _dict['hostApps'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['lastUpdated'] = None

        # set to None if multi_path_software (nullable) is None
        # and model_fields_set contains the field
        if self.multi_path_software is None and "multi_path_software" in self.model_fields_set:
            _dict['multiPathSoftware'] = None

        # set to None if multi_path_software_version (nullable) is None
        # and model_fields_set contains the field
        if self.multi_path_software_version is None and "multi_path_software_version" in self.model_fields_set:
            _dict['multiPathSoftwareVersion'] = None

        # set to None if os (nullable) is None
        # and model_fields_set contains the field
        if self.os is None and "os" in self.model_fields_set:
            _dict['os'] = None

        # set to None if os_patch (nullable) is None
        # and model_fields_set contains the field
        if self.os_patch is None and "os_patch" in self.model_fields_set:
            _dict['osPatch'] = None

        # set to None if os_version (nullable) is None
        # and model_fields_set contains the field
        if self.os_version is None and "os_version" in self.model_fields_set:
            _dict['osVersion'] = None

        # set to None if reported_name (nullable) is None
        # and model_fields_set contains the field
        if self.reported_name is None and "reported_name" in self.model_fields_set:
            _dict['reportedName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4HostAgent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "IPAddr": obj.get("IPAddr"),
            "architecture": obj.get("architecture"),
            "bootFromSan": obj.get("bootFromSan"),
            "clusterID": obj.get("clusterID"),
            "clusterName": obj.get("clusterName"),
            "clusterSoftware": obj.get("clusterSoftware"),
            "clusterVersion": obj.get("clusterVersion"),
            "hostApps": obj.get("hostApps"),
            "lastUpdated": DeviceType4HostAgentLastUpdated.from_dict(obj["lastUpdated"]) if obj.get("lastUpdated") is not None else None,
            "multiPathSoftware": obj.get("multiPathSoftware"),
            "multiPathSoftwareVersion": obj.get("multiPathSoftwareVersion"),
            "os": obj.get("os"),
            "osPatch": obj.get("osPatch"),
            "osVersion": obj.get("osVersion"),
            "reportedName": obj.get("reportedName")
        })
        return _obj


