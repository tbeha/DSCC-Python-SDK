# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.edit_source_partner import EditSourcePartner
from dscc.models.edit_target_partner import EditTargetPartner
from dscc.models.replication_throttle import ReplicationThrottle
from typing import Optional, Set
from typing_extensions import Self

class EditReplicationPartner(BaseModel):
    """
    The request body for replication partner.
    """ # noqa: E501
    control_port: Optional[StrictInt] = Field(default=None, description="Port number of partner control interface. Positive integer value up to 65535 representing TCP/IP port.")
    data_port: Optional[StrictInt] = Field(default=None, description="Port number of partner data interface. Positive integer value up to 65535 representing TCP/IP port.")
    description: Optional[StrictStr] = Field(default=None, description="Description of replication partner. String of up to 255 printable ASCII characters.")
    remote_partner_id: Optional[StrictStr] = Field(default=None, description="Remote replication partner ID", alias="remotePartnerId")
    repl_hostname: Optional[StrictStr] = Field(default=None, description="IP address or hostname of partner data interface. String of up to 64 alphanumeric characters, - and . and colon are allowed after first character.")
    source: Optional[EditSourcePartner] = None
    subnet_label: Optional[StrictStr] = Field(default=None, description="Label of the subnet used to replicate to this partner. String of up to 64 alphanumeric characters, - and . and colon are allowed after first character.")
    subnet_type: Optional[StrictStr] = Field(default=None, description="Type of the subnet used to replicate to this partner. Possible values are 'invalid', 'unconfigured', 'mgmt', 'data', 'mgmt_data'.")
    target: Optional[EditTargetPartner] = None
    target_system_id: Optional[StrictStr] = Field(default=None, description="Target system ID", alias="targetSystemId")
    throttles: Optional[List[Optional[ReplicationThrottle]]] = Field(default=None, description="Throttles used while replicating from/to this partner. All the throttles for the partner.")
    __properties: ClassVar[List[str]] = ["control_port", "data_port", "description", "remotePartnerId", "repl_hostname", "source", "subnet_label", "subnet_type", "target", "targetSystemId", "throttles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EditReplicationPartner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in throttles (list)
        _items = []
        if self.throttles:
            for _item in self.throttles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['throttles'] = _items
        # set to None if control_port (nullable) is None
        # and model_fields_set contains the field
        if self.control_port is None and "control_port" in self.model_fields_set:
            _dict['control_port'] = None

        # set to None if data_port (nullable) is None
        # and model_fields_set contains the field
        if self.data_port is None and "data_port" in self.model_fields_set:
            _dict['data_port'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if remote_partner_id (nullable) is None
        # and model_fields_set contains the field
        if self.remote_partner_id is None and "remote_partner_id" in self.model_fields_set:
            _dict['remotePartnerId'] = None

        # set to None if repl_hostname (nullable) is None
        # and model_fields_set contains the field
        if self.repl_hostname is None and "repl_hostname" in self.model_fields_set:
            _dict['repl_hostname'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        # set to None if subnet_type (nullable) is None
        # and model_fields_set contains the field
        if self.subnet_type is None and "subnet_type" in self.model_fields_set:
            _dict['subnet_type'] = None

        # set to None if target (nullable) is None
        # and model_fields_set contains the field
        if self.target is None and "target" in self.model_fields_set:
            _dict['target'] = None

        # set to None if target_system_id (nullable) is None
        # and model_fields_set contains the field
        if self.target_system_id is None and "target_system_id" in self.model_fields_set:
            _dict['targetSystemId'] = None

        # set to None if throttles (nullable) is None
        # and model_fields_set contains the field
        if self.throttles is None and "throttles" in self.model_fields_set:
            _dict['throttles'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EditReplicationPartner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "control_port": obj.get("control_port"),
            "data_port": obj.get("data_port"),
            "description": obj.get("description"),
            "remotePartnerId": obj.get("remotePartnerId"),
            "repl_hostname": obj.get("repl_hostname"),
            "source": EditSourcePartner.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "subnet_label": obj.get("subnet_label"),
            "subnet_type": obj.get("subnet_type"),
            "target": EditTargetPartner.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "targetSystemId": obj.get("targetSystemId"),
            "throttles": [ReplicationThrottle.from_dict(_item) for _item in obj["throttles"]] if obj.get("throttles") is not None else None
        })
        return _obj


