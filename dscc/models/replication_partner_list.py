# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.device_type4_replication_partner_list_policies import DeviceType4ReplicationPartnerListPolicies
from dscc.models.primera_common_resource_attributes import PrimeraCommonResourceAttributes
from dscc.models.sync_time import SyncTime
from typing import Optional, Set
from typing_extensions import Self

class ReplicationPartnerList(BaseModel):
    """
    ReplicationPartnerList
    """ # noqa: E501
    common_resource_attributes: Optional[PrimeraCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    customer_id: Optional[StrictStr] = Field(default=None, description="customer ID", alias="customerId")
    display_name: Optional[StrictStr] = Field(default=None, description="Replication partner display name.", alias="displayName")
    domain: Optional[StrictStr] = Field(default=None, description="Domain that the resource belongs to.")
    dr_state: Optional[StrictStr] = Field(default=None, description="Specifies replication disaster recovery state of a protected volume set.  Possible values: Normal, Failover, Recover, Unknown The disaster recovery state is Unknown for any intermediate state.", alias="drState")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    group_id: Optional[StrictStr] = Field(default=None, description="Unique id of replication partner remote group", alias="groupId")
    group_last_sync_time: Optional[SyncTime] = Field(default=None, alias="groupLastSyncTime")
    group_name: Optional[StrictStr] = Field(default=None, description="Replication partner remote group name.", alias="groupName")
    group_object_id: Optional[StrictInt] = Field(default=None, description="Replication partner group ID.", alias="groupObjectId")
    id: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the replication partner.")
    is_protection_policy_configured: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate if protection policy is properly configured on the volume set. If it is set to false, user needs to either delete the policy or fix the policy configuration. All other operations will be blocked in this scenario.", alias="isProtectionPolicyConfigured")
    is_remote_array_support_replication: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate if remote array OS version supports replication", alias="isRemoteArraySupportReplication")
    is_source_array_support_replication: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate if source array OS version supports replication", alias="isSourceArraySupportReplication")
    mode: Optional[StrictStr] = Field(default=None, description="Replication partner group mode.")
    policies: Optional[DeviceType4ReplicationPartnerListPolicies] = None
    protection_type: Optional[StrictStr] = Field(default=None, description="Type of protection", alias="protectionType")
    remote_role: Optional[StrictStr] = Field(default=None, description="Specifies remote copy role for a restore point of a protected volume set. In case of synchronous and asynchronous protection polices, restore point is the volume set on the replication partner/target array. Possible values: Primary, Secondary, Primary-Rev, Secondary-Rev, Unknown The role status is Unknown for any intermediate remote copy role for a restore point of a protected volume set.", alias="remoteRole")
    remote_snp_cpg: Optional[StrictStr] = Field(default=None, description="Name for which the snapshot space is allocated on the remote target.", alias="remoteSnpCPG")
    remote_usr_cpg: Optional[StrictStr] = Field(default=None, description="Name for which the user space is allocated on the remote target.", alias="remoteUsrCPG")
    remote_volume_set_name: Optional[StrictStr] = Field(default=None, description="Target volume set name where remote protection is enabled", alias="remoteVolumeSetName")
    replication_traffic: Optional[StrictStr] = Field(default=None, description="Specifies the direction of data replication for the current target.", alias="replicationTraffic")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for replication partner list where volume set is remote protected", alias="resourceUri")
    role: Optional[StrictStr] = Field(default=None, description="Specifies remote copy role for a protected volume set.  Possible values: Primary, Secondary, Primary-Rev, Secondary-Rev, Unknown The role status is Unknown for any intermediate remote copy role of a protected volume set.")
    role_reversed: Optional[StrictBool] = Field(default=None, description="Remote group role switched due to a fail over.", alias="roleReversed")
    snap_frequency_secs: Optional[StrictInt] = Field(default=None, description="Specifies the interval in seconds at which remote group takes coordinated snapshots. This field applies only to Async mode: it is set to -1 otherwise.", alias="snapFrequencySecs")
    state: Optional[StrictStr] = Field(default=None, description="Status of the Remote group for the replication partner. Can be New, Starting, Started, Restart, Stopped, Backup, Failsafe or Logging. Null if unset.")
    sync_period: Optional[StrictInt] = Field(default=None, description="Time period in seconds for automatic resynchronization. The value must be at least five minutes and not more than one year. Defaults to 0.", alias="syncPeriod")
    system_id: Optional[StrictStr] = Field(default=None, description="Unique ID or serial number of the system.", alias="systemId")
    system_name: Optional[StrictStr] = Field(default=None, description="Name of the system.", alias="systemName")
    system_wwn: Optional[StrictStr] = Field(default=None, description="WWN of the system.", alias="systemWWN")
    target_name: Optional[StrictStr] = Field(default=None, description="Target to which the volume group is mirrored. This is the same as replication partner.", alias="targetName")
    type: Optional[StrictStr] = Field(default=None, description="type")
    volume_count: Optional[StrictInt] = Field(default=None, description="Number of volumes in the group for a replication partner.", alias="volumeCount")
    __properties: ClassVar[List[str]] = ["commonResourceAttributes", "customerId", "displayName", "domain", "drState", "generation", "groupId", "groupLastSyncTime", "groupName", "groupObjectId", "id", "isProtectionPolicyConfigured", "isRemoteArraySupportReplication", "isSourceArraySupportReplication", "mode", "policies", "protectionType", "remoteRole", "remoteSnpCPG", "remoteUsrCPG", "remoteVolumeSetName", "replicationTraffic", "resourceUri", "role", "roleReversed", "snapFrequencySecs", "state", "syncPeriod", "systemId", "systemName", "systemWWN", "targetName", "type", "volumeCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicationPartnerList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group_last_sync_time
        if self.group_last_sync_time:
            _dict['groupLastSyncTime'] = self.group_last_sync_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policies
        if self.policies:
            _dict['policies'] = self.policies.to_dict()
        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if dr_state (nullable) is None
        # and model_fields_set contains the field
        if self.dr_state is None and "dr_state" in self.model_fields_set:
            _dict['drState'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if group_id (nullable) is None
        # and model_fields_set contains the field
        if self.group_id is None and "group_id" in self.model_fields_set:
            _dict['groupId'] = None

        # set to None if group_last_sync_time (nullable) is None
        # and model_fields_set contains the field
        if self.group_last_sync_time is None and "group_last_sync_time" in self.model_fields_set:
            _dict['groupLastSyncTime'] = None

        # set to None if group_name (nullable) is None
        # and model_fields_set contains the field
        if self.group_name is None and "group_name" in self.model_fields_set:
            _dict['groupName'] = None

        # set to None if group_object_id (nullable) is None
        # and model_fields_set contains the field
        if self.group_object_id is None and "group_object_id" in self.model_fields_set:
            _dict['groupObjectId'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if mode (nullable) is None
        # and model_fields_set contains the field
        if self.mode is None and "mode" in self.model_fields_set:
            _dict['mode'] = None

        # set to None if policies (nullable) is None
        # and model_fields_set contains the field
        if self.policies is None and "policies" in self.model_fields_set:
            _dict['policies'] = None

        # set to None if protection_type (nullable) is None
        # and model_fields_set contains the field
        if self.protection_type is None and "protection_type" in self.model_fields_set:
            _dict['protectionType'] = None

        # set to None if remote_role (nullable) is None
        # and model_fields_set contains the field
        if self.remote_role is None and "remote_role" in self.model_fields_set:
            _dict['remoteRole'] = None

        # set to None if remote_snp_cpg (nullable) is None
        # and model_fields_set contains the field
        if self.remote_snp_cpg is None and "remote_snp_cpg" in self.model_fields_set:
            _dict['remoteSnpCPG'] = None

        # set to None if remote_usr_cpg (nullable) is None
        # and model_fields_set contains the field
        if self.remote_usr_cpg is None and "remote_usr_cpg" in self.model_fields_set:
            _dict['remoteUsrCPG'] = None

        # set to None if remote_volume_set_name (nullable) is None
        # and model_fields_set contains the field
        if self.remote_volume_set_name is None and "remote_volume_set_name" in self.model_fields_set:
            _dict['remoteVolumeSetName'] = None

        # set to None if replication_traffic (nullable) is None
        # and model_fields_set contains the field
        if self.replication_traffic is None and "replication_traffic" in self.model_fields_set:
            _dict['replicationTraffic'] = None

        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict['role'] = None

        # set to None if role_reversed (nullable) is None
        # and model_fields_set contains the field
        if self.role_reversed is None and "role_reversed" in self.model_fields_set:
            _dict['roleReversed'] = None

        # set to None if snap_frequency_secs (nullable) is None
        # and model_fields_set contains the field
        if self.snap_frequency_secs is None and "snap_frequency_secs" in self.model_fields_set:
            _dict['snapFrequencySecs'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if system_name (nullable) is None
        # and model_fields_set contains the field
        if self.system_name is None and "system_name" in self.model_fields_set:
            _dict['systemName'] = None

        # set to None if system_wwn (nullable) is None
        # and model_fields_set contains the field
        if self.system_wwn is None and "system_wwn" in self.model_fields_set:
            _dict['systemWWN'] = None

        # set to None if target_name (nullable) is None
        # and model_fields_set contains the field
        if self.target_name is None and "target_name" in self.model_fields_set:
            _dict['targetName'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if volume_count (nullable) is None
        # and model_fields_set contains the field
        if self.volume_count is None and "volume_count" in self.model_fields_set:
            _dict['volumeCount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicationPartnerList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonResourceAttributes": PrimeraCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "customerId": obj.get("customerId"),
            "displayName": obj.get("displayName"),
            "domain": obj.get("domain"),
            "drState": obj.get("drState"),
            "generation": obj.get("generation"),
            "groupId": obj.get("groupId"),
            "groupLastSyncTime": SyncTime.from_dict(obj["groupLastSyncTime"]) if obj.get("groupLastSyncTime") is not None else None,
            "groupName": obj.get("groupName"),
            "groupObjectId": obj.get("groupObjectId"),
            "id": obj.get("id"),
            "isProtectionPolicyConfigured": obj.get("isProtectionPolicyConfigured"),
            "isRemoteArraySupportReplication": obj.get("isRemoteArraySupportReplication"),
            "isSourceArraySupportReplication": obj.get("isSourceArraySupportReplication"),
            "mode": obj.get("mode"),
            "policies": DeviceType4ReplicationPartnerListPolicies.from_dict(obj["policies"]) if obj.get("policies") is not None else None,
            "protectionType": obj.get("protectionType"),
            "remoteRole": obj.get("remoteRole"),
            "remoteSnpCPG": obj.get("remoteSnpCPG"),
            "remoteUsrCPG": obj.get("remoteUsrCPG"),
            "remoteVolumeSetName": obj.get("remoteVolumeSetName"),
            "replicationTraffic": obj.get("replicationTraffic"),
            "resourceUri": obj.get("resourceUri"),
            "role": obj.get("role"),
            "roleReversed": obj.get("roleReversed"),
            "snapFrequencySecs": obj.get("snapFrequencySecs"),
            "state": obj.get("state"),
            "syncPeriod": obj.get("syncPeriod"),
            "systemId": obj.get("systemId"),
            "systemName": obj.get("systemName"),
            "systemWWN": obj.get("systemWWN"),
            "targetName": obj.get("targetName"),
            "type": obj.get("type"),
            "volumeCount": obj.get("volumeCount")
        })
        return _obj


