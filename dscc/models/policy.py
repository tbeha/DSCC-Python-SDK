# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Policy(BaseModel):
    """
    Policy
    """ # noqa: E501
    file_service: Optional[StrictBool] = Field(default=None, alias="fileService")
    host_dif3par: Optional[StrictBool] = Field(default=None, alias="hostDif3par")
    host_dif_std: Optional[StrictBool] = Field(default=None, alias="hostDifStd")
    no_cache: Optional[StrictBool] = Field(default=None, alias="noCache")
    one_host: Optional[StrictBool] = Field(default=None, alias="oneHost")
    stale_snapshot: Optional[StrictBool] = Field(default=None, alias="staleSnapshot")
    system: Optional[StrictBool] = None
    zero_detect: Optional[StrictBool] = Field(default=None, alias="zeroDetect")
    zero_fill: Optional[StrictBool] = Field(default=None, alias="zeroFill")
    __properties: ClassVar[List[str]] = ["fileService", "hostDif3par", "hostDifStd", "noCache", "oneHost", "staleSnapshot", "system", "zeroDetect", "zeroFill"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Policy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if file_service (nullable) is None
        # and model_fields_set contains the field
        if self.file_service is None and "file_service" in self.model_fields_set:
            _dict['fileService'] = None

        # set to None if host_dif3par (nullable) is None
        # and model_fields_set contains the field
        if self.host_dif3par is None and "host_dif3par" in self.model_fields_set:
            _dict['hostDif3par'] = None

        # set to None if host_dif_std (nullable) is None
        # and model_fields_set contains the field
        if self.host_dif_std is None and "host_dif_std" in self.model_fields_set:
            _dict['hostDifStd'] = None

        # set to None if no_cache (nullable) is None
        # and model_fields_set contains the field
        if self.no_cache is None and "no_cache" in self.model_fields_set:
            _dict['noCache'] = None

        # set to None if one_host (nullable) is None
        # and model_fields_set contains the field
        if self.one_host is None and "one_host" in self.model_fields_set:
            _dict['oneHost'] = None

        # set to None if stale_snapshot (nullable) is None
        # and model_fields_set contains the field
        if self.stale_snapshot is None and "stale_snapshot" in self.model_fields_set:
            _dict['staleSnapshot'] = None

        # set to None if system (nullable) is None
        # and model_fields_set contains the field
        if self.system is None and "system" in self.model_fields_set:
            _dict['system'] = None

        # set to None if zero_detect (nullable) is None
        # and model_fields_set contains the field
        if self.zero_detect is None and "zero_detect" in self.model_fields_set:
            _dict['zeroDetect'] = None

        # set to None if zero_fill (nullable) is None
        # and model_fields_set contains the field
        if self.zero_fill is None and "zero_fill" in self.model_fields_set:
            _dict['zeroFill'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Policy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fileService": obj.get("fileService"),
            "hostDif3par": obj.get("hostDif3par"),
            "hostDifStd": obj.get("hostDifStd"),
            "noCache": obj.get("noCache"),
            "oneHost": obj.get("oneHost"),
            "staleSnapshot": obj.get("staleSnapshot"),
            "system": obj.get("system"),
            "zeroDetect": obj.get("zeroDetect"),
            "zeroFill": obj.get("zeroFill")
        })
        return _obj


