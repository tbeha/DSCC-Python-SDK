# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.device_type4_edit_network_settings_input_proxy_params import DeviceType4EditNetworkSettingsInputProxyParams
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4EditNetworkSettingsInput(BaseModel):
    """
    Proxy Setting details for a device
    """ # noqa: E501
    dns_addresses: Optional[List[StrictStr]] = Field(default=None, description="Dns address of the system", alias="dnsAddresses")
    ipv4_address: Optional[StrictStr] = Field(default=None, description="ipv4 address of the system", alias="ipv4Address")
    ipv4_gateway: Optional[StrictStr] = Field(default=None, description="ipv4 gateway of the system", alias="ipv4Gateway")
    ipv4_subnet_mask: Optional[StrictStr] = Field(default=None, description="NetMask for IPV4 address", alias="ipv4SubnetMask")
    ipv6_address: Optional[StrictStr] = Field(default=None, description="IPV6 address of the system", alias="ipv6Address")
    ipv6_gateway: Optional[StrictStr] = Field(default=None, description="IPV6 address of the system", alias="ipv6Gateway")
    ipv6_prefix_len: Optional[StrictStr] = Field(default=None, description="IPV6 Prefix length", alias="ipv6PrefixLen")
    proxy_params: Optional[DeviceType4EditNetworkSettingsInputProxyParams] = Field(default=None, alias="proxyParams")
    __properties: ClassVar[List[str]] = ["dnsAddresses", "ipv4Address", "ipv4Gateway", "ipv4SubnetMask", "ipv6Address", "ipv6Gateway", "ipv6PrefixLen", "proxyParams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4EditNetworkSettingsInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of proxy_params
        if self.proxy_params:
            _dict['proxyParams'] = self.proxy_params.to_dict()
        # set to None if dns_addresses (nullable) is None
        # and model_fields_set contains the field
        if self.dns_addresses is None and "dns_addresses" in self.model_fields_set:
            _dict['dnsAddresses'] = None

        # set to None if ipv4_address (nullable) is None
        # and model_fields_set contains the field
        if self.ipv4_address is None and "ipv4_address" in self.model_fields_set:
            _dict['ipv4Address'] = None

        # set to None if ipv4_gateway (nullable) is None
        # and model_fields_set contains the field
        if self.ipv4_gateway is None and "ipv4_gateway" in self.model_fields_set:
            _dict['ipv4Gateway'] = None

        # set to None if ipv4_subnet_mask (nullable) is None
        # and model_fields_set contains the field
        if self.ipv4_subnet_mask is None and "ipv4_subnet_mask" in self.model_fields_set:
            _dict['ipv4SubnetMask'] = None

        # set to None if ipv6_address (nullable) is None
        # and model_fields_set contains the field
        if self.ipv6_address is None and "ipv6_address" in self.model_fields_set:
            _dict['ipv6Address'] = None

        # set to None if ipv6_gateway (nullable) is None
        # and model_fields_set contains the field
        if self.ipv6_gateway is None and "ipv6_gateway" in self.model_fields_set:
            _dict['ipv6Gateway'] = None

        # set to None if ipv6_prefix_len (nullable) is None
        # and model_fields_set contains the field
        if self.ipv6_prefix_len is None and "ipv6_prefix_len" in self.model_fields_set:
            _dict['ipv6PrefixLen'] = None

        # set to None if proxy_params (nullable) is None
        # and model_fields_set contains the field
        if self.proxy_params is None and "proxy_params" in self.model_fields_set:
            _dict['proxyParams'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4EditNetworkSettingsInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dnsAddresses": obj.get("dnsAddresses"),
            "ipv4Address": obj.get("ipv4Address"),
            "ipv4Gateway": obj.get("ipv4Gateway"),
            "ipv4SubnetMask": obj.get("ipv4SubnetMask"),
            "ipv6Address": obj.get("ipv6Address"),
            "ipv6Gateway": obj.get("ipv6Gateway"),
            "ipv6PrefixLen": obj.get("ipv6PrefixLen"),
            "proxyParams": DeviceType4EditNetworkSettingsInputProxyParams.from_dict(obj["proxyParams"]) if obj.get("proxyParams") is not None else None
        })
        return _obj


