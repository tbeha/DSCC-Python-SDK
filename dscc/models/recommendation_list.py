# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.capacity_info_solo import CapacityInfoSolo
from typing import Optional, Set
from typing_extensions import Self

class RecommendationList(BaseModel):
    """
    RecommendationList
    """ # noqa: E501
    capacity_info: Optional[CapacityInfoSolo] = Field(default=None, alias="capacityInfo")
    id: Optional[StrictStr] = Field(default=None, description="uid of the array")
    mgmt_ip: Optional[StrictStr] = Field(default=None, description="management Ip of the array", alias="mgmtIp")
    name: Optional[StrictStr] = Field(default=None, description="name of the array")
    product_family: Optional[StrictStr] = Field(default=None, description="Storage device type. Possible values: deviceType1 and deviceType2", alias="productFamily")
    state: Optional[StrictStr] = Field(default=None, description="For deviceType1 State derived from ports, enclosure, disk and node state for deviceType2 state is state reported by deviceType2 array")
    system_wwn: Optional[StrictStr] = Field(default=None, description="WWN of the array", alias="systemWWN")
    __properties: ClassVar[List[str]] = ["capacityInfo", "id", "mgmtIp", "name", "productFamily", "state", "systemWWN"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'DEGRADED', 'null']):
            raise ValueError("must be one of enum values ('NORMAL', 'DEGRADED', 'null')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecommendationList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of capacity_info
        if self.capacity_info:
            _dict['capacityInfo'] = self.capacity_info.to_dict()
        # set to None if capacity_info (nullable) is None
        # and model_fields_set contains the field
        if self.capacity_info is None and "capacity_info" in self.model_fields_set:
            _dict['capacityInfo'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecommendationList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capacityInfo": CapacityInfoSolo.from_dict(obj["capacityInfo"]) if obj.get("capacityInfo") is not None else None,
            "id": obj.get("id"),
            "mgmtIp": obj.get("mgmtIp"),
            "name": obj.get("name"),
            "productFamily": obj.get("productFamily"),
            "state": obj.get("state"),
            "systemWWN": obj.get("systemWWN")
        })
        return _obj


