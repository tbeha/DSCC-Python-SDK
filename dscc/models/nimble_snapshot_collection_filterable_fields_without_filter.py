# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleSnapshotCollectionFilterableFieldsWithoutFilter(BaseModel):
    """
    NimbleSnapshotCollectionFilterableFieldsWithoutFilter
    """ # noqa: E501
    has_locked_snapshots: Optional[StrictBool] = Field(default=None, description="To verify a snapshot collection has any immutable snapshot or not.")
    id: Optional[StrictStr] = Field(default=None, description="Identifier for the snapshot collection. A 42 digit hexadecimal number. `Filter`")
    name: Optional[StrictStr] = Field(default=None, description="Name of snapshot. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. `Filter, Sort`")
    online_status: Optional[StrictStr] = Field(default=None, description="Online status of snapshot collection. This is based on the online status of the individual snapshots. Online status based on that of the constituent entities. Possible values: 'online', 'offline' or 'partial'.")
    schedule_id: Optional[StrictStr] = Field(default=None, description="Identifier of protection schedule. A 42 digit hexadecimal number. `Filter, Sort`")
    srep_owner_id: Optional[StrictStr] = Field(default=None, description="ID of the partner where snapshots for this snapshot collection reside which were created by synchronous replication. Field will be null if no peer snapshot_collection was created by synchronous replication. A 42 digit hexadecimal number. `Filter, Sort`")
    volcoll_id: Optional[StrictStr] = Field(default=None, description="Parent volume collection ID. A 42 digit hexadecimal number. `Filter, Sort`")
    __properties: ClassVar[List[str]] = ["has_locked_snapshots", "id", "name", "online_status", "schedule_id", "srep_owner_id", "volcoll_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleSnapshotCollectionFilterableFieldsWithoutFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if has_locked_snapshots (nullable) is None
        # and model_fields_set contains the field
        if self.has_locked_snapshots is None and "has_locked_snapshots" in self.model_fields_set:
            _dict['has_locked_snapshots'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if online_status (nullable) is None
        # and model_fields_set contains the field
        if self.online_status is None and "online_status" in self.model_fields_set:
            _dict['online_status'] = None

        # set to None if schedule_id (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_id is None and "schedule_id" in self.model_fields_set:
            _dict['schedule_id'] = None

        # set to None if srep_owner_id (nullable) is None
        # and model_fields_set contains the field
        if self.srep_owner_id is None and "srep_owner_id" in self.model_fields_set:
            _dict['srep_owner_id'] = None

        # set to None if volcoll_id (nullable) is None
        # and model_fields_set contains the field
        if self.volcoll_id is None and "volcoll_id" in self.model_fields_set:
            _dict['volcoll_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleSnapshotCollectionFilterableFieldsWithoutFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "has_locked_snapshots": obj.get("has_locked_snapshots"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "online_status": obj.get("online_status"),
            "schedule_id": obj.get("schedule_id"),
            "srep_owner_id": obj.get("srep_owner_id"),
            "volcoll_id": obj.get("volcoll_id")
        })
        return _obj


