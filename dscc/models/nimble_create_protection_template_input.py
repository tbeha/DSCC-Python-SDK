# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.protection_schedule_input import ProtectionScheduleInput
from typing import Optional, Set
from typing_extensions import Self

class NimbleCreateProtectionTemplateInput(BaseModel):
    """
    Create Protection Template input on {Device-Type2}.
    """ # noqa: E501
    app_cluster_name: Optional[StrictStr] = Field(default=None, description="If the application is running within a Windows cluster environment then this is the cluster name. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    app_id: Optional[StrictStr] = Field(default=None, description="Application ID running on the server. Application ID can only be specified if application synchronization is VSS. Possible values: 'inval', 'exchange', 'exchange_dag', 'hyperv', 'sql2005', 'sql2008', 'sql2012', 'sql2014', 'sql2016', 'sql2017'.")
    app_server: Optional[StrictStr] = Field(default=None, description="Application server hostname. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    app_service_name: Optional[StrictStr] = Field(default=None, description="If the application is running within a Windows cluster environment then this is the instance name of the service running within the cluster environment. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    app_sync: Optional[StrictStr] = Field(default=None, description="Application synchronization. Possible values: 'none', 'vss'.")
    description: Optional[StrictStr] = Field(default=None, description="Text description of protection template. String of up to 255 printable ASCII characters.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the protection template. User provided identifier. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    schedules: Optional[List[ProtectionScheduleInput]] = Field(default=None, description="List of protection schedules.")
    __properties: ClassVar[List[str]] = ["app_cluster_name", "app_id", "app_server", "app_service_name", "app_sync", "description", "name", "schedules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleCreateProtectionTemplateInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in schedules (list)
        _items = []
        if self.schedules:
            for _item in self.schedules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['schedules'] = _items
        # set to None if app_cluster_name (nullable) is None
        # and model_fields_set contains the field
        if self.app_cluster_name is None and "app_cluster_name" in self.model_fields_set:
            _dict['app_cluster_name'] = None

        # set to None if app_id (nullable) is None
        # and model_fields_set contains the field
        if self.app_id is None and "app_id" in self.model_fields_set:
            _dict['app_id'] = None

        # set to None if app_server (nullable) is None
        # and model_fields_set contains the field
        if self.app_server is None and "app_server" in self.model_fields_set:
            _dict['app_server'] = None

        # set to None if app_service_name (nullable) is None
        # and model_fields_set contains the field
        if self.app_service_name is None and "app_service_name" in self.model_fields_set:
            _dict['app_service_name'] = None

        # set to None if app_sync (nullable) is None
        # and model_fields_set contains the field
        if self.app_sync is None and "app_sync" in self.model_fields_set:
            _dict['app_sync'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleCreateProtectionTemplateInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_cluster_name": obj.get("app_cluster_name"),
            "app_id": obj.get("app_id"),
            "app_server": obj.get("app_server"),
            "app_service_name": obj.get("app_service_name"),
            "app_sync": obj.get("app_sync"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "schedules": [ProtectionScheduleInput.from_dict(_item) for _item in obj["schedules"]] if obj.get("schedules") is not None else None
        })
        return _obj


