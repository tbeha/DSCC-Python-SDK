# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.vluns_create_input_lun_inner import VlunsCreateInputLUNInner
from typing import Optional, Set
from typing_extensions import Self

class VlunsCreateInput(BaseModel):
    """
    VlunsCreateInput
    """ # noqa: E501
    lun: Optional[List[VlunsCreateInputLUNInner]] = Field(default=None, description="Custom LUN Id for multiple host groups", alias="LUN")
    auto_lun: Optional[StrictBool] = Field(default=None, description="Auto Lun", alias="autoLun")
    host_group_ids: Optional[List[Optional[StrictStr]]] = Field(description="HostGroups", alias="hostGroupIds")
    max_auto_lun: Optional[StrictInt] = Field(default=None, description="Number of volumes.", alias="maxAutoLun")
    no_vcn: Optional[StrictBool] = Field(default=None, description="No VCN", alias="noVcn")
    override: Optional[StrictBool] = Field(default=None, description="Override")
    position: Optional[StrictStr] = Field(default=None, description="Position. This field is deprecated.")
    proximity: Optional[StrictStr] = Field(default=None, description="Host proximity setting for Active Peer Persistence configuration. Supported values are - PRIMARY, SECONDARY and ALL. Default proximity is PRIMARY.")
    __properties: ClassVar[List[str]] = ["LUN", "autoLun", "hostGroupIds", "maxAutoLun", "noVcn", "override", "position", "proximity"]

    @field_validator('proximity')
    def proximity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRIMARY', 'SECONDARY', 'ALL']):
            raise ValueError("must be one of enum values ('PRIMARY', 'SECONDARY', 'ALL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VlunsCreateInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in lun (list)
        _items = []
        if self.lun:
            for _item in self.lun:
                if _item:
                    _items.append(_item.to_dict())
            _dict['LUN'] = _items
        # set to None if lun (nullable) is None
        # and model_fields_set contains the field
        if self.lun is None and "lun" in self.model_fields_set:
            _dict['LUN'] = None

        # set to None if auto_lun (nullable) is None
        # and model_fields_set contains the field
        if self.auto_lun is None and "auto_lun" in self.model_fields_set:
            _dict['autoLun'] = None

        # set to None if host_group_ids (nullable) is None
        # and model_fields_set contains the field
        if self.host_group_ids is None and "host_group_ids" in self.model_fields_set:
            _dict['hostGroupIds'] = None

        # set to None if max_auto_lun (nullable) is None
        # and model_fields_set contains the field
        if self.max_auto_lun is None and "max_auto_lun" in self.model_fields_set:
            _dict['maxAutoLun'] = None

        # set to None if no_vcn (nullable) is None
        # and model_fields_set contains the field
        if self.no_vcn is None and "no_vcn" in self.model_fields_set:
            _dict['noVcn'] = None

        # set to None if override (nullable) is None
        # and model_fields_set contains the field
        if self.override is None and "override" in self.model_fields_set:
            _dict['override'] = None

        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict['position'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VlunsCreateInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LUN": [VlunsCreateInputLUNInner.from_dict(_item) for _item in obj["LUN"]] if obj.get("LUN") is not None else None,
            "autoLun": obj.get("autoLun"),
            "hostGroupIds": obj.get("hostGroupIds"),
            "maxAutoLun": obj.get("maxAutoLun"),
            "noVcn": obj.get("noVcn"),
            "override": obj.get("override"),
            "position": obj.get("position"),
            "proximity": obj.get("proximity")
        })
        return _obj


