# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4PortFCEdit(BaseModel):
    """
    DeviceType4PortFCEdit
    """ # noqa: E501
    config_mode: Optional[StrictStr] = Field(default=None, description="Configuration of Port. Possible Values: Disk, Host, RCFC, Peer", alias="configMode")
    connection_type: Optional[StrictStr] = Field(default=None, description="Port connection Type. Possible Values: Point, Loop", alias="connectionType")
    interupt_coalesce: Optional[StrictBool] = Field(default=None, description="Port interuptCoalesce enabled or not", alias="interuptCoalesce")
    label: Optional[StrictStr] = Field(default=None, description="Port name")
    speed_configured: Optional[StrictStr] = Field(default=None, description="Port speed. Possible Values: auto, \"4\", \"8\", \"16\", \"32\"", alias="speedConfigured")
    unique_wwn: Optional[StrictBool] = Field(default=None, description="Port uniquewwn enabled or not", alias="uniqueWWN")
    vcn: Optional[StrictBool] = Field(default=None, description="VLUN change notification enabled or not")
    __properties: ClassVar[List[str]] = ["configMode", "connectionType", "interuptCoalesce", "label", "speedConfigured", "uniqueWWN", "vcn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4PortFCEdit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if config_mode (nullable) is None
        # and model_fields_set contains the field
        if self.config_mode is None and "config_mode" in self.model_fields_set:
            _dict['configMode'] = None

        # set to None if connection_type (nullable) is None
        # and model_fields_set contains the field
        if self.connection_type is None and "connection_type" in self.model_fields_set:
            _dict['connectionType'] = None

        # set to None if interupt_coalesce (nullable) is None
        # and model_fields_set contains the field
        if self.interupt_coalesce is None and "interupt_coalesce" in self.model_fields_set:
            _dict['interuptCoalesce'] = None

        # set to None if speed_configured (nullable) is None
        # and model_fields_set contains the field
        if self.speed_configured is None and "speed_configured" in self.model_fields_set:
            _dict['speedConfigured'] = None

        # set to None if unique_wwn (nullable) is None
        # and model_fields_set contains the field
        if self.unique_wwn is None and "unique_wwn" in self.model_fields_set:
            _dict['uniqueWWN'] = None

        # set to None if vcn (nullable) is None
        # and model_fields_set contains the field
        if self.vcn is None and "vcn" in self.model_fields_set:
            _dict['vcn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4PortFCEdit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configMode": obj.get("configMode"),
            "connectionType": obj.get("connectionType"),
            "interuptCoalesce": obj.get("interuptCoalesce"),
            "label": obj.get("label"),
            "speedConfigured": obj.get("speedConfigured"),
            "uniqueWWN": obj.get("uniqueWWN"),
            "vcn": obj.get("vcn")
        })
        return _obj


