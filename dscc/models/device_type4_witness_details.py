# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.common_resource_attributes import CommonResourceAttributes
from dscc.models.device_type4_replication_partner_common_fields_associated_links_inner import DeviceType4ReplicationPartnerCommonFieldsAssociatedLinksInner
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4WitnessDetails(BaseModel):
    """
    DeviceType4WitnessDetails
    """ # noqa: E501
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    request_uri: Optional[StrictStr] = Field(default=None, description="Request URI for detailed quorum witness object", alias="requestUri")
    id: Optional[StrictStr] = Field(default=None, description="Id of the replication partner on which quorum witness is configured")
    associated_links: Optional[List[DeviceType4ReplicationPartnerCommonFieldsAssociatedLinksInner]] = Field(default=None, description="Associated Links", alias="associatedLinks")
    common_resource_attributes: Optional[CommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    is_remote_array_support_replication: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate if remote array OS version supports replication", alias="isRemoteArraySupportReplication")
    name: Optional[StrictStr] = Field(default=None, description="Name of replication partner on which quorum witness is configured")
    quorum_atf_timeout: Optional[StrictInt] = Field(default=None, description="Automatic Transparent Failover quorum partner failure timeout.", alias="quorumATFTimeout")
    quorum_ip_address: Optional[StrictStr] = Field(default=None, description="Quorum IP Address associated with the partner. Set to 'NA' if not available.", alias="quorumIpAddress")
    quorum_ssl_port: Optional[StrictInt] = Field(default=None, description="Quorum SSL port number.", alias="quorumSSLPort")
    quorum_status: Optional[StrictStr] = Field(default=None, description="Quorum status of the partner. Possible values - Uninitialized, Initializing,Started, Not-started, Standby, Active, Failsafe, Failover or Restarting. Null if unset.", alias="quorumStatus")
    quorum_status_qual: Optional[StrictStr] = Field(default=None, description="Quorum status qualifier. Set to 'NA' if not available.", alias="quorumStatusQual")
    quorum_version: Optional[StrictStr] = Field(default=None, description="Quorum version.", alias="quorumVersion")
    remote_id: Optional[StrictStr] = Field(default=None, description="Id of the remote replication partner on which quorum witness is configured", alias="remoteId")
    remote_name: Optional[StrictStr] = Field(default=None, description="Name of the remote replication partner on which quorum witness is configured", alias="remoteName")
    remote_system_id: Optional[StrictStr] = Field(default=None, description="Unique ID or serial number of the remote system.", alias="remoteSystemId")
    remote_system_name: Optional[StrictStr] = Field(default=None, description="Name of the remote system.", alias="remoteSystemName")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for quorum witness object", alias="resourceUri")
    system_id: Optional[StrictStr] = Field(default=None, description="Unique ID or serial number of the system.", alias="systemId")
    system_name: Optional[StrictStr] = Field(default=None, description="Name of the source system.", alias="systemName")
    type: Optional[StrictStr] = Field(default=None, description="type")
    __properties: ClassVar[List[str]] = ["id", "associatedLinks", "commonResourceAttributes", "customerId", "generation", "isRemoteArraySupportReplication", "name", "quorumATFTimeout", "quorumIpAddress", "quorumSSLPort", "quorumStatus", "quorumStatusQual", "quorumVersion", "remoteId", "remoteName", "remoteSystemId", "remoteSystemName", "resourceUri", "systemId", "systemName", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4WitnessDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # set to None if associated_links (nullable) is None
        # and model_fields_set contains the field
        if self.associated_links is None and "associated_links" in self.model_fields_set:
            _dict['associatedLinks'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if quorum_atf_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.quorum_atf_timeout is None and "quorum_atf_timeout" in self.model_fields_set:
            _dict['quorumATFTimeout'] = None

        # set to None if quorum_ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.quorum_ip_address is None and "quorum_ip_address" in self.model_fields_set:
            _dict['quorumIpAddress'] = None

        # set to None if quorum_ssl_port (nullable) is None
        # and model_fields_set contains the field
        if self.quorum_ssl_port is None and "quorum_ssl_port" in self.model_fields_set:
            _dict['quorumSSLPort'] = None

        # set to None if quorum_status (nullable) is None
        # and model_fields_set contains the field
        if self.quorum_status is None and "quorum_status" in self.model_fields_set:
            _dict['quorumStatus'] = None

        # set to None if quorum_status_qual (nullable) is None
        # and model_fields_set contains the field
        if self.quorum_status_qual is None and "quorum_status_qual" in self.model_fields_set:
            _dict['quorumStatusQual'] = None

        # set to None if quorum_version (nullable) is None
        # and model_fields_set contains the field
        if self.quorum_version is None and "quorum_version" in self.model_fields_set:
            _dict['quorumVersion'] = None

        # set to None if remote_id (nullable) is None
        # and model_fields_set contains the field
        if self.remote_id is None and "remote_id" in self.model_fields_set:
            _dict['remoteId'] = None

        # set to None if remote_name (nullable) is None
        # and model_fields_set contains the field
        if self.remote_name is None and "remote_name" in self.model_fields_set:
            _dict['remoteName'] = None

        # set to None if remote_system_id (nullable) is None
        # and model_fields_set contains the field
        if self.remote_system_id is None and "remote_system_id" in self.model_fields_set:
            _dict['remoteSystemId'] = None

        # set to None if remote_system_name (nullable) is None
        # and model_fields_set contains the field
        if self.remote_system_name is None and "remote_system_name" in self.model_fields_set:
            _dict['remoteSystemName'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if system_name (nullable) is None
        # and model_fields_set contains the field
        if self.system_name is None and "system_name" in self.model_fields_set:
            _dict['systemName'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4WitnessDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "associatedLinks": [DeviceType4ReplicationPartnerCommonFieldsAssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "commonResourceAttributes": CommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "customerId": obj.get("customerId"),
            "generation": obj.get("generation"),
            "isRemoteArraySupportReplication": obj.get("isRemoteArraySupportReplication"),
            "name": obj.get("name"),
            "quorumATFTimeout": obj.get("quorumATFTimeout"),
            "quorumIpAddress": obj.get("quorumIpAddress"),
            "quorumSSLPort": obj.get("quorumSSLPort"),
            "quorumStatus": obj.get("quorumStatus"),
            "quorumStatusQual": obj.get("quorumStatusQual"),
            "quorumVersion": obj.get("quorumVersion"),
            "remoteId": obj.get("remoteId"),
            "remoteName": obj.get("remoteName"),
            "remoteSystemId": obj.get("remoteSystemId"),
            "remoteSystemName": obj.get("remoteSystemName"),
            "resourceUri": obj.get("resourceUri"),
            "systemId": obj.get("systemId"),
            "systemName": obj.get("systemName"),
            "type": obj.get("type")
        })
        return _obj


