# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NwCimEditCim(BaseModel):
    """
    NwCimEditCim
    """ # noqa: E501
    cim_policy: Optional[StrictBool] = Field(default=None, description="Specifies the CIM Policy of CIM server.", alias="cimPolicy")
    enable_cim_service: Optional[StrictBool] = Field(default=None, description="Enable or disbale Cim service.", alias="enableCimService")
    http_state: Optional[StrictBool] = Field(default=None, description="Specifies whether HTTPState is enabled or disabled for CIM Server. Unsupported from versions 4.6.0 and above and 9.6.0 and above.", alias="httpState")
    https_state: Optional[StrictBool] = Field(default=None, description="Specifies whether HTTPS state is enabled or disabled for cim server. Unsupported from versions 4.6.0 and above and 9.6.0 and above.", alias="httpsState")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the CIM Server.")
    slp_state: Optional[StrictBool] = Field(default=None, description="SLPport specification.", alias="slpState")
    __properties: ClassVar[List[str]] = ["cimPolicy", "enableCimService", "httpState", "httpsState", "id", "slpState"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NwCimEditCim from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cim_policy (nullable) is None
        # and model_fields_set contains the field
        if self.cim_policy is None and "cim_policy" in self.model_fields_set:
            _dict['cimPolicy'] = None

        # set to None if enable_cim_service (nullable) is None
        # and model_fields_set contains the field
        if self.enable_cim_service is None and "enable_cim_service" in self.model_fields_set:
            _dict['enableCimService'] = None

        # set to None if http_state (nullable) is None
        # and model_fields_set contains the field
        if self.http_state is None and "http_state" in self.model_fields_set:
            _dict['httpState'] = None

        # set to None if https_state (nullable) is None
        # and model_fields_set contains the field
        if self.https_state is None and "https_state" in self.model_fields_set:
            _dict['httpsState'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if slp_state (nullable) is None
        # and model_fields_set contains the field
        if self.slp_state is None and "slp_state" in self.model_fields_set:
            _dict['slpState'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NwCimEditCim from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cimPolicy": obj.get("cimPolicy"),
            "enableCimService": obj.get("enableCimService"),
            "httpState": obj.get("httpState"),
            "httpsState": obj.get("httpsState"),
            "id": obj.get("id"),
            "slpState": obj.get("slpState")
        })
        return _obj


