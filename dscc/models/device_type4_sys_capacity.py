# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.device_type4_system_capacity_usage import DeviceType4SystemCapacityUsage
from dscc.models.device_type4capacity_by_tier import DeviceType4capacityByTier
from dscc.models.device_type4system_capacity_summary import DeviceType4systemCapacitySummary
from dscc.models.device_type4utilization_summary import DeviceType4utilizationSummary
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4SysCapacity(BaseModel):
    """
    system capacity details
    """ # noqa: E501
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    capacity_by_tier: Optional[DeviceType4capacityByTier] = Field(default=None, alias="capacityByTier")
    capacity_detail: Optional[DeviceType4SystemCapacityUsage] = Field(default=None, alias="capacityDetail")
    capacity_summary: Optional[DeviceType4systemCapacitySummary] = Field(default=None, alias="capacitySummary")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    fc_capacity_summary: Optional[DeviceType4systemCapacitySummary] = Field(default=None, alias="fcCapacitySummary")
    id: Optional[StrictStr] = Field(default=None, description="ID string uniquely identifying the object.")
    nl_capacity_summary: Optional[DeviceType4systemCapacitySummary] = Field(default=None, alias="nlCapacitySummary")
    request_uri: Optional[StrictStr] = Field(default=None, description="requestUri for detailed storage object", alias="requestUri")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed storage object", alias="resourceUri")
    ssd_capacity_summary: Optional[DeviceType4systemCapacitySummary] = Field(default=None, alias="ssdCapacitySummary")
    system_id: Optional[StrictStr] = Field(default=None, description="SystemId/serialNumber of the array.", alias="systemId")
    utilization_summary: Optional[DeviceType4utilizationSummary] = Field(default=None, alias="utilizationSummary")
    __properties: ClassVar[List[str]] = ["associatedLinks", "capacityByTier", "capacityDetail", "capacitySummary", "customerId", "fcCapacitySummary", "id", "nlCapacitySummary", "requestUri", "resourceUri", "ssdCapacitySummary", "systemId", "utilizationSummary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4SysCapacity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of capacity_by_tier
        if self.capacity_by_tier:
            _dict['capacityByTier'] = self.capacity_by_tier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of capacity_detail
        if self.capacity_detail:
            _dict['capacityDetail'] = self.capacity_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of capacity_summary
        if self.capacity_summary:
            _dict['capacitySummary'] = self.capacity_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fc_capacity_summary
        if self.fc_capacity_summary:
            _dict['fcCapacitySummary'] = self.fc_capacity_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nl_capacity_summary
        if self.nl_capacity_summary:
            _dict['nlCapacitySummary'] = self.nl_capacity_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssd_capacity_summary
        if self.ssd_capacity_summary:
            _dict['ssdCapacitySummary'] = self.ssd_capacity_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of utilization_summary
        if self.utilization_summary:
            _dict['utilizationSummary'] = self.utilization_summary.to_dict()
        # set to None if associated_links (nullable) is None
        # and model_fields_set contains the field
        if self.associated_links is None and "associated_links" in self.model_fields_set:
            _dict['associatedLinks'] = None

        # set to None if capacity_by_tier (nullable) is None
        # and model_fields_set contains the field
        if self.capacity_by_tier is None and "capacity_by_tier" in self.model_fields_set:
            _dict['capacityByTier'] = None

        # set to None if capacity_detail (nullable) is None
        # and model_fields_set contains the field
        if self.capacity_detail is None and "capacity_detail" in self.model_fields_set:
            _dict['capacityDetail'] = None

        # set to None if capacity_summary (nullable) is None
        # and model_fields_set contains the field
        if self.capacity_summary is None and "capacity_summary" in self.model_fields_set:
            _dict['capacitySummary'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if fc_capacity_summary (nullable) is None
        # and model_fields_set contains the field
        if self.fc_capacity_summary is None and "fc_capacity_summary" in self.model_fields_set:
            _dict['fcCapacitySummary'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if nl_capacity_summary (nullable) is None
        # and model_fields_set contains the field
        if self.nl_capacity_summary is None and "nl_capacity_summary" in self.model_fields_set:
            _dict['nlCapacitySummary'] = None

        # set to None if request_uri (nullable) is None
        # and model_fields_set contains the field
        if self.request_uri is None and "request_uri" in self.model_fields_set:
            _dict['requestUri'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if ssd_capacity_summary (nullable) is None
        # and model_fields_set contains the field
        if self.ssd_capacity_summary is None and "ssd_capacity_summary" in self.model_fields_set:
            _dict['ssdCapacitySummary'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if utilization_summary (nullable) is None
        # and model_fields_set contains the field
        if self.utilization_summary is None and "utilization_summary" in self.model_fields_set:
            _dict['utilizationSummary'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4SysCapacity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedLinks": [AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "capacityByTier": DeviceType4capacityByTier.from_dict(obj["capacityByTier"]) if obj.get("capacityByTier") is not None else None,
            "capacityDetail": DeviceType4SystemCapacityUsage.from_dict(obj["capacityDetail"]) if obj.get("capacityDetail") is not None else None,
            "capacitySummary": DeviceType4systemCapacitySummary.from_dict(obj["capacitySummary"]) if obj.get("capacitySummary") is not None else None,
            "customerId": obj.get("customerId"),
            "fcCapacitySummary": DeviceType4systemCapacitySummary.from_dict(obj["fcCapacitySummary"]) if obj.get("fcCapacitySummary") is not None else None,
            "id": obj.get("id"),
            "nlCapacitySummary": DeviceType4systemCapacitySummary.from_dict(obj["nlCapacitySummary"]) if obj.get("nlCapacitySummary") is not None else None,
            "requestUri": obj.get("requestUri"),
            "resourceUri": obj.get("resourceUri"),
            "ssdCapacitySummary": DeviceType4systemCapacitySummary.from_dict(obj["ssdCapacitySummary"]) if obj.get("ssdCapacitySummary") is not None else None,
            "systemId": obj.get("systemId"),
            "utilizationSummary": DeviceType4utilizationSummary.from_dict(obj["utilizationSummary"]) if obj.get("utilizationSummary") is not None else None
        })
        return _obj


