# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleCreateInitiatorInput(BaseModel):
    """
    Create Nimble initiator input.
    """ # noqa: E501
    access_protocol: StrictStr = Field(description="Access protocol used by the initiator. Possible values: 'iscsi', 'fc'.")
    alias: Optional[StrictStr] = Field(default=None, description="Alias of the Fibre Channel initiator. Maximum alias length is 32 characters. Each initiator alias must have an associated WWPN specified using the 'wwpn' attribute.You can choose not to enter the WWPN for an initiator when using previously saved initiator alias.String of up to 32 alphanumeric characters, or one of $^-_.: cannot begin with non-alphanumeric character.`Filter, Sort`")
    chapuser_id: Optional[StrictStr] = Field(default=None, description="Identifier for the CHAP user.")
    initiator_group_id: StrictStr = Field(description="Identifier of the initiator group that this initiator is assigned to. A 42 digit hexadecimal number.")
    ip_address: Optional[StrictStr] = Field(default=None, description="IP address of the iSCSI initiator. Each initiator IP address must have an associated name specified using 'name' attribute.You can choose not to enter the name for an initiator if you prefer not to authenticate using both name and IP address, in this case the IQN name will be returned as '*'. Alphanumeric, hyphenated, colon or period separated string of up to 255 characters or '*'")
    iqn: Optional[StrictStr] = Field(default=None, description="IQN name of the iSCSI initiator. Each initiator IQN name must have an associated IP address specified using the 'ip_address' attribute.You can choose not to enter the IP address for an initiator if you prefer not to authenticate using both name and IP address,in this case the IP address will be returned as '*'.")
    label: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the iSCSI initiator. Label is required when creating iSCSI initiator. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    override_existing_alias: Optional[StrictBool] = Field(default=None, description="Forcibly add Fibre Channel initiator to initiator group by updating or removing conflicting Fibre Channel initiator aliases.")
    wwpn: Optional[StrictStr] = Field(default=None, description="WWPN (World Wide Port Name) of the Fibre Channel initiator. WWPN is required when creating a Fibre Channel initiator. Each initiator WWPN can have an associated alias specified using the 'alias' attribute. You can choose not to enter the alias for an initiator if you prefer not to assign an initiator alias. Eight bytes expressed in hex separated by colons.")
    __properties: ClassVar[List[str]] = ["access_protocol", "alias", "chapuser_id", "initiator_group_id", "ip_address", "iqn", "label", "override_existing_alias", "wwpn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleCreateInitiatorInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if alias (nullable) is None
        # and model_fields_set contains the field
        if self.alias is None and "alias" in self.model_fields_set:
            _dict['alias'] = None

        # set to None if chapuser_id (nullable) is None
        # and model_fields_set contains the field
        if self.chapuser_id is None and "chapuser_id" in self.model_fields_set:
            _dict['chapuser_id'] = None

        # set to None if ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address is None and "ip_address" in self.model_fields_set:
            _dict['ip_address'] = None

        # set to None if iqn (nullable) is None
        # and model_fields_set contains the field
        if self.iqn is None and "iqn" in self.model_fields_set:
            _dict['iqn'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if override_existing_alias (nullable) is None
        # and model_fields_set contains the field
        if self.override_existing_alias is None and "override_existing_alias" in self.model_fields_set:
            _dict['override_existing_alias'] = None

        # set to None if wwpn (nullable) is None
        # and model_fields_set contains the field
        if self.wwpn is None and "wwpn" in self.model_fields_set:
            _dict['wwpn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleCreateInitiatorInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_protocol": obj.get("access_protocol"),
            "alias": obj.get("alias"),
            "chapuser_id": obj.get("chapuser_id"),
            "initiator_group_id": obj.get("initiator_group_id"),
            "ip_address": obj.get("ip_address"),
            "iqn": obj.get("iqn"),
            "label": obj.get("label"),
            "override_existing_alias": obj.get("override_existing_alias"),
            "wwpn": obj.get("wwpn")
        })
        return _obj


