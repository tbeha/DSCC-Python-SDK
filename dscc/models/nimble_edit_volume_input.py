# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleEditVolumeInput(BaseModel):
    """
    Edit Nimble volume input.
    """ # noqa: E501
    app_uuid: Optional[StrictStr] = Field(default=None, description="Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed.")
    caching_enabled: Optional[StrictBool] = Field(default=None, description="Indicate caching the volume is enabled.")
    dedupe_enabled: Optional[StrictBool] = Field(default=None, description="Indicate whether dedupe is enabled.")
    description: Optional[StrictStr] = Field(default=None, description="Text description of volume. String of up to 255 printable ASCII characters.")
    folder_id: Optional[StrictStr] = Field(default=None, description="ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal number or the empty string.")
    force: Optional[StrictBool] = Field(default=None, description="Forcibly offline, reduce size or change read-only status a volume.")
    limit: Optional[StrictInt] = Field(default=None, description="Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100.")
    limit_iops: Optional[StrictInt] = Field(default=None, description="IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).")
    limit_mbps: Optional[StrictInt] = Field(default=None, description="Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B).")
    name: Optional[StrictStr] = Field(default=None, description="Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.")
    online: Optional[StrictBool] = Field(default=None, description="Online state of volume, available for host initiators to establish connections.")
    owned_by_group_id: Optional[StrictStr] = Field(default=None, description="ID of group that currently owns the volume. A 42 digit hexadecimal number.")
    perfpolicy_id: Optional[StrictStr] = Field(default=None, description="Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal number. `Filter, Sort`")
    size: Optional[StrictInt] = Field(default=None, description="Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume.")
    __properties: ClassVar[List[str]] = ["app_uuid", "caching_enabled", "dedupe_enabled", "description", "folder_id", "force", "limit", "limit_iops", "limit_mbps", "name", "online", "owned_by_group_id", "perfpolicy_id", "size"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleEditVolumeInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if app_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.app_uuid is None and "app_uuid" in self.model_fields_set:
            _dict['app_uuid'] = None

        # set to None if caching_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.caching_enabled is None and "caching_enabled" in self.model_fields_set:
            _dict['caching_enabled'] = None

        # set to None if dedupe_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_enabled is None and "dedupe_enabled" in self.model_fields_set:
            _dict['dedupe_enabled'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if folder_id (nullable) is None
        # and model_fields_set contains the field
        if self.folder_id is None and "folder_id" in self.model_fields_set:
            _dict['folder_id'] = None

        # set to None if force (nullable) is None
        # and model_fields_set contains the field
        if self.force is None and "force" in self.model_fields_set:
            _dict['force'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if limit_iops (nullable) is None
        # and model_fields_set contains the field
        if self.limit_iops is None and "limit_iops" in self.model_fields_set:
            _dict['limit_iops'] = None

        # set to None if limit_mbps (nullable) is None
        # and model_fields_set contains the field
        if self.limit_mbps is None and "limit_mbps" in self.model_fields_set:
            _dict['limit_mbps'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if online (nullable) is None
        # and model_fields_set contains the field
        if self.online is None and "online" in self.model_fields_set:
            _dict['online'] = None

        # set to None if owned_by_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.owned_by_group_id is None and "owned_by_group_id" in self.model_fields_set:
            _dict['owned_by_group_id'] = None

        # set to None if perfpolicy_id (nullable) is None
        # and model_fields_set contains the field
        if self.perfpolicy_id is None and "perfpolicy_id" in self.model_fields_set:
            _dict['perfpolicy_id'] = None

        # set to None if size (nullable) is None
        # and model_fields_set contains the field
        if self.size is None and "size" in self.model_fields_set:
            _dict['size'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleEditVolumeInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_uuid": obj.get("app_uuid"),
            "caching_enabled": obj.get("caching_enabled"),
            "dedupe_enabled": obj.get("dedupe_enabled"),
            "description": obj.get("description"),
            "folder_id": obj.get("folder_id"),
            "force": obj.get("force"),
            "limit": obj.get("limit"),
            "limit_iops": obj.get("limit_iops"),
            "limit_mbps": obj.get("limit_mbps"),
            "name": obj.get("name"),
            "online": obj.get("online"),
            "owned_by_group_id": obj.get("owned_by_group_id"),
            "perfpolicy_id": obj.get("perfpolicy_id"),
            "size": obj.get("size")
        })
        return _obj


