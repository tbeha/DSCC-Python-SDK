# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HostProximityValue(BaseModel):
    """
    HostProximityValue
    """ # noqa: E501
    group_name: Optional[StrictStr] = Field(default=None, description="Replication Group Name", alias="groupName")
    group_uid: Optional[StrictStr] = Field(default=None, description="Replication Group ID", alias="groupUid")
    host_id: Optional[StrictStr] = Field(default=None, description="Host ID", alias="hostId")
    host_name: Optional[StrictStr] = Field(default=None, description="Host name", alias="hostName")
    proximity_system_name: Optional[StrictStr] = Field(default=None, description="Host proximity value", alias="proximitySystemName")
    system_name: Optional[StrictStr] = Field(default=None, description="Source system name", alias="systemName")
    system_uid: Optional[StrictStr] = Field(default=None, description="Source system serial number", alias="systemUid")
    target_name: Optional[StrictStr] = Field(default=None, description="Target system name", alias="targetName")
    target_system_id: Optional[StrictStr] = Field(default=None, description="Target system serial number", alias="targetSystemId")
    __properties: ClassVar[List[str]] = ["groupName", "groupUid", "hostId", "hostName", "proximitySystemName", "systemName", "systemUid", "targetName", "targetSystemId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HostProximityValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if group_name (nullable) is None
        # and model_fields_set contains the field
        if self.group_name is None and "group_name" in self.model_fields_set:
            _dict['groupName'] = None

        # set to None if group_uid (nullable) is None
        # and model_fields_set contains the field
        if self.group_uid is None and "group_uid" in self.model_fields_set:
            _dict['groupUid'] = None

        # set to None if host_id (nullable) is None
        # and model_fields_set contains the field
        if self.host_id is None and "host_id" in self.model_fields_set:
            _dict['hostId'] = None

        # set to None if host_name (nullable) is None
        # and model_fields_set contains the field
        if self.host_name is None and "host_name" in self.model_fields_set:
            _dict['hostName'] = None

        # set to None if proximity_system_name (nullable) is None
        # and model_fields_set contains the field
        if self.proximity_system_name is None and "proximity_system_name" in self.model_fields_set:
            _dict['proximitySystemName'] = None

        # set to None if system_name (nullable) is None
        # and model_fields_set contains the field
        if self.system_name is None and "system_name" in self.model_fields_set:
            _dict['systemName'] = None

        # set to None if system_uid (nullable) is None
        # and model_fields_set contains the field
        if self.system_uid is None and "system_uid" in self.model_fields_set:
            _dict['systemUid'] = None

        # set to None if target_name (nullable) is None
        # and model_fields_set contains the field
        if self.target_name is None and "target_name" in self.model_fields_set:
            _dict['targetName'] = None

        # set to None if target_system_id (nullable) is None
        # and model_fields_set contains the field
        if self.target_system_id is None and "target_system_id" in self.model_fields_set:
            _dict['targetSystemId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HostProximityValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "groupName": obj.get("groupName"),
            "groupUid": obj.get("groupUid"),
            "hostId": obj.get("hostId"),
            "hostName": obj.get("hostName"),
            "proximitySystemName": obj.get("proximitySystemName"),
            "systemName": obj.get("systemName"),
            "systemUid": obj.get("systemUid"),
            "targetName": obj.get("targetName"),
            "targetSystemId": obj.get("targetSystemId")
        })
        return _obj


