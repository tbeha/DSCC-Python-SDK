# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.device_type4pm_perf_data import DeviceType4pmPerfData
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4KpiMetrics(BaseModel):
    """
    kpi metrics with read, write and total average values
    """ # noqa: E501
    read: Optional[DeviceType4pmPerfData] = None
    total: Optional[DeviceType4pmPerfData] = None
    write: Optional[DeviceType4pmPerfData] = None
    __properties: ClassVar[List[str]] = ["read", "total", "write"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4KpiMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of read
        if self.read:
            _dict['read'] = self.read.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict['total'] = self.total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of write
        if self.write:
            _dict['write'] = self.write.to_dict()
        # set to None if read (nullable) is None
        # and model_fields_set contains the field
        if self.read is None and "read" in self.model_fields_set:
            _dict['read'] = None

        # set to None if total (nullable) is None
        # and model_fields_set contains the field
        if self.total is None and "total" in self.model_fields_set:
            _dict['total'] = None

        # set to None if write (nullable) is None
        # and model_fields_set contains the field
        if self.write is None and "write" in self.model_fields_set:
            _dict['write'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4KpiMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "read": DeviceType4pmPerfData.from_dict(obj["read"]) if obj.get("read") is not None else None,
            "total": DeviceType4pmPerfData.from_dict(obj["total"]) if obj.get("total") is not None else None,
            "write": DeviceType4pmPerfData.from_dict(obj["write"]) if obj.get("write") is not None else None
        })
        return _obj


