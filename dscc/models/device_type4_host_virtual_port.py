# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4HostVirtualPort(BaseModel):
    """
    Host virtual ports
    """ # noqa: E501
    node_wwn: Optional[StrictStr] = Field(default=None, description="Node WWN of the virtual port", alias="nodeWWN")
    port_link_state: Optional[StrictStr] = Field(default=None, description="Port link state", alias="portLinkState")
    port_type: Optional[StrictStr] = Field(default=None, description="Virtual port type", alias="portType")
    port_wwn: Optional[StrictStr] = Field(default=None, description="Port WWN of the virtual port", alias="portWWN")
    protocol: Optional[StrictStr] = Field(default=None, description="Protocol of the Virtual port")
    vpi: Optional[StrictInt] = Field(default=None, description="Virtual port index")
    __properties: ClassVar[List[str]] = ["nodeWWN", "portLinkState", "portType", "portWWN", "protocol", "vpi"]

    @field_validator('port_link_state')
    def port_link_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LINK_STATE_CONFIG_WAIT', 'LINK_STATE_ALPA_WAIT', 'LINK_STATE_LOGIN_WAIT', 'LINK_STATE_READY', 'LINK_STATE_LOSS_SYNC', 'LINK_STATE_ERROR', 'LINK_STATE_XXX', 'LINK_STATE_NONPARTICIPATE', 'LINK_STATE_COREDUMP', 'LINK_STATE_OFFLINE', 'LINK_STATE_FWDEAD', 'LINK_STATE_LINK_IDLE_FOR_RESET', 'LINK_STATE_DHCP_IN_PROGRESS', 'LINK_STATE_PENDING_RESET', 'LINK_STATE_UNKNOWN']):
            raise ValueError("must be one of enum values ('LINK_STATE_CONFIG_WAIT', 'LINK_STATE_ALPA_WAIT', 'LINK_STATE_LOGIN_WAIT', 'LINK_STATE_READY', 'LINK_STATE_LOSS_SYNC', 'LINK_STATE_ERROR', 'LINK_STATE_XXX', 'LINK_STATE_NONPARTICIPATE', 'LINK_STATE_COREDUMP', 'LINK_STATE_OFFLINE', 'LINK_STATE_FWDEAD', 'LINK_STATE_LINK_IDLE_FOR_RESET', 'LINK_STATE_DHCP_IN_PROGRESS', 'LINK_STATE_PENDING_RESET', 'LINK_STATE_UNKNOWN')")
        return value

    @field_validator('port_type')
    def port_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PORT_TYPE_FREE', 'PORT_TYPE_HOST', 'PORT_TYPE_DISK', 'PORT_TYPE_IPORT', 'PORT_TYPE_RCFC', 'PORT_TYPE_RCIP', 'PORT_TYPE_ISCSI', 'PORT_TYPE_PEER', 'PORT_TYPE_CNA', 'PORT_TYPE_FS', 'PORT_TYPE_UNKNOWN']):
            raise ValueError("must be one of enum values ('PORT_TYPE_FREE', 'PORT_TYPE_HOST', 'PORT_TYPE_DISK', 'PORT_TYPE_IPORT', 'PORT_TYPE_RCFC', 'PORT_TYPE_RCIP', 'PORT_TYPE_ISCSI', 'PORT_TYPE_PEER', 'PORT_TYPE_CNA', 'PORT_TYPE_FS', 'PORT_TYPE_UNKNOWN')")
        return value

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PORT_PROTOCOL_UNKNOWN', 'PORT_PROTOCOL_FC', 'PORT_PROTOCOL_ISCSCI', 'PORT_PROTOCOL_FCOE', 'PORT_PROTOCOL_IP', 'PORT_PROTOCOL_SAS', 'PORT_PROTOCOL_NVME']):
            raise ValueError("must be one of enum values ('PORT_PROTOCOL_UNKNOWN', 'PORT_PROTOCOL_FC', 'PORT_PROTOCOL_ISCSCI', 'PORT_PROTOCOL_FCOE', 'PORT_PROTOCOL_IP', 'PORT_PROTOCOL_SAS', 'PORT_PROTOCOL_NVME')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4HostVirtualPort from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4HostVirtualPort from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nodeWWN": obj.get("nodeWWN"),
            "portLinkState": obj.get("portLinkState"),
            "portType": obj.get("portType"),
            "portWWN": obj.get("portWWN"),
            "protocol": obj.get("protocol"),
            "vpi": obj.get("vpi")
        })
        return _obj


