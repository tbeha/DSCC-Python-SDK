# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from dscc.models.common_resource_attributes import CommonResourceAttributes
from dscc.models.device_type4_associated_links_inner import DeviceType4AssociatedLinksInner
from dscc.models.device_type4_pool_details_dedup_version import DeviceType4PoolDetailsDedupVersion
from dscc.models.device_type4_state import DeviceType4State
from dscc.models.device_type4allocation import DeviceType4allocation
from dscc.models.device_type4cpg_alert import DeviceType4cpgAlert
from dscc.models.device_type4cpg_grow import DeviceType4cpgGrow
from dscc.models.device_type4snap_space import DeviceType4snapSpace
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4PoolList(BaseModel):
    """
    DeviceType4PoolList
    """ # noqa: E501
    alert: Optional[DeviceType4cpgAlert] = None
    allocation_settings: Optional[DeviceType4allocation] = Field(default=None, alias="allocationSettings")
    ao_config_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Numeric ID of the AO config where the CPG is a member", alias="aoConfigID")
    associated_links: Optional[List[DeviceType4AssociatedLinksInner]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    base_size_mi_b: Optional[StrictInt] = Field(default=None, description="Number of LD MiB used in base virtual volumes. `Filter, Sort`", alias="baseSizeMiB")
    base_size_private_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of LD MiB private to individual base virtual volumes, not shared by deduplication", alias="baseSizePrivateMiB")
    base_size_raw_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of physical (raw) MiB used in base virtual volumes", alias="baseSizeRawMiB")
    common_resource_attributes: Optional[CommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    compact_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ratio between the virtual sizes of all volumes in the CPG and the amount of disk space they are currently using. Updated in Cloud Data Store at most once per 30 minutes.", alias="compactRatio")
    compress_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ratio between the amount of data written to Dedup Volumes and the amount that is not duplicated. Updated in Cloud Data Store at most once per 30 minutes.", alias="compressRatio")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    data_reduce_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ratio between the amount written to all volumes in the CPG and the amount of disk space used after compression and deduplication", alias="dataReduceRatio")
    dedup_capable: Optional[StrictBool] = Field(default=None, description="Indicates whether the CPG supports dedup", alias="dedupCapable")
    dedup_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ratio between the amount of data written to Dedup Volumes and the amount that is not duplicated", alias="dedupRatio")
    dedup_version: Optional[DeviceType4PoolDetailsDedupVersion] = Field(default=None, alias="dedupVersion")
    displayname: Optional[StrictStr] = Field(default=None, description="Name to be used for display purposes")
    domain: Optional[StrictStr] = Field(default=None, description="Name of the domain that the CPG belongs to")
    free_for_allocation_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated free space for volume allocation (MiB)", alias="freeForAllocationMiB")
    free_size_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of LD MiB allocated and available in the CPG. Updated in Cloud Data Store at most once per 30 minutes. `Filter, Sort`", alias="freeSizeMiB")
    free_size_raw_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of physical (raw) MiB allocated and available in the CPG. Updated in Cloud Data Store at most once per 30 minutes.", alias="freeSizeRawMiB")
    generation: Optional[StrictInt] = Field(default=None, description="generation `Filter, Sort`")
    id: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the resource. `Filter`")
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Name of the resource. `Filter, Sort`")
    number_of_snap_rc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of VVs used for Remote copy snapshot CPG usage", alias="numberOfSnapRC")
    number_of_tdvv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of TDVVs using the CPG", alias="numberOfTDVV")
    number_of_tpvv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of TPVVs using the CPG", alias="numberOfTPVV")
    number_of_user_rc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of VVs used for Remote copy user CPG usage", alias="numberOfUserRC")
    over_prov_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Ratio between the virtual sizes of all volumes and the amount of used and free disk spaces. Updated in Cloud Data Store at most once per 30 minutes.", alias="overProvRatio")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed storage-pool object", alias="resourceUri")
    sa_grow: Optional[DeviceType4cpgGrow] = Field(default=None, alias="saGrow")
    sd_grow: Optional[DeviceType4cpgGrow] = Field(default=None, alias="sdGrow")
    shared_size_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of LD MiB shared between volumes via deduplication", alias="sharedSizeMiB")
    snap_size_private_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of LD MiB private to individual snapshot virtual volumes, not shared by deduplication. Updated in Cloud Data Store at most once per 30 minutes.", alias="snapSizePrivateMiB")
    snap_size_raw_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of physical (raw) MiB used in snapshot virtual volumes. Updated in Cloud Data Store at most once per 30 minutes.", alias="snapSizeRawMiB")
    snap_space_admin: Optional[DeviceType4snapSpace] = Field(default=None, alias="snapSpaceAdmin")
    snap_space_data: Optional[DeviceType4snapSpace] = Field(default=None, alias="snapSpaceData")
    state: Optional[DeviceType4State] = None
    storage_pool_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Numeric ID of the resource. `Filter, Sort`", alias="storagePoolId")
    system_id: Optional[StrictStr] = Field(default=None, description="SystemID of the array. `Filter, Sort`", alias="systemId")
    total_reserved_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount of space reserved by CPG  (MiB)", alias="totalReservedMiB")
    total_size_mi_b: Optional[StrictInt] = Field(default=None, description="Total logical capacity in the user/snapshot space (MiB). `Filter, Sort`", alias="totalSizeMiB")
    total_size_raw_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total physical (raw) MiB in the user/snapshot space", alias="totalSizeRawMiB")
    type: Optional[StrictStr] = Field(default=None, description="type")
    user_space: Optional[DeviceType4snapSpace] = Field(default=None, alias="userSpace")
    warn_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Allocation warning percentage", alias="warnPercent")
    __properties: ClassVar[List[str]] = ["alert", "allocationSettings", "aoConfigID", "associatedLinks", "baseSizeMiB", "baseSizePrivateMiB", "baseSizeRawMiB", "commonResourceAttributes", "compactRatio", "compressRatio", "customerId", "dataReduceRatio", "dedupCapable", "dedupRatio", "dedupVersion", "displayname", "domain", "freeForAllocationMiB", "freeSizeMiB", "freeSizeRawMiB", "generation", "id", "name", "numberOfSnapRC", "numberOfTDVV", "numberOfTPVV", "numberOfUserRC", "overProvRatio", "resourceUri", "saGrow", "sdGrow", "sharedSizeMiB", "snapSizePrivateMiB", "snapSizeRawMiB", "snapSpaceAdmin", "snapSpaceData", "state", "storagePoolId", "systemId", "totalReservedMiB", "totalSizeMiB", "totalSizeRawMiB", "type", "userSpace", "warnPercent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4PoolList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alert
        if self.alert:
            _dict['alert'] = self.alert.to_dict()
        # override the default output from pydantic by calling `to_dict()` of allocation_settings
        if self.allocation_settings:
            _dict['allocationSettings'] = self.allocation_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dedup_version
        if self.dedup_version:
            _dict['dedupVersion'] = self.dedup_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sa_grow
        if self.sa_grow:
            _dict['saGrow'] = self.sa_grow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sd_grow
        if self.sd_grow:
            _dict['sdGrow'] = self.sd_grow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of snap_space_admin
        if self.snap_space_admin:
            _dict['snapSpaceAdmin'] = self.snap_space_admin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of snap_space_data
        if self.snap_space_data:
            _dict['snapSpaceData'] = self.snap_space_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_space
        if self.user_space:
            _dict['userSpace'] = self.user_space.to_dict()
        # set to None if alert (nullable) is None
        # and model_fields_set contains the field
        if self.alert is None and "alert" in self.model_fields_set:
            _dict['alert'] = None

        # set to None if allocation_settings (nullable) is None
        # and model_fields_set contains the field
        if self.allocation_settings is None and "allocation_settings" in self.model_fields_set:
            _dict['allocationSettings'] = None

        # set to None if associated_links (nullable) is None
        # and model_fields_set contains the field
        if self.associated_links is None and "associated_links" in self.model_fields_set:
            _dict['associatedLinks'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if dedup_version (nullable) is None
        # and model_fields_set contains the field
        if self.dedup_version is None and "dedup_version" in self.model_fields_set:
            _dict['dedupVersion'] = None

        # set to None if displayname (nullable) is None
        # and model_fields_set contains the field
        if self.displayname is None and "displayname" in self.model_fields_set:
            _dict['displayname'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if sa_grow (nullable) is None
        # and model_fields_set contains the field
        if self.sa_grow is None and "sa_grow" in self.model_fields_set:
            _dict['saGrow'] = None

        # set to None if sd_grow (nullable) is None
        # and model_fields_set contains the field
        if self.sd_grow is None and "sd_grow" in self.model_fields_set:
            _dict['sdGrow'] = None

        # set to None if snap_space_admin (nullable) is None
        # and model_fields_set contains the field
        if self.snap_space_admin is None and "snap_space_admin" in self.model_fields_set:
            _dict['snapSpaceAdmin'] = None

        # set to None if snap_space_data (nullable) is None
        # and model_fields_set contains the field
        if self.snap_space_data is None and "snap_space_data" in self.model_fields_set:
            _dict['snapSpaceData'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if user_space (nullable) is None
        # and model_fields_set contains the field
        if self.user_space is None and "user_space" in self.model_fields_set:
            _dict['userSpace'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4PoolList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alert": DeviceType4cpgAlert.from_dict(obj["alert"]) if obj.get("alert") is not None else None,
            "allocationSettings": DeviceType4allocation.from_dict(obj["allocationSettings"]) if obj.get("allocationSettings") is not None else None,
            "aoConfigID": obj.get("aoConfigID"),
            "associatedLinks": [DeviceType4AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "baseSizeMiB": obj.get("baseSizeMiB"),
            "baseSizePrivateMiB": obj.get("baseSizePrivateMiB"),
            "baseSizeRawMiB": obj.get("baseSizeRawMiB"),
            "commonResourceAttributes": CommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "compactRatio": obj.get("compactRatio"),
            "compressRatio": obj.get("compressRatio"),
            "customerId": obj.get("customerId"),
            "dataReduceRatio": obj.get("dataReduceRatio"),
            "dedupCapable": obj.get("dedupCapable"),
            "dedupRatio": obj.get("dedupRatio"),
            "dedupVersion": DeviceType4PoolDetailsDedupVersion.from_dict(obj["dedupVersion"]) if obj.get("dedupVersion") is not None else None,
            "displayname": obj.get("displayname"),
            "domain": obj.get("domain"),
            "freeForAllocationMiB": obj.get("freeForAllocationMiB"),
            "freeSizeMiB": obj.get("freeSizeMiB"),
            "freeSizeRawMiB": obj.get("freeSizeRawMiB"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "numberOfSnapRC": obj.get("numberOfSnapRC"),
            "numberOfTDVV": obj.get("numberOfTDVV"),
            "numberOfTPVV": obj.get("numberOfTPVV"),
            "numberOfUserRC": obj.get("numberOfUserRC"),
            "overProvRatio": obj.get("overProvRatio"),
            "resourceUri": obj.get("resourceUri"),
            "saGrow": DeviceType4cpgGrow.from_dict(obj["saGrow"]) if obj.get("saGrow") is not None else None,
            "sdGrow": DeviceType4cpgGrow.from_dict(obj["sdGrow"]) if obj.get("sdGrow") is not None else None,
            "sharedSizeMiB": obj.get("sharedSizeMiB"),
            "snapSizePrivateMiB": obj.get("snapSizePrivateMiB"),
            "snapSizeRawMiB": obj.get("snapSizeRawMiB"),
            "snapSpaceAdmin": DeviceType4snapSpace.from_dict(obj["snapSpaceAdmin"]) if obj.get("snapSpaceAdmin") is not None else None,
            "snapSpaceData": DeviceType4snapSpace.from_dict(obj["snapSpaceData"]) if obj.get("snapSpaceData") is not None else None,
            "state": DeviceType4State.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "storagePoolId": obj.get("storagePoolId"),
            "systemId": obj.get("systemId"),
            "totalReservedMiB": obj.get("totalReservedMiB"),
            "totalSizeMiB": obj.get("totalSizeMiB"),
            "totalSizeRawMiB": obj.get("totalSizeRawMiB"),
            "type": obj.get("type"),
            "userSpace": DeviceType4snapSpace.from_dict(obj["userSpace"]) if obj.get("userSpace") is not None else None,
            "warnPercent": obj.get("warnPercent")
        })
        return _obj


