# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.key_value import KeyValue
from dscc.models.nimble_volume_snap_attr import NimbleVolumeSnapAttr
from typing import Optional, Set
from typing_extensions import Self

class NimbleCreateSnapshotCollectionsInput(BaseModel):
    """
    Create {DeviceType-2} snapshot collections input. Create a snapshot collection. VSS application-synchronized snapshot collection must specify the 'allow_writes' parameter ans set it to 'true'.
    """ # noqa: E501
    agent_type: Optional[StrictStr] = Field(default=None, description="External management agent type for snapshots being created as part of snapshot collection. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'.")
    allow_writes: Optional[StrictBool] = Field(default=None, description="Atollow applications to write to created snapshot(s). Mandatory and must be set to 'true' for VSS application synchronized snapshots. Possible values: 'true', 'false'.")
    description: Optional[StrictStr] = Field(default=None, description="Text description of snapshot collection. String of up to 255 printable ASCII characters. Example: '99.9999% availability'.")
    disable_appsync: Optional[StrictBool] = Field(default=None, description="Do not perform application synchronization for this snapshot, create a crash-consistent snapshot instead. Possible values: 'true', 'false'.")
    invoke_on_upstream_partner: Optional[StrictBool] = Field(default=None, description="Invoke snapshot request on upstream partner. Possible values: 'true', 'false'.")
    is_external_trigger: Optional[StrictBool] = Field(default=None, description="Is externally triggered. Possible values: 'true', 'false'.")
    lock_period: Optional[StrictInt] = Field(default=None, description="Number of seconds to keep a snapshot as immutable.")
    metadata: Optional[List[Optional[KeyValue]]] = Field(default=None, description="Key-value pairs that augment a snapshot collection's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.")
    name: StrictStr = Field(description="Name of snapshot collection. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.")
    replicate: Optional[StrictBool] = Field(default=None, description="True if this snapshot collection has been marked for replication. Possible values: 'true', 'false'.")
    replicate_to: Optional[StrictStr] = Field(default=None, description="Specifies the partner name that the snapshots in this snapshot collection are replicated to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. Example: 'myobject-5'.")
    skip_db_consistency_check: Optional[StrictBool] = Field(default=None, description="Skip consistency check for database files on this snapshot. This option only applies to volume collections with application synchronization set to VSS, application ID set to MS Exchange 2010 or later with Database Availability Group (DAG), snap_verify option set to true, and disable_appsync option set to false. Possible values: 'true', 'false'.")
    snap_verify: Optional[StrictBool] = Field(default=None, description="Run verification tool on this snapshot. This option can only be used with a volume collection that has application synchronization. Possible values: 'true', 'false'.")
    start_online: Optional[StrictBool] = Field(default=None, description="Start with snapshot set online. Possible values: 'true', 'false'.")
    vol_snap_attr_list: Optional[List[Optional[NimbleVolumeSnapAttr]]] = Field(default=None, description="List of snapshot attributes for snapshots being created as part of snapshot collection creation. List of volumes with per snapshot attributes.")
    __properties: ClassVar[List[str]] = ["agent_type", "allow_writes", "description", "disable_appsync", "invoke_on_upstream_partner", "is_external_trigger", "lock_period", "metadata", "name", "replicate", "replicate_to", "skip_db_consistency_check", "snap_verify", "start_online", "vol_snap_attr_list"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleCreateSnapshotCollectionsInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item in self.metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vol_snap_attr_list (list)
        _items = []
        if self.vol_snap_attr_list:
            for _item in self.vol_snap_attr_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vol_snap_attr_list'] = _items
        # set to None if agent_type (nullable) is None
        # and model_fields_set contains the field
        if self.agent_type is None and "agent_type" in self.model_fields_set:
            _dict['agent_type'] = None

        # set to None if allow_writes (nullable) is None
        # and model_fields_set contains the field
        if self.allow_writes is None and "allow_writes" in self.model_fields_set:
            _dict['allow_writes'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if disable_appsync (nullable) is None
        # and model_fields_set contains the field
        if self.disable_appsync is None and "disable_appsync" in self.model_fields_set:
            _dict['disable_appsync'] = None

        # set to None if invoke_on_upstream_partner (nullable) is None
        # and model_fields_set contains the field
        if self.invoke_on_upstream_partner is None and "invoke_on_upstream_partner" in self.model_fields_set:
            _dict['invoke_on_upstream_partner'] = None

        # set to None if is_external_trigger (nullable) is None
        # and model_fields_set contains the field
        if self.is_external_trigger is None and "is_external_trigger" in self.model_fields_set:
            _dict['is_external_trigger'] = None

        # set to None if lock_period (nullable) is None
        # and model_fields_set contains the field
        if self.lock_period is None and "lock_period" in self.model_fields_set:
            _dict['lock_period'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if replicate (nullable) is None
        # and model_fields_set contains the field
        if self.replicate is None and "replicate" in self.model_fields_set:
            _dict['replicate'] = None

        # set to None if replicate_to (nullable) is None
        # and model_fields_set contains the field
        if self.replicate_to is None and "replicate_to" in self.model_fields_set:
            _dict['replicate_to'] = None

        # set to None if skip_db_consistency_check (nullable) is None
        # and model_fields_set contains the field
        if self.skip_db_consistency_check is None and "skip_db_consistency_check" in self.model_fields_set:
            _dict['skip_db_consistency_check'] = None

        # set to None if snap_verify (nullable) is None
        # and model_fields_set contains the field
        if self.snap_verify is None and "snap_verify" in self.model_fields_set:
            _dict['snap_verify'] = None

        # set to None if start_online (nullable) is None
        # and model_fields_set contains the field
        if self.start_online is None and "start_online" in self.model_fields_set:
            _dict['start_online'] = None

        # set to None if vol_snap_attr_list (nullable) is None
        # and model_fields_set contains the field
        if self.vol_snap_attr_list is None and "vol_snap_attr_list" in self.model_fields_set:
            _dict['vol_snap_attr_list'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleCreateSnapshotCollectionsInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agent_type": obj.get("agent_type"),
            "allow_writes": obj.get("allow_writes"),
            "description": obj.get("description"),
            "disable_appsync": obj.get("disable_appsync"),
            "invoke_on_upstream_partner": obj.get("invoke_on_upstream_partner"),
            "is_external_trigger": obj.get("is_external_trigger"),
            "lock_period": obj.get("lock_period"),
            "metadata": [KeyValue.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "name": obj.get("name"),
            "replicate": obj.get("replicate"),
            "replicate_to": obj.get("replicate_to"),
            "skip_db_consistency_check": obj.get("skip_db_consistency_check"),
            "snap_verify": obj.get("snap_verify"),
            "start_online": obj.get("start_online"),
            "vol_snap_attr_list": [NimbleVolumeSnapAttr.from_dict(_item) for _item in obj["vol_snap_attr_list"]] if obj.get("vol_snap_attr_list") is not None else None
        })
        return _obj


