# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ResourceContentionContributors(BaseModel):
    """
    Top volume contributors for resource contention response structure
    """ # noqa: E501
    appset_type: Optional[StrictStr] = Field(default=None, description="Appset Type", alias="appsetType")
    prov_type: Optional[StrictStr] = Field(default=None, description="Provisioning Type", alias="provType")
    read_latency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Read Latency", alias="readLatency")
    read_throughput: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Read Throughput", alias="readThroughput")
    total_iops: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total Iops", alias="totalIops")
    volume_name: Optional[StrictStr] = Field(default=None, description="VolumeName", alias="volumeName")
    volume_status: Optional[StrictStr] = Field(default=None, description="Volume Status", alias="volumeStatus")
    volume_uid: Optional[StrictStr] = Field(default=None, description="VolumeId", alias="volumeUid")
    volume_wwn: Optional[StrictStr] = Field(default=None, description="VolumeWWN", alias="volumeWWN")
    write_latency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Write Latency", alias="writeLatency")
    write_throughput: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Write Throughput", alias="writeThroughput")
    __properties: ClassVar[List[str]] = ["appsetType", "provType", "readLatency", "readThroughput", "totalIops", "volumeName", "volumeStatus", "volumeUid", "volumeWWN", "writeLatency", "writeThroughput"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceContentionContributors from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceContentionContributors from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appsetType": obj.get("appsetType"),
            "provType": obj.get("provType"),
            "readLatency": obj.get("readLatency"),
            "readThroughput": obj.get("readThroughput"),
            "totalIops": obj.get("totalIops"),
            "volumeName": obj.get("volumeName"),
            "volumeStatus": obj.get("volumeStatus"),
            "volumeUid": obj.get("volumeUid"),
            "volumeWWN": obj.get("volumeWWN"),
            "writeLatency": obj.get("writeLatency"),
            "writeThroughput": obj.get("writeThroughput")
        })
        return _obj


