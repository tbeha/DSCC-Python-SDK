# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DiskFilterableFieldsWithoutFilter(BaseModel):
    """
    DiskFilterableFieldsWithoutFilter
    """ # noqa: E501
    array_id: Optional[StrictStr] = Field(default=None, description="ID of array the disk belongs to. A 42 digit hexadecimal number.")
    array_name: Optional[StrictStr] = Field(default=None, description="Name of array the disk belongs to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    disk_type: Optional[StrictStr] = Field(default=None, description="Type of disk (HDD, SSD, N/A). Disk type. Possible values: 'hdd', 'ssd'.")
    id: Optional[StrictStr] = Field(default=None, description="Identifier of disk. A 42 digit hexadecimal number.")
    model: Optional[StrictStr] = Field(default=None, description="Disk model name.")
    serial: Optional[StrictStr] = Field(default=None, description="Disk serial number(N/A if empty).")
    shelf_id: Optional[StrictStr] = Field(default=None, description="Identifies the physical shelf the disk belongs to. A 42 digit hexadecimal number.")
    shelf_serial: Optional[StrictStr] = Field(default=None, description="Serial number of the shelf the disk is attached to.")
    state: Optional[StrictStr] = Field(default=None, description="Disk hardware state. Disk state. Possible values: 'valid', 'in use', 'failed', absent', 'removed', 'void', 't_fail', 'foreign'.")
    __properties: ClassVar[List[str]] = ["array_id", "array_name", "disk_type", "id", "model", "serial", "shelf_id", "shelf_serial", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiskFilterableFieldsWithoutFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if array_id (nullable) is None
        # and model_fields_set contains the field
        if self.array_id is None and "array_id" in self.model_fields_set:
            _dict['array_id'] = None

        # set to None if array_name (nullable) is None
        # and model_fields_set contains the field
        if self.array_name is None and "array_name" in self.model_fields_set:
            _dict['array_name'] = None

        # set to None if disk_type (nullable) is None
        # and model_fields_set contains the field
        if self.disk_type is None and "disk_type" in self.model_fields_set:
            _dict['disk_type'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict['model'] = None

        # set to None if serial (nullable) is None
        # and model_fields_set contains the field
        if self.serial is None and "serial" in self.model_fields_set:
            _dict['serial'] = None

        # set to None if shelf_id (nullable) is None
        # and model_fields_set contains the field
        if self.shelf_id is None and "shelf_id" in self.model_fields_set:
            _dict['shelf_id'] = None

        # set to None if shelf_serial (nullable) is None
        # and model_fields_set contains the field
        if self.shelf_serial is None and "shelf_serial" in self.model_fields_set:
            _dict['shelf_serial'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiskFilterableFieldsWithoutFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "array_id": obj.get("array_id"),
            "array_name": obj.get("array_name"),
            "disk_type": obj.get("disk_type"),
            "id": obj.get("id"),
            "model": obj.get("model"),
            "serial": obj.get("serial"),
            "shelf_id": obj.get("shelf_id"),
            "shelf_serial": obj.get("shelf_serial"),
            "state": obj.get("state")
        })
        return _obj


