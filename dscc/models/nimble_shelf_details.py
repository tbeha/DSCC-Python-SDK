# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.nimble_common_resource_attributes import NimbleCommonResourceAttributes
from dscc.models.nimble_ns_disk_set_attr import NimbleNsDiskSetAttr
from dscc.models.nimble_ns_shelf_ctrlr import NimbleNsShelfCtrlr
from dscc.models.nimble_ns_shelf_sensor import NimbleNsShelfSensor
from typing import Optional, Set
from typing_extensions import Self

class NimbleShelfDetails(BaseModel):
    """
    NimbleShelfDetails
    """ # noqa: E501
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details")
    chassis_sensors: Optional[List[Optional[NimbleNsShelfSensor]]] = Field(default=None, description="List of chassis sensor readings.")
    chassis_type: Optional[StrictStr] = Field(default=None, description="Chassis type. Possible values: 'chassis_unknown', 'chassis_3u16', 'chassis_4u24', 'chassis_nmbl_2u12', 'chassis_nmbl_4u24'")
    common_resource_attributes: Optional[NimbleCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    ctrlrs: Optional[List[Optional[NimbleNsShelfCtrlr]]] = Field(default=None, description="List of ctrlr info.")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    disk_sets: Optional[List[Optional[NimbleNsDiskSetAttr]]] = Field(default=None, description="Attributes for the disk sets in this shelf.")
    fan_overall_status: Optional[StrictStr] = Field(default=None, description="The overall status for the fans on both controllers. Possible values: 'OK', 'Alerted', 'Failed', 'Missing'.")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    model_ext: Optional[StrictStr] = Field(default=None, description="Extended model of the shelf or head unit.")
    psu_overall_status: Optional[StrictStr] = Field(default=None, description="The overall status for the PSUs. Possible values: 'OK', 'Alerted', 'Failed', 'Missing'.")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Link to the object URI", alias="resourceUri")
    temp_overall_status: Optional[StrictStr] = Field(default=None, description="The overall status for the temperature on both controllers. Possible values: 'OK', 'Alerted', 'Failed', 'Missing'.")
    type: Optional[StrictStr] = Field(default=None, description="type")
    __properties: ClassVar[List[str]] = ["associated_links", "chassis_sensors", "chassis_type", "commonResourceAttributes", "consoleUri", "ctrlrs", "customerId", "disk_sets", "fan_overall_status", "generation", "model_ext", "psu_overall_status", "resourceUri", "temp_overall_status", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleShelfDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associated_links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in chassis_sensors (list)
        _items = []
        if self.chassis_sensors:
            for _item in self.chassis_sensors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chassis_sensors'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ctrlrs (list)
        _items = []
        if self.ctrlrs:
            for _item in self.ctrlrs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ctrlrs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in disk_sets (list)
        _items = []
        if self.disk_sets:
            for _item in self.disk_sets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['disk_sets'] = _items
        # set to None if chassis_sensors (nullable) is None
        # and model_fields_set contains the field
        if self.chassis_sensors is None and "chassis_sensors" in self.model_fields_set:
            _dict['chassis_sensors'] = None

        # set to None if chassis_type (nullable) is None
        # and model_fields_set contains the field
        if self.chassis_type is None and "chassis_type" in self.model_fields_set:
            _dict['chassis_type'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if ctrlrs (nullable) is None
        # and model_fields_set contains the field
        if self.ctrlrs is None and "ctrlrs" in self.model_fields_set:
            _dict['ctrlrs'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if disk_sets (nullable) is None
        # and model_fields_set contains the field
        if self.disk_sets is None and "disk_sets" in self.model_fields_set:
            _dict['disk_sets'] = None

        # set to None if fan_overall_status (nullable) is None
        # and model_fields_set contains the field
        if self.fan_overall_status is None and "fan_overall_status" in self.model_fields_set:
            _dict['fan_overall_status'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if model_ext (nullable) is None
        # and model_fields_set contains the field
        if self.model_ext is None and "model_ext" in self.model_fields_set:
            _dict['model_ext'] = None

        # set to None if psu_overall_status (nullable) is None
        # and model_fields_set contains the field
        if self.psu_overall_status is None and "psu_overall_status" in self.model_fields_set:
            _dict['psu_overall_status'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if temp_overall_status (nullable) is None
        # and model_fields_set contains the field
        if self.temp_overall_status is None and "temp_overall_status" in self.model_fields_set:
            _dict['temp_overall_status'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleShelfDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associated_links": [AssociatedLinksInner.from_dict(_item) for _item in obj["associated_links"]] if obj.get("associated_links") is not None else None,
            "chassis_sensors": [NimbleNsShelfSensor.from_dict(_item) for _item in obj["chassis_sensors"]] if obj.get("chassis_sensors") is not None else None,
            "chassis_type": obj.get("chassis_type"),
            "commonResourceAttributes": NimbleCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "ctrlrs": [NimbleNsShelfCtrlr.from_dict(_item) for _item in obj["ctrlrs"]] if obj.get("ctrlrs") is not None else None,
            "customerId": obj.get("customerId"),
            "disk_sets": [NimbleNsDiskSetAttr.from_dict(_item) for _item in obj["disk_sets"]] if obj.get("disk_sets") is not None else None,
            "fan_overall_status": obj.get("fan_overall_status"),
            "generation": obj.get("generation"),
            "model_ext": obj.get("model_ext"),
            "psu_overall_status": obj.get("psu_overall_status"),
            "resourceUri": obj.get("resourceUri"),
            "temp_overall_status": obj.get("temp_overall_status"),
            "type": obj.get("type")
        })
        return _obj


