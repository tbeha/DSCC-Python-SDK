# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.nimble_array_net import NimbleArrayNet
from dscc.models.nimble_common_resource_attributes import NimbleCommonResourceAttributes
from dscc.models.nimble_route import NimbleRoute
from dscc.models.nimble_subnet import NimbleSubnet
from typing import Optional, Set
from typing_extensions import Self

class NimbleNetworkSettingsDetailsWithRequestUri(BaseModel):
    """
    NimbleNetworkSettingsDetailsWithRequestUri
    """ # noqa: E501
    request_uri: Optional[StrictStr] = Field(default=None, description="requestUri for detailed network setting object", alias="requestUri")
    id: Optional[StrictStr] = Field(default=None, description="Identifier for network settings.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the network configuration. Possible values: 'active', 'backup', 'draft'")
    role: Optional[StrictStr] = Field(default=None, description="Role of network configuration. Possible values: 'active', 'backup', 'draft'")
    active_since: Optional[StrictInt] = Field(default=None, description="Start time of activity.")
    array_list: Optional[List[Optional[NimbleArrayNet]]] = Field(default=None, description="List of array network configs.")
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    common_resource_attributes: Optional[NimbleCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    creation_time: Optional[StrictInt] = Field(default=None, description="Time when this net configuration was created.")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    group_leader_array: Optional[StrictStr] = Field(default=None, description="Name of the group leader array.")
    iscsi_automatic_connection_method: Optional[StrictBool] = Field(default=None, description="Indicates whether automatic connection method is enabled.")
    iscsi_connection_rebalancing: Optional[StrictBool] = Field(default=None, description="Indicates whether rebalancing is enabled.")
    last_active: Optional[StrictInt] = Field(default=None, description="Time of last activity.")
    last_modified: Optional[StrictInt] = Field(default=None, description="Time when this network configuration was last modified.")
    mgmt_ip: Optional[StrictStr] = Field(default=None, description="Management IP address for the Group.")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Link to the object URI", alias="resourceUri")
    route_list: Optional[List[Optional[NimbleRoute]]] = Field(default=None, description="List of static routes.")
    secondary_mgmt_ip: Optional[StrictStr] = Field(default=None, description="Secondary management IP address for the Group.")
    subnet_list: Optional[List[Optional[NimbleSubnet]]] = Field(default=None, description="List of subnet configs.")
    type: Optional[StrictStr] = Field(default=None, description="type")
    __properties: ClassVar[List[str]] = ["id", "name", "role", "active_since", "array_list", "associatedLinks", "commonResourceAttributes", "consoleUri", "creation_time", "customerId", "generation", "group_leader_array", "iscsi_automatic_connection_method", "iscsi_connection_rebalancing", "last_active", "last_modified", "mgmt_ip", "resourceUri", "route_list", "secondary_mgmt_ip", "subnet_list", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleNetworkSettingsDetailsWithRequestUri from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in array_list (list)
        _items = []
        if self.array_list:
            for _item in self.array_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['array_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in route_list (list)
        _items = []
        if self.route_list:
            for _item in self.route_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['route_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subnet_list (list)
        _items = []
        if self.subnet_list:
            for _item in self.subnet_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subnet_list'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict['role'] = None

        # set to None if active_since (nullable) is None
        # and model_fields_set contains the field
        if self.active_since is None and "active_since" in self.model_fields_set:
            _dict['active_since'] = None

        # set to None if array_list (nullable) is None
        # and model_fields_set contains the field
        if self.array_list is None and "array_list" in self.model_fields_set:
            _dict['array_list'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if creation_time (nullable) is None
        # and model_fields_set contains the field
        if self.creation_time is None and "creation_time" in self.model_fields_set:
            _dict['creation_time'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if group_leader_array (nullable) is None
        # and model_fields_set contains the field
        if self.group_leader_array is None and "group_leader_array" in self.model_fields_set:
            _dict['group_leader_array'] = None

        # set to None if iscsi_automatic_connection_method (nullable) is None
        # and model_fields_set contains the field
        if self.iscsi_automatic_connection_method is None and "iscsi_automatic_connection_method" in self.model_fields_set:
            _dict['iscsi_automatic_connection_method'] = None

        # set to None if iscsi_connection_rebalancing (nullable) is None
        # and model_fields_set contains the field
        if self.iscsi_connection_rebalancing is None and "iscsi_connection_rebalancing" in self.model_fields_set:
            _dict['iscsi_connection_rebalancing'] = None

        # set to None if last_active (nullable) is None
        # and model_fields_set contains the field
        if self.last_active is None and "last_active" in self.model_fields_set:
            _dict['last_active'] = None

        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['last_modified'] = None

        # set to None if mgmt_ip (nullable) is None
        # and model_fields_set contains the field
        if self.mgmt_ip is None and "mgmt_ip" in self.model_fields_set:
            _dict['mgmt_ip'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if route_list (nullable) is None
        # and model_fields_set contains the field
        if self.route_list is None and "route_list" in self.model_fields_set:
            _dict['route_list'] = None

        # set to None if secondary_mgmt_ip (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_mgmt_ip is None and "secondary_mgmt_ip" in self.model_fields_set:
            _dict['secondary_mgmt_ip'] = None

        # set to None if subnet_list (nullable) is None
        # and model_fields_set contains the field
        if self.subnet_list is None and "subnet_list" in self.model_fields_set:
            _dict['subnet_list'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleNetworkSettingsDetailsWithRequestUri from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "role": obj.get("role"),
            "active_since": obj.get("active_since"),
            "array_list": [NimbleArrayNet.from_dict(_item) for _item in obj["array_list"]] if obj.get("array_list") is not None else None,
            "associatedLinks": [AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "commonResourceAttributes": NimbleCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "creation_time": obj.get("creation_time"),
            "customerId": obj.get("customerId"),
            "generation": obj.get("generation"),
            "group_leader_array": obj.get("group_leader_array"),
            "iscsi_automatic_connection_method": obj.get("iscsi_automatic_connection_method"),
            "iscsi_connection_rebalancing": obj.get("iscsi_connection_rebalancing"),
            "last_active": obj.get("last_active"),
            "last_modified": obj.get("last_modified"),
            "mgmt_ip": obj.get("mgmt_ip"),
            "resourceUri": obj.get("resourceUri"),
            "route_list": [NimbleRoute.from_dict(_item) for _item in obj["route_list"]] if obj.get("route_list") is not None else None,
            "secondary_mgmt_ip": obj.get("secondary_mgmt_ip"),
            "subnet_list": [NimbleSubnet.from_dict(_item) for _item in obj["subnet_list"]] if obj.get("subnet_list") is not None else None,
            "type": obj.get("type")
        })
        return _obj


