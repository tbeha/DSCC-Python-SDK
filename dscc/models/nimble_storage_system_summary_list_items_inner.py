# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dscc.models.array_unassign_mig_status import ArrayUnassignMigStatus
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.encryption_settings import EncryptionSettings
from dscc.models.ip_address_object import IPAddressObject
from dscc.models.nimble_array_list import NimbleArrayList
from dscc.models.nimble_common_resource_attributes import NimbleCommonResourceAttributes
from dscc.models.nimble_error_with_arguments import NimbleErrorWithArguments
from dscc.models.nimble_syslogd_server_info import NimbleSyslogdServerInfo
from dscc.models.pool_rebalance_mig_status import PoolRebalanceMigStatus
from dscc.models.system_headroom import SystemHeadroom
from dscc.models.throttle import Throttle
from dscc.models.vol_fam_mig_status import VolFamMigStatus
from dscc.models.witness_test_response import WitnessTestResponse
from typing import Optional, Set
from typing_extensions import Self

class NimbleStorageSystemSummaryListItemsInner(BaseModel):
    """
    NimbleStorageSystemSummaryListItemsInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Identifier of the group. A 42 digit hexadecimal number. `Filter`")
    name: Optional[StrictStr] = Field(default=None, description="Name of the group. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`")
    access_protocol_list: Optional[List[Optional[StrictStr]]] = Field(default=None, description="Protocol used to access this group. List of access protocols.")
    alarms_enabled: Optional[StrictBool] = Field(default=None, description="Whether alarm feature is enabled.")
    alert_from_email_addr: Optional[StrictStr] = Field(default=None, description="From email address to use while sending emails. Case insensitive email address.")
    alert_min_level: Optional[StrictStr] = Field(default=None, description="Minimum level of alert to be notified. Possible values: 'info', 'notice', 'warning', 'critical'.")
    alert_to_email_addrs: Optional[StrictStr] = Field(default=None, description="Comma-separated list of email addresss to receive emails. Comma separated email list.")
    allow_support_tunnel: Optional[StrictBool] = Field(default=None, description="Whether to allow support tunnel.")
    array_unassign_migration_status: Optional[List[Optional[ArrayUnassignMigStatus]]] = Field(default=None, description="Data migration status for arrays being removed from their pool. Data migration status information for arrays being unassigned from their pool.")
    arrays: Optional[NimbleArrayList] = None
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details")
    auto_switchover_enabled: Optional[StrictBool] = Field(default=None, description="Whether automatic switchover of Group management services feature is enabled.")
    auto_switchover_messages: Optional[List[Optional[NimbleErrorWithArguments]]] = Field(default=None, description="List of validation messages for automatic switchover of Group Management. This will be empty when there are no conflicts found.")
    autoclean_unmanaged_snapshots_enabled: Optional[StrictBool] = Field(default=None, description="Whether auto-clean unmanaged snapshots feature is enabled.")
    autoclean_unmanaged_snapshots_ttl_unit: Optional[StrictInt] = Field(default=None, description="Deprecated. Unit for unmanaged snapshot time to live.")
    autosupport_enabled: Optional[StrictBool] = Field(default=None, description="Whether to send autosupport.")
    cc_mode_enabled: Optional[StrictBool] = Field(default=None, description="Enable or disable Common Criteria mode.")
    clone_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Clone savings for the group expressed as ratio. Fraction expressed as floating point number.")
    cloud_management: Optional[StrictStr] = Field(default=None, description="Specifies the mode of operation in cloud. Possible values are 'off', 'read_write', 'read_only'.")
    common_resource_attributes: Optional[NimbleCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    compressed_snap_usage_bytes: Optional[StrictInt] = Field(default=None, description="Compressed usage of snapshots in the group.")
    compressed_vol_usage_bytes: Optional[StrictInt] = Field(default=None, description="Compressed usage of volumes in the group.")
    compression_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Compression savings for the group expressed as ratio. Fraction expressed as floating point number.")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    data_rebalance_status: Optional[List[Optional[PoolRebalanceMigStatus]]] = Field(default=None, description="Status of data rebalancing operations for pools in the group. Status of data re-balancing operations for a list of pools.")
    data_reduction_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Space savings in the group that does not include thin-provisioning savings expressed as ratio. Fraction expressed as floating point number.")
    var_date: Optional[StrictInt] = Field(default=None, description="Unix epoch time local to the group. Seconds since last epoch i.e. 00:00 January 1, 1970.", alias="date")
    dedupe_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Dedupe savings for the group expressed as ratio. Fraction expressed as floating point number.")
    default_iscsi_target_scope: Optional[StrictStr] = Field(default=None, description="Newly created volumes are exported under iSCSI Group Target or iSCSI Volume Target.")
    default_snap_limit_percent: Optional[StrictInt] = Field(default=None, description="Default limit for a volumes snapshot space usage, expressed either as a percentage of the volumes size or as -1 to indicate that there is no limit. A volume will be taken offline or made non-writable upon exceeding its snapshot limit. Signed 64-bit integer.")
    default_snap_reserve: Optional[StrictInt] = Field(default=None, description="Amount of space to reserve for snapshots of a volume as a percentage of volume size.")
    default_snap_warn_level: Optional[StrictInt] = Field(default=None, description="Default threshold for snapshot space usage of a volume as a percentage of volume size above which an alert is raised.")
    default_volume_limit: Optional[StrictInt] = Field(default=None, description="Default limit for a volume space usage as a percentage of volume size. Volume will be taken offline/made non-writable on exceeding its limit. Percentage as integer from 0 to 100.")
    default_volume_reserve: Optional[StrictInt] = Field(default=None, description="Amount of space to reserve for a volume as a percentage of volume size. Percentage as integer from 0 to 100.")
    default_volume_warn_level: Optional[StrictInt] = Field(default=None, description="Default threshold for volume space usage as a percentage of volume size above which an alert is raised. Percentage as integer from 0 to 100.")
    dns_servers: Optional[List[Optional[IPAddressObject]]] = Field(default=None, description="IP addresses for this groups dns servers. List of IP Addresses.")
    domain_name: Optional[StrictStr] = Field(default=None, description="Domain name for this group. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.")
    encryption_config: Optional[EncryptionSettings] = None
    failover_mode: Optional[StrictStr] = Field(default=None, description="Failover mode of the group Management Service. Possible values: 'Manual', 'Automatic'.")
    fc_enabled: Optional[StrictBool] = Field(default=None, description="Whether FC is enabled on this group.")
    free_space: Optional[StrictInt] = Field(default=None, description="Free space of the pool in bytes.")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    group_snapshot_ttl: Optional[StrictInt] = Field(default=None, description="Snapshot Time-to-live(TTL) configured at group level for automatic deletion of unmanaged snapshots. Value 0 indicates unlimited TTL.")
    group_target_enabled: Optional[StrictBool] = Field(default=None, description="Is group_target enabled on this group.")
    group_target_name: Optional[StrictStr] = Field(default=None, description="Iscsi target name for this group. Plain string.")
    iscsi_automatic_connection_method: Optional[StrictBool] = Field(default=None, description="Is iscsi reconnection automatic.")
    iscsi_connection_rebalancing: Optional[StrictBool] = Field(default=None, description="Does ISCSI automatically rebalance connections.")
    iscsi_enabled: Optional[StrictBool] = Field(default=None, description="Whether iSCSI is enabled on this group.")
    isns_enabled: Optional[StrictBool] = Field(default=None, description="Whether iSNS is enabled.")
    isns_port: Optional[StrictInt] = Field(default=None, description="Port number for iSNS Server. Positive integer value up to 65535 representing TCP/IP port.")
    isns_server: Optional[StrictStr] = Field(default=None, description="Hostname or IP Address of iSNS Server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.")
    last_login: Optional[StrictStr] = Field(default=None, description="Time and user of last login to this group. Plain string.")
    leader_array_name: Optional[StrictStr] = Field(default=None, description="Name of the array where the group Management Service is running.")
    leader_array_serial: Optional[StrictStr] = Field(default=None, description="Serial number of the array where the group Management Service is running.")
    management_service_backup_array_name: Optional[StrictStr] = Field(default=None, description="Name of the array where backup the group Management Service is running.")
    management_service_backup_status: Optional[StrictStr] = Field(default=None, description="HA status of the group Management Service. Possible values: 'in_sync', 'remove_in_progress', 'yet_to_setup', 'unsetup_in_progress', 'setup_in_progress', 'out_of_sync', 'add_in_progress', 'setup_failed'.")
    max_lock_period: Optional[StrictInt] = Field(default=None, description="Maximum seconds to keep any snapshot as immutable within a Nimble group. Default value would be 1209600 seconds.")
    member_list: Optional[List[Optional[StrictStr]]] = Field(default=None, description="Members of this group. A list of object names.")
    merge_group_name: Optional[StrictStr] = Field(default=None, description="Group that were being merged with. Plain string.")
    merge_state: Optional[StrictStr] = Field(default=None, description="State of group merge. Possible values: 'dset_start', 'dest_DB', 'dest_DB_done', 'dest_reassigned', 'dest_relinquish', 'dest_DB_failed', 'src_start', 'src_quiesced', 'src_reassigned', 'src_quiesce_failed', 'src_reassign_failed', 'none'.")
    ntp_server: Optional[StrictStr] = Field(default=None, description="Either IP address or hostname of the NTP server for this group. Plain string.")
    num_connections: Optional[StrictInt] = Field(default=None, description="Number of connections to the group.")
    num_snapcolls: Optional[StrictInt] = Field(default=None, description="Number of snapshot collections in this group.")
    num_snaps: Optional[StrictInt] = Field(default=None, description="Number of snapshots in the group.")
    pending_deletes: Optional[StrictInt] = Field(default=None, description="Usage for blocks that are not yet deleted.")
    proxy_port: Optional[StrictInt] = Field(default=None, description="Proxy Port of HTTP Proxy Server. Integer value between 0-65535 representing TCP/IP port.")
    proxy_server: Optional[StrictStr] = Field(default=None, description="Hostname or IP Address of HTTP Proxy Server. Setting this attribute to an empty string will unset all proxy settings. String of alphanumeric characters, can be an empty string, or valid range must be from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.")
    proxy_username: Optional[StrictStr] = Field(default=None, description="Username to authenticate with HTTP Proxy Server. HTTP proxy server username, string up to 255 characters, special characters ([, ], `, ;, ampersand, tab, space, newline) are not allowed.")
    raw_cache_capacity: Optional[StrictInt] = Field(default=None, description="Total cache capacity of the group.")
    raw_capacity: Optional[StrictInt] = Field(default=None, description="Total capacity of the group.")
    repl_throttle_list: Optional[List[Optional[Throttle]]] = Field(default=None, description="All the replication bandwidth limits on the system. All the throttles for the partner.")
    repl_throttled_bandwidth: Optional[StrictInt] = Field(default=None, description="Current bandwidth throttle for replication, expressed either as megabits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.")
    repl_throttled_bandwidth_kbps: Optional[StrictInt] = Field(default=None, description="Current bandwidth throttle for replication, expressed either as kilobits per second or as -1 to indicate that there is no throttle. Signed 64-bit integer.")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Link to the object URI", alias="resourceUri")
    savings: Optional[StrictInt] = Field(default=None, description="Overall space usage savings in the group.")
    savings_clone: Optional[StrictInt] = Field(default=None, description="Space usage savings in the group due to cloning of volumes.")
    savings_compression: Optional[StrictInt] = Field(default=None, description="Space usage savings in the group due to compression.")
    savings_data_reduction: Optional[StrictInt] = Field(default=None, description="Space usage savings in the group that does not include thin-provisioning savings.")
    savings_dedupe: Optional[StrictInt] = Field(default=None, description="Space usage savings in the group due to deduplication.")
    savings_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Overall savings in the group expressed as ratio. Fraction expressed as floating point number.")
    savings_vol_thin_provisioning: Optional[StrictInt] = Field(default=None, description="Space usage savings in the group due to thin provisioning of volumes.")
    scsi_vendor_id: Optional[StrictStr] = Field(default=None, description="SCSI vendor ID. Plain string.")
    send_alert_to_support: Optional[StrictBool] = Field(default=None, description="Whether to send alert to Support.")
    smtp_port: Optional[StrictInt] = Field(default=None, description="Port number of SMTP Server. Positive integer value up to 65535 representing TCP/IP port.")
    smtp_server: Optional[StrictStr] = Field(default=None, description="Hostname or IP Address of SMTP Server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.")
    snap_compression_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Compression ratio of snapshots in the group. Fraction expressed as floating point number.")
    snap_retn_meter_high: Optional[StrictInt] = Field(default=None, description="Threshold for considering a volume as high retention.")
    snap_retn_meter_very_high: Optional[StrictInt] = Field(default=None, description="Threshold for considering a volume as very high retention.")
    snap_usage_populated: Optional[StrictInt] = Field(default=None, description="Total snapshot usage as if each snapshot is deep copy of the volume.")
    snmp_community: Optional[StrictStr] = Field(default=None, description="Community string to be used with SNMP. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    snmp_get_enabled: Optional[StrictBool] = Field(default=None, description="Whether to accept SNMP get commands.")
    snmp_get_port: Optional[StrictInt] = Field(default=None, description="Port number to which SNMP get requests should be sent. Positive integer value up to 65535 representing TCP/IP port.")
    snmp_sys_contact: Optional[StrictStr] = Field(default=None, description="Name of the SNMP administrator. Plain string.")
    snmp_sys_location: Optional[StrictStr] = Field(default=None, description="Location of the group. Plain string.")
    snmp_trap_enabled: Optional[StrictBool] = Field(default=None, description="Whether to enable SNMP traps.")
    snmp_trap_host: Optional[StrictStr] = Field(default=None, description="Hostname or IP Address to send SNMP traps. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.")
    snmp_trap_port: Optional[StrictInt] = Field(default=None, description="Port number of SNMP trap host. Positive integer value up to 65535 representing TCP/IP port.")
    space_info_valid: Optional[StrictBool] = Field(default=None, description="Is space info for this group valid.")
    syslogd_enabled: Optional[StrictBool] = Field(default=None, description="Is syslogd enabled on this system.")
    syslogd_port: Optional[StrictInt] = Field(default=None, description="Port number for syslogd server. Positive integer value up to 65535 representing TCP/IP port.")
    syslogd_server: Optional[StrictStr] = Field(default=None, description="Hostname of the syslogd server. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.")
    syslogd_servers: Optional[List[NimbleSyslogdServerInfo]] = Field(default=None, description="syslogd server info.")
    system_headroom: Optional[SystemHeadroom] = Field(default=None, alias="systemHeadroom")
    tdz_enabled: Optional[StrictBool] = Field(default=None, description="Is Target Driven Zoning (TDZ) enabled on this group.")
    tdz_prefix: Optional[StrictStr] = Field(default=None, description="Target Driven Zoning (TDZ) prefix for peer zones created by TDZ.")
    timezone: Optional[StrictStr] = Field(default=None, description="Timezone in which this group is located. Plain string.")
    tlsv1_enabled: Optional[StrictBool] = Field(default=None, description="Enable or disable TLSv1.0 and TLSv1.1.")
    uncompressed_snap_usage_bytes: Optional[StrictInt] = Field(default=None, description="Uncompressed usage of snapshots in the group.")
    uncompressed_vol_usage_bytes: Optional[StrictInt] = Field(default=None, description="Uncompressed usage of volumes in the group.")
    unique_name_enabled: Optional[StrictBool] = Field(default=None, description="Are new volume and volume collection names transformed on this group.")
    unused_reserve_bytes: Optional[StrictInt] = Field(default=None, description="Reserved space that is not utilized.")
    update_array_names: Optional[StrictStr] = Field(default=None, description="Arrays in the group undergoing update. Comma separated list of up to 64 non-empty lowercase alphanumeric strings without spaces.")
    update_download_end_time: Optional[StrictInt] = Field(default=None, description="End time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    update_download_error_code: Optional[StrictStr] = Field(default=None, description="If the software download has failed, this indicates the error code corresponding to the failure. Non-negative integer in range [0,9000].")
    update_download_start_time: Optional[StrictInt] = Field(default=None, description="Start time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    update_downloading: Optional[StrictBool] = Field(default=None, description="Is software update package currently downloading.")
    update_end_time: Optional[StrictInt] = Field(default=None, description="End time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    update_error_code: Optional[StrictStr] = Field(default=None, description="If the software update has failed, this indicates the error code corresponding to the failure. Non-negative integer in range [0,9000].")
    update_progress_msg: Optional[StrictStr] = Field(default=None, description="Group update detailed progress message. Plain string.")
    update_start_time: Optional[StrictInt] = Field(default=None, description="Start time of last update. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    update_state: Optional[StrictStr] = Field(default=None, description="Group update state.Possible values: 'invalid', 'normal', 'updating', 'timed_out', 'failed', 'paused'.")
    usable_cache_capacity: Optional[StrictInt] = Field(default=None, description="Usable cache capacity of the group.")
    usable_capacity_bytes: Optional[StrictInt] = Field(default=None, description="Usable capacity bytes of the group.")
    usage: Optional[StrictInt] = Field(default=None, description="Used space of the group in bytes.")
    usage_valid: Optional[StrictBool] = Field(default=None, description="Indicates whether the usage of group is valid.")
    user_inactivity_timeout: Optional[StrictInt] = Field(default=None, description="The amount of time in seconds that the user session is inactive before timing out. User inactivity timeout in second, valid range is from 1 to 43200 (720 minutes).")
    version_current: Optional[StrictStr] = Field(default=None, description="Version of software running on the group.")
    version_rollback: Optional[StrictStr] = Field(default=None, description="Rollback software version for the group.")
    version_target: Optional[StrictStr] = Field(default=None, description="Desired software version for the group.")
    vol_compression_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Compression ratio of volumes in the group. Fraction expressed as floating point number.")
    vol_thin_provisioning_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Thin provisioning savings for volumes in the group expressed as ratio. Fraction expressed as floating point number.")
    volume_migration_status: Optional[List[Optional[VolFamMigStatus]]] = Field(default=None, description="Status of data migration activity related to volumes being relocated to different pools. List of data migration status for a group of related volumes.")
    vss_validation_timeout: Optional[StrictInt] = Field(default=None, description="The amount of time in seconds to validate Microsoft VSS application synchronization before timing out. VSS validation timeout in second, valid range is from 1 to 3600 (60 minutes).")
    vvol_enabled: Optional[StrictBool] = Field(default=None, description="Are vvols enabled on this group.")
    witness_status: Optional[List[Optional[WitnessTestResponse]]] = Field(default=None, description="Witness status from group Management Service array and group Management Service backup array.")
    __properties: ClassVar[List[str]] = ["id", "name", "access_protocol_list", "alarms_enabled", "alert_from_email_addr", "alert_min_level", "alert_to_email_addrs", "allow_support_tunnel", "array_unassign_migration_status", "arrays", "associated_links", "auto_switchover_enabled", "auto_switchover_messages", "autoclean_unmanaged_snapshots_enabled", "autoclean_unmanaged_snapshots_ttl_unit", "autosupport_enabled", "cc_mode_enabled", "clone_ratio", "cloud_management", "commonResourceAttributes", "compressed_snap_usage_bytes", "compressed_vol_usage_bytes", "compression_ratio", "customerId", "data_rebalance_status", "data_reduction_ratio", "date", "dedupe_ratio", "default_iscsi_target_scope", "default_snap_limit_percent", "default_snap_reserve", "default_snap_warn_level", "default_volume_limit", "default_volume_reserve", "default_volume_warn_level", "dns_servers", "domain_name", "encryption_config", "failover_mode", "fc_enabled", "free_space", "generation", "group_snapshot_ttl", "group_target_enabled", "group_target_name", "iscsi_automatic_connection_method", "iscsi_connection_rebalancing", "iscsi_enabled", "isns_enabled", "isns_port", "isns_server", "last_login", "leader_array_name", "leader_array_serial", "management_service_backup_array_name", "management_service_backup_status", "max_lock_period", "member_list", "merge_group_name", "merge_state", "ntp_server", "num_connections", "num_snapcolls", "num_snaps", "pending_deletes", "proxy_port", "proxy_server", "proxy_username", "raw_cache_capacity", "raw_capacity", "repl_throttle_list", "repl_throttled_bandwidth", "repl_throttled_bandwidth_kbps", "resourceUri", "savings", "savings_clone", "savings_compression", "savings_data_reduction", "savings_dedupe", "savings_ratio", "savings_vol_thin_provisioning", "scsi_vendor_id", "send_alert_to_support", "smtp_port", "smtp_server", "snap_compression_ratio", "snap_retn_meter_high", "snap_retn_meter_very_high", "snap_usage_populated", "snmp_community", "snmp_get_enabled", "snmp_get_port", "snmp_sys_contact", "snmp_sys_location", "snmp_trap_enabled", "snmp_trap_host", "snmp_trap_port", "space_info_valid", "syslogd_enabled", "syslogd_port", "syslogd_server", "syslogd_servers", "systemHeadroom", "tdz_enabled", "tdz_prefix", "timezone", "tlsv1_enabled", "uncompressed_snap_usage_bytes", "uncompressed_vol_usage_bytes", "unique_name_enabled", "unused_reserve_bytes", "update_array_names", "update_download_end_time", "update_download_error_code", "update_download_start_time", "update_downloading", "update_end_time", "update_error_code", "update_progress_msg", "update_start_time", "update_state", "usable_cache_capacity", "usable_capacity_bytes", "usage", "usage_valid", "user_inactivity_timeout", "version_current", "version_rollback", "version_target", "vol_compression_ratio", "vol_thin_provisioning_ratio", "volume_migration_status", "vss_validation_timeout", "vvol_enabled", "witness_status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleStorageSystemSummaryListItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in array_unassign_migration_status (list)
        _items = []
        if self.array_unassign_migration_status:
            for _item in self.array_unassign_migration_status:
                if _item:
                    _items.append(_item.to_dict())
            _dict['array_unassign_migration_status'] = _items
        # override the default output from pydantic by calling `to_dict()` of arrays
        if self.arrays:
            _dict['arrays'] = self.arrays.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associated_links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in auto_switchover_messages (list)
        _items = []
        if self.auto_switchover_messages:
            for _item in self.auto_switchover_messages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['auto_switchover_messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data_rebalance_status (list)
        _items = []
        if self.data_rebalance_status:
            for _item in self.data_rebalance_status:
                if _item:
                    _items.append(_item.to_dict())
            _dict['data_rebalance_status'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dns_servers (list)
        _items = []
        if self.dns_servers:
            for _item in self.dns_servers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dns_servers'] = _items
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryption_config'] = self.encryption_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in repl_throttle_list (list)
        _items = []
        if self.repl_throttle_list:
            for _item in self.repl_throttle_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['repl_throttle_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in syslogd_servers (list)
        _items = []
        if self.syslogd_servers:
            for _item in self.syslogd_servers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['syslogd_servers'] = _items
        # override the default output from pydantic by calling `to_dict()` of system_headroom
        if self.system_headroom:
            _dict['systemHeadroom'] = self.system_headroom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in volume_migration_status (list)
        _items = []
        if self.volume_migration_status:
            for _item in self.volume_migration_status:
                if _item:
                    _items.append(_item.to_dict())
            _dict['volume_migration_status'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in witness_status (list)
        _items = []
        if self.witness_status:
            for _item in self.witness_status:
                if _item:
                    _items.append(_item.to_dict())
            _dict['witness_status'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if access_protocol_list (nullable) is None
        # and model_fields_set contains the field
        if self.access_protocol_list is None and "access_protocol_list" in self.model_fields_set:
            _dict['access_protocol_list'] = None

        # set to None if alarms_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.alarms_enabled is None and "alarms_enabled" in self.model_fields_set:
            _dict['alarms_enabled'] = None

        # set to None if alert_from_email_addr (nullable) is None
        # and model_fields_set contains the field
        if self.alert_from_email_addr is None and "alert_from_email_addr" in self.model_fields_set:
            _dict['alert_from_email_addr'] = None

        # set to None if alert_min_level (nullable) is None
        # and model_fields_set contains the field
        if self.alert_min_level is None and "alert_min_level" in self.model_fields_set:
            _dict['alert_min_level'] = None

        # set to None if alert_to_email_addrs (nullable) is None
        # and model_fields_set contains the field
        if self.alert_to_email_addrs is None and "alert_to_email_addrs" in self.model_fields_set:
            _dict['alert_to_email_addrs'] = None

        # set to None if allow_support_tunnel (nullable) is None
        # and model_fields_set contains the field
        if self.allow_support_tunnel is None and "allow_support_tunnel" in self.model_fields_set:
            _dict['allow_support_tunnel'] = None

        # set to None if array_unassign_migration_status (nullable) is None
        # and model_fields_set contains the field
        if self.array_unassign_migration_status is None and "array_unassign_migration_status" in self.model_fields_set:
            _dict['array_unassign_migration_status'] = None

        # set to None if arrays (nullable) is None
        # and model_fields_set contains the field
        if self.arrays is None and "arrays" in self.model_fields_set:
            _dict['arrays'] = None

        # set to None if associated_links (nullable) is None
        # and model_fields_set contains the field
        if self.associated_links is None and "associated_links" in self.model_fields_set:
            _dict['associated_links'] = None

        # set to None if auto_switchover_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.auto_switchover_enabled is None and "auto_switchover_enabled" in self.model_fields_set:
            _dict['auto_switchover_enabled'] = None

        # set to None if auto_switchover_messages (nullable) is None
        # and model_fields_set contains the field
        if self.auto_switchover_messages is None and "auto_switchover_messages" in self.model_fields_set:
            _dict['auto_switchover_messages'] = None

        # set to None if autoclean_unmanaged_snapshots_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.autoclean_unmanaged_snapshots_enabled is None and "autoclean_unmanaged_snapshots_enabled" in self.model_fields_set:
            _dict['autoclean_unmanaged_snapshots_enabled'] = None

        # set to None if autoclean_unmanaged_snapshots_ttl_unit (nullable) is None
        # and model_fields_set contains the field
        if self.autoclean_unmanaged_snapshots_ttl_unit is None and "autoclean_unmanaged_snapshots_ttl_unit" in self.model_fields_set:
            _dict['autoclean_unmanaged_snapshots_ttl_unit'] = None

        # set to None if autosupport_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.autosupport_enabled is None and "autosupport_enabled" in self.model_fields_set:
            _dict['autosupport_enabled'] = None

        # set to None if cc_mode_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.cc_mode_enabled is None and "cc_mode_enabled" in self.model_fields_set:
            _dict['cc_mode_enabled'] = None

        # set to None if clone_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.clone_ratio is None and "clone_ratio" in self.model_fields_set:
            _dict['clone_ratio'] = None

        # set to None if cloud_management (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_management is None and "cloud_management" in self.model_fields_set:
            _dict['cloud_management'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if compressed_snap_usage_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.compressed_snap_usage_bytes is None and "compressed_snap_usage_bytes" in self.model_fields_set:
            _dict['compressed_snap_usage_bytes'] = None

        # set to None if compressed_vol_usage_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.compressed_vol_usage_bytes is None and "compressed_vol_usage_bytes" in self.model_fields_set:
            _dict['compressed_vol_usage_bytes'] = None

        # set to None if compression_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.compression_ratio is None and "compression_ratio" in self.model_fields_set:
            _dict['compression_ratio'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if data_rebalance_status (nullable) is None
        # and model_fields_set contains the field
        if self.data_rebalance_status is None and "data_rebalance_status" in self.model_fields_set:
            _dict['data_rebalance_status'] = None

        # set to None if data_reduction_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.data_reduction_ratio is None and "data_reduction_ratio" in self.model_fields_set:
            _dict['data_reduction_ratio'] = None

        # set to None if var_date (nullable) is None
        # and model_fields_set contains the field
        if self.var_date is None and "var_date" in self.model_fields_set:
            _dict['date'] = None

        # set to None if dedupe_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_ratio is None and "dedupe_ratio" in self.model_fields_set:
            _dict['dedupe_ratio'] = None

        # set to None if default_iscsi_target_scope (nullable) is None
        # and model_fields_set contains the field
        if self.default_iscsi_target_scope is None and "default_iscsi_target_scope" in self.model_fields_set:
            _dict['default_iscsi_target_scope'] = None

        # set to None if default_snap_limit_percent (nullable) is None
        # and model_fields_set contains the field
        if self.default_snap_limit_percent is None and "default_snap_limit_percent" in self.model_fields_set:
            _dict['default_snap_limit_percent'] = None

        # set to None if default_snap_reserve (nullable) is None
        # and model_fields_set contains the field
        if self.default_snap_reserve is None and "default_snap_reserve" in self.model_fields_set:
            _dict['default_snap_reserve'] = None

        # set to None if default_snap_warn_level (nullable) is None
        # and model_fields_set contains the field
        if self.default_snap_warn_level is None and "default_snap_warn_level" in self.model_fields_set:
            _dict['default_snap_warn_level'] = None

        # set to None if default_volume_limit (nullable) is None
        # and model_fields_set contains the field
        if self.default_volume_limit is None and "default_volume_limit" in self.model_fields_set:
            _dict['default_volume_limit'] = None

        # set to None if default_volume_reserve (nullable) is None
        # and model_fields_set contains the field
        if self.default_volume_reserve is None and "default_volume_reserve" in self.model_fields_set:
            _dict['default_volume_reserve'] = None

        # set to None if default_volume_warn_level (nullable) is None
        # and model_fields_set contains the field
        if self.default_volume_warn_level is None and "default_volume_warn_level" in self.model_fields_set:
            _dict['default_volume_warn_level'] = None

        # set to None if dns_servers (nullable) is None
        # and model_fields_set contains the field
        if self.dns_servers is None and "dns_servers" in self.model_fields_set:
            _dict['dns_servers'] = None

        # set to None if domain_name (nullable) is None
        # and model_fields_set contains the field
        if self.domain_name is None and "domain_name" in self.model_fields_set:
            _dict['domain_name'] = None

        # set to None if encryption_config (nullable) is None
        # and model_fields_set contains the field
        if self.encryption_config is None and "encryption_config" in self.model_fields_set:
            _dict['encryption_config'] = None

        # set to None if failover_mode (nullable) is None
        # and model_fields_set contains the field
        if self.failover_mode is None and "failover_mode" in self.model_fields_set:
            _dict['failover_mode'] = None

        # set to None if fc_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.fc_enabled is None and "fc_enabled" in self.model_fields_set:
            _dict['fc_enabled'] = None

        # set to None if free_space (nullable) is None
        # and model_fields_set contains the field
        if self.free_space is None and "free_space" in self.model_fields_set:
            _dict['free_space'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if group_snapshot_ttl (nullable) is None
        # and model_fields_set contains the field
        if self.group_snapshot_ttl is None and "group_snapshot_ttl" in self.model_fields_set:
            _dict['group_snapshot_ttl'] = None

        # set to None if group_target_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.group_target_enabled is None and "group_target_enabled" in self.model_fields_set:
            _dict['group_target_enabled'] = None

        # set to None if group_target_name (nullable) is None
        # and model_fields_set contains the field
        if self.group_target_name is None and "group_target_name" in self.model_fields_set:
            _dict['group_target_name'] = None

        # set to None if iscsi_automatic_connection_method (nullable) is None
        # and model_fields_set contains the field
        if self.iscsi_automatic_connection_method is None and "iscsi_automatic_connection_method" in self.model_fields_set:
            _dict['iscsi_automatic_connection_method'] = None

        # set to None if iscsi_connection_rebalancing (nullable) is None
        # and model_fields_set contains the field
        if self.iscsi_connection_rebalancing is None and "iscsi_connection_rebalancing" in self.model_fields_set:
            _dict['iscsi_connection_rebalancing'] = None

        # set to None if iscsi_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.iscsi_enabled is None and "iscsi_enabled" in self.model_fields_set:
            _dict['iscsi_enabled'] = None

        # set to None if isns_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.isns_enabled is None and "isns_enabled" in self.model_fields_set:
            _dict['isns_enabled'] = None

        # set to None if isns_port (nullable) is None
        # and model_fields_set contains the field
        if self.isns_port is None and "isns_port" in self.model_fields_set:
            _dict['isns_port'] = None

        # set to None if isns_server (nullable) is None
        # and model_fields_set contains the field
        if self.isns_server is None and "isns_server" in self.model_fields_set:
            _dict['isns_server'] = None

        # set to None if last_login (nullable) is None
        # and model_fields_set contains the field
        if self.last_login is None and "last_login" in self.model_fields_set:
            _dict['last_login'] = None

        # set to None if leader_array_name (nullable) is None
        # and model_fields_set contains the field
        if self.leader_array_name is None and "leader_array_name" in self.model_fields_set:
            _dict['leader_array_name'] = None

        # set to None if leader_array_serial (nullable) is None
        # and model_fields_set contains the field
        if self.leader_array_serial is None and "leader_array_serial" in self.model_fields_set:
            _dict['leader_array_serial'] = None

        # set to None if management_service_backup_array_name (nullable) is None
        # and model_fields_set contains the field
        if self.management_service_backup_array_name is None and "management_service_backup_array_name" in self.model_fields_set:
            _dict['management_service_backup_array_name'] = None

        # set to None if management_service_backup_status (nullable) is None
        # and model_fields_set contains the field
        if self.management_service_backup_status is None and "management_service_backup_status" in self.model_fields_set:
            _dict['management_service_backup_status'] = None

        # set to None if max_lock_period (nullable) is None
        # and model_fields_set contains the field
        if self.max_lock_period is None and "max_lock_period" in self.model_fields_set:
            _dict['max_lock_period'] = None

        # set to None if member_list (nullable) is None
        # and model_fields_set contains the field
        if self.member_list is None and "member_list" in self.model_fields_set:
            _dict['member_list'] = None

        # set to None if merge_group_name (nullable) is None
        # and model_fields_set contains the field
        if self.merge_group_name is None and "merge_group_name" in self.model_fields_set:
            _dict['merge_group_name'] = None

        # set to None if merge_state (nullable) is None
        # and model_fields_set contains the field
        if self.merge_state is None and "merge_state" in self.model_fields_set:
            _dict['merge_state'] = None

        # set to None if ntp_server (nullable) is None
        # and model_fields_set contains the field
        if self.ntp_server is None and "ntp_server" in self.model_fields_set:
            _dict['ntp_server'] = None

        # set to None if num_connections (nullable) is None
        # and model_fields_set contains the field
        if self.num_connections is None and "num_connections" in self.model_fields_set:
            _dict['num_connections'] = None

        # set to None if num_snapcolls (nullable) is None
        # and model_fields_set contains the field
        if self.num_snapcolls is None and "num_snapcolls" in self.model_fields_set:
            _dict['num_snapcolls'] = None

        # set to None if num_snaps (nullable) is None
        # and model_fields_set contains the field
        if self.num_snaps is None and "num_snaps" in self.model_fields_set:
            _dict['num_snaps'] = None

        # set to None if pending_deletes (nullable) is None
        # and model_fields_set contains the field
        if self.pending_deletes is None and "pending_deletes" in self.model_fields_set:
            _dict['pending_deletes'] = None

        # set to None if proxy_port (nullable) is None
        # and model_fields_set contains the field
        if self.proxy_port is None and "proxy_port" in self.model_fields_set:
            _dict['proxy_port'] = None

        # set to None if proxy_server (nullable) is None
        # and model_fields_set contains the field
        if self.proxy_server is None and "proxy_server" in self.model_fields_set:
            _dict['proxy_server'] = None

        # set to None if proxy_username (nullable) is None
        # and model_fields_set contains the field
        if self.proxy_username is None and "proxy_username" in self.model_fields_set:
            _dict['proxy_username'] = None

        # set to None if raw_cache_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.raw_cache_capacity is None and "raw_cache_capacity" in self.model_fields_set:
            _dict['raw_cache_capacity'] = None

        # set to None if raw_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.raw_capacity is None and "raw_capacity" in self.model_fields_set:
            _dict['raw_capacity'] = None

        # set to None if repl_throttle_list (nullable) is None
        # and model_fields_set contains the field
        if self.repl_throttle_list is None and "repl_throttle_list" in self.model_fields_set:
            _dict['repl_throttle_list'] = None

        # set to None if repl_throttled_bandwidth (nullable) is None
        # and model_fields_set contains the field
        if self.repl_throttled_bandwidth is None and "repl_throttled_bandwidth" in self.model_fields_set:
            _dict['repl_throttled_bandwidth'] = None

        # set to None if repl_throttled_bandwidth_kbps (nullable) is None
        # and model_fields_set contains the field
        if self.repl_throttled_bandwidth_kbps is None and "repl_throttled_bandwidth_kbps" in self.model_fields_set:
            _dict['repl_throttled_bandwidth_kbps'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if savings (nullable) is None
        # and model_fields_set contains the field
        if self.savings is None and "savings" in self.model_fields_set:
            _dict['savings'] = None

        # set to None if savings_clone (nullable) is None
        # and model_fields_set contains the field
        if self.savings_clone is None and "savings_clone" in self.model_fields_set:
            _dict['savings_clone'] = None

        # set to None if savings_compression (nullable) is None
        # and model_fields_set contains the field
        if self.savings_compression is None and "savings_compression" in self.model_fields_set:
            _dict['savings_compression'] = None

        # set to None if savings_data_reduction (nullable) is None
        # and model_fields_set contains the field
        if self.savings_data_reduction is None and "savings_data_reduction" in self.model_fields_set:
            _dict['savings_data_reduction'] = None

        # set to None if savings_dedupe (nullable) is None
        # and model_fields_set contains the field
        if self.savings_dedupe is None and "savings_dedupe" in self.model_fields_set:
            _dict['savings_dedupe'] = None

        # set to None if savings_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.savings_ratio is None and "savings_ratio" in self.model_fields_set:
            _dict['savings_ratio'] = None

        # set to None if savings_vol_thin_provisioning (nullable) is None
        # and model_fields_set contains the field
        if self.savings_vol_thin_provisioning is None and "savings_vol_thin_provisioning" in self.model_fields_set:
            _dict['savings_vol_thin_provisioning'] = None

        # set to None if scsi_vendor_id (nullable) is None
        # and model_fields_set contains the field
        if self.scsi_vendor_id is None and "scsi_vendor_id" in self.model_fields_set:
            _dict['scsi_vendor_id'] = None

        # set to None if send_alert_to_support (nullable) is None
        # and model_fields_set contains the field
        if self.send_alert_to_support is None and "send_alert_to_support" in self.model_fields_set:
            _dict['send_alert_to_support'] = None

        # set to None if smtp_port (nullable) is None
        # and model_fields_set contains the field
        if self.smtp_port is None and "smtp_port" in self.model_fields_set:
            _dict['smtp_port'] = None

        # set to None if smtp_server (nullable) is None
        # and model_fields_set contains the field
        if self.smtp_server is None and "smtp_server" in self.model_fields_set:
            _dict['smtp_server'] = None

        # set to None if snap_compression_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.snap_compression_ratio is None and "snap_compression_ratio" in self.model_fields_set:
            _dict['snap_compression_ratio'] = None

        # set to None if snap_retn_meter_high (nullable) is None
        # and model_fields_set contains the field
        if self.snap_retn_meter_high is None and "snap_retn_meter_high" in self.model_fields_set:
            _dict['snap_retn_meter_high'] = None

        # set to None if snap_retn_meter_very_high (nullable) is None
        # and model_fields_set contains the field
        if self.snap_retn_meter_very_high is None and "snap_retn_meter_very_high" in self.model_fields_set:
            _dict['snap_retn_meter_very_high'] = None

        # set to None if snap_usage_populated (nullable) is None
        # and model_fields_set contains the field
        if self.snap_usage_populated is None and "snap_usage_populated" in self.model_fields_set:
            _dict['snap_usage_populated'] = None

        # set to None if snmp_community (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_community is None and "snmp_community" in self.model_fields_set:
            _dict['snmp_community'] = None

        # set to None if snmp_get_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_get_enabled is None and "snmp_get_enabled" in self.model_fields_set:
            _dict['snmp_get_enabled'] = None

        # set to None if snmp_get_port (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_get_port is None and "snmp_get_port" in self.model_fields_set:
            _dict['snmp_get_port'] = None

        # set to None if snmp_sys_contact (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_sys_contact is None and "snmp_sys_contact" in self.model_fields_set:
            _dict['snmp_sys_contact'] = None

        # set to None if snmp_sys_location (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_sys_location is None and "snmp_sys_location" in self.model_fields_set:
            _dict['snmp_sys_location'] = None

        # set to None if snmp_trap_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_trap_enabled is None and "snmp_trap_enabled" in self.model_fields_set:
            _dict['snmp_trap_enabled'] = None

        # set to None if snmp_trap_host (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_trap_host is None and "snmp_trap_host" in self.model_fields_set:
            _dict['snmp_trap_host'] = None

        # set to None if snmp_trap_port (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_trap_port is None and "snmp_trap_port" in self.model_fields_set:
            _dict['snmp_trap_port'] = None

        # set to None if space_info_valid (nullable) is None
        # and model_fields_set contains the field
        if self.space_info_valid is None and "space_info_valid" in self.model_fields_set:
            _dict['space_info_valid'] = None

        # set to None if syslogd_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.syslogd_enabled is None and "syslogd_enabled" in self.model_fields_set:
            _dict['syslogd_enabled'] = None

        # set to None if syslogd_port (nullable) is None
        # and model_fields_set contains the field
        if self.syslogd_port is None and "syslogd_port" in self.model_fields_set:
            _dict['syslogd_port'] = None

        # set to None if syslogd_server (nullable) is None
        # and model_fields_set contains the field
        if self.syslogd_server is None and "syslogd_server" in self.model_fields_set:
            _dict['syslogd_server'] = None

        # set to None if syslogd_servers (nullable) is None
        # and model_fields_set contains the field
        if self.syslogd_servers is None and "syslogd_servers" in self.model_fields_set:
            _dict['syslogd_servers'] = None

        # set to None if system_headroom (nullable) is None
        # and model_fields_set contains the field
        if self.system_headroom is None and "system_headroom" in self.model_fields_set:
            _dict['systemHeadroom'] = None

        # set to None if tdz_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.tdz_enabled is None and "tdz_enabled" in self.model_fields_set:
            _dict['tdz_enabled'] = None

        # set to None if tdz_prefix (nullable) is None
        # and model_fields_set contains the field
        if self.tdz_prefix is None and "tdz_prefix" in self.model_fields_set:
            _dict['tdz_prefix'] = None

        # set to None if timezone (nullable) is None
        # and model_fields_set contains the field
        if self.timezone is None and "timezone" in self.model_fields_set:
            _dict['timezone'] = None

        # set to None if tlsv1_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.tlsv1_enabled is None and "tlsv1_enabled" in self.model_fields_set:
            _dict['tlsv1_enabled'] = None

        # set to None if uncompressed_snap_usage_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.uncompressed_snap_usage_bytes is None and "uncompressed_snap_usage_bytes" in self.model_fields_set:
            _dict['uncompressed_snap_usage_bytes'] = None

        # set to None if uncompressed_vol_usage_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.uncompressed_vol_usage_bytes is None and "uncompressed_vol_usage_bytes" in self.model_fields_set:
            _dict['uncompressed_vol_usage_bytes'] = None

        # set to None if unique_name_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.unique_name_enabled is None and "unique_name_enabled" in self.model_fields_set:
            _dict['unique_name_enabled'] = None

        # set to None if unused_reserve_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.unused_reserve_bytes is None and "unused_reserve_bytes" in self.model_fields_set:
            _dict['unused_reserve_bytes'] = None

        # set to None if update_array_names (nullable) is None
        # and model_fields_set contains the field
        if self.update_array_names is None and "update_array_names" in self.model_fields_set:
            _dict['update_array_names'] = None

        # set to None if update_download_end_time (nullable) is None
        # and model_fields_set contains the field
        if self.update_download_end_time is None and "update_download_end_time" in self.model_fields_set:
            _dict['update_download_end_time'] = None

        # set to None if update_download_error_code (nullable) is None
        # and model_fields_set contains the field
        if self.update_download_error_code is None and "update_download_error_code" in self.model_fields_set:
            _dict['update_download_error_code'] = None

        # set to None if update_download_start_time (nullable) is None
        # and model_fields_set contains the field
        if self.update_download_start_time is None and "update_download_start_time" in self.model_fields_set:
            _dict['update_download_start_time'] = None

        # set to None if update_downloading (nullable) is None
        # and model_fields_set contains the field
        if self.update_downloading is None and "update_downloading" in self.model_fields_set:
            _dict['update_downloading'] = None

        # set to None if update_end_time (nullable) is None
        # and model_fields_set contains the field
        if self.update_end_time is None and "update_end_time" in self.model_fields_set:
            _dict['update_end_time'] = None

        # set to None if update_error_code (nullable) is None
        # and model_fields_set contains the field
        if self.update_error_code is None and "update_error_code" in self.model_fields_set:
            _dict['update_error_code'] = None

        # set to None if update_progress_msg (nullable) is None
        # and model_fields_set contains the field
        if self.update_progress_msg is None and "update_progress_msg" in self.model_fields_set:
            _dict['update_progress_msg'] = None

        # set to None if update_start_time (nullable) is None
        # and model_fields_set contains the field
        if self.update_start_time is None and "update_start_time" in self.model_fields_set:
            _dict['update_start_time'] = None

        # set to None if update_state (nullable) is None
        # and model_fields_set contains the field
        if self.update_state is None and "update_state" in self.model_fields_set:
            _dict['update_state'] = None

        # set to None if usable_cache_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.usable_cache_capacity is None and "usable_cache_capacity" in self.model_fields_set:
            _dict['usable_cache_capacity'] = None

        # set to None if usable_capacity_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.usable_capacity_bytes is None and "usable_capacity_bytes" in self.model_fields_set:
            _dict['usable_capacity_bytes'] = None

        # set to None if usage (nullable) is None
        # and model_fields_set contains the field
        if self.usage is None and "usage" in self.model_fields_set:
            _dict['usage'] = None

        # set to None if usage_valid (nullable) is None
        # and model_fields_set contains the field
        if self.usage_valid is None and "usage_valid" in self.model_fields_set:
            _dict['usage_valid'] = None

        # set to None if user_inactivity_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.user_inactivity_timeout is None and "user_inactivity_timeout" in self.model_fields_set:
            _dict['user_inactivity_timeout'] = None

        # set to None if version_current (nullable) is None
        # and model_fields_set contains the field
        if self.version_current is None and "version_current" in self.model_fields_set:
            _dict['version_current'] = None

        # set to None if version_rollback (nullable) is None
        # and model_fields_set contains the field
        if self.version_rollback is None and "version_rollback" in self.model_fields_set:
            _dict['version_rollback'] = None

        # set to None if version_target (nullable) is None
        # and model_fields_set contains the field
        if self.version_target is None and "version_target" in self.model_fields_set:
            _dict['version_target'] = None

        # set to None if vol_compression_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.vol_compression_ratio is None and "vol_compression_ratio" in self.model_fields_set:
            _dict['vol_compression_ratio'] = None

        # set to None if vol_thin_provisioning_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.vol_thin_provisioning_ratio is None and "vol_thin_provisioning_ratio" in self.model_fields_set:
            _dict['vol_thin_provisioning_ratio'] = None

        # set to None if volume_migration_status (nullable) is None
        # and model_fields_set contains the field
        if self.volume_migration_status is None and "volume_migration_status" in self.model_fields_set:
            _dict['volume_migration_status'] = None

        # set to None if vss_validation_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.vss_validation_timeout is None and "vss_validation_timeout" in self.model_fields_set:
            _dict['vss_validation_timeout'] = None

        # set to None if vvol_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.vvol_enabled is None and "vvol_enabled" in self.model_fields_set:
            _dict['vvol_enabled'] = None

        # set to None if witness_status (nullable) is None
        # and model_fields_set contains the field
        if self.witness_status is None and "witness_status" in self.model_fields_set:
            _dict['witness_status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleStorageSystemSummaryListItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "access_protocol_list": obj.get("access_protocol_list"),
            "alarms_enabled": obj.get("alarms_enabled"),
            "alert_from_email_addr": obj.get("alert_from_email_addr"),
            "alert_min_level": obj.get("alert_min_level"),
            "alert_to_email_addrs": obj.get("alert_to_email_addrs"),
            "allow_support_tunnel": obj.get("allow_support_tunnel"),
            "array_unassign_migration_status": [ArrayUnassignMigStatus.from_dict(_item) for _item in obj["array_unassign_migration_status"]] if obj.get("array_unassign_migration_status") is not None else None,
            "arrays": NimbleArrayList.from_dict(obj["arrays"]) if obj.get("arrays") is not None else None,
            "associated_links": [AssociatedLinksInner.from_dict(_item) for _item in obj["associated_links"]] if obj.get("associated_links") is not None else None,
            "auto_switchover_enabled": obj.get("auto_switchover_enabled"),
            "auto_switchover_messages": [NimbleErrorWithArguments.from_dict(_item) for _item in obj["auto_switchover_messages"]] if obj.get("auto_switchover_messages") is not None else None,
            "autoclean_unmanaged_snapshots_enabled": obj.get("autoclean_unmanaged_snapshots_enabled"),
            "autoclean_unmanaged_snapshots_ttl_unit": obj.get("autoclean_unmanaged_snapshots_ttl_unit"),
            "autosupport_enabled": obj.get("autosupport_enabled"),
            "cc_mode_enabled": obj.get("cc_mode_enabled"),
            "clone_ratio": obj.get("clone_ratio"),
            "cloud_management": obj.get("cloud_management"),
            "commonResourceAttributes": NimbleCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "compressed_snap_usage_bytes": obj.get("compressed_snap_usage_bytes"),
            "compressed_vol_usage_bytes": obj.get("compressed_vol_usage_bytes"),
            "compression_ratio": obj.get("compression_ratio"),
            "customerId": obj.get("customerId"),
            "data_rebalance_status": [PoolRebalanceMigStatus.from_dict(_item) for _item in obj["data_rebalance_status"]] if obj.get("data_rebalance_status") is not None else None,
            "data_reduction_ratio": obj.get("data_reduction_ratio"),
            "date": obj.get("date"),
            "dedupe_ratio": obj.get("dedupe_ratio"),
            "default_iscsi_target_scope": obj.get("default_iscsi_target_scope"),
            "default_snap_limit_percent": obj.get("default_snap_limit_percent"),
            "default_snap_reserve": obj.get("default_snap_reserve"),
            "default_snap_warn_level": obj.get("default_snap_warn_level"),
            "default_volume_limit": obj.get("default_volume_limit"),
            "default_volume_reserve": obj.get("default_volume_reserve"),
            "default_volume_warn_level": obj.get("default_volume_warn_level"),
            "dns_servers": [IPAddressObject.from_dict(_item) for _item in obj["dns_servers"]] if obj.get("dns_servers") is not None else None,
            "domain_name": obj.get("domain_name"),
            "encryption_config": EncryptionSettings.from_dict(obj["encryption_config"]) if obj.get("encryption_config") is not None else None,
            "failover_mode": obj.get("failover_mode"),
            "fc_enabled": obj.get("fc_enabled"),
            "free_space": obj.get("free_space"),
            "generation": obj.get("generation"),
            "group_snapshot_ttl": obj.get("group_snapshot_ttl"),
            "group_target_enabled": obj.get("group_target_enabled"),
            "group_target_name": obj.get("group_target_name"),
            "iscsi_automatic_connection_method": obj.get("iscsi_automatic_connection_method"),
            "iscsi_connection_rebalancing": obj.get("iscsi_connection_rebalancing"),
            "iscsi_enabled": obj.get("iscsi_enabled"),
            "isns_enabled": obj.get("isns_enabled"),
            "isns_port": obj.get("isns_port"),
            "isns_server": obj.get("isns_server"),
            "last_login": obj.get("last_login"),
            "leader_array_name": obj.get("leader_array_name"),
            "leader_array_serial": obj.get("leader_array_serial"),
            "management_service_backup_array_name": obj.get("management_service_backup_array_name"),
            "management_service_backup_status": obj.get("management_service_backup_status"),
            "max_lock_period": obj.get("max_lock_period"),
            "member_list": obj.get("member_list"),
            "merge_group_name": obj.get("merge_group_name"),
            "merge_state": obj.get("merge_state"),
            "ntp_server": obj.get("ntp_server"),
            "num_connections": obj.get("num_connections"),
            "num_snapcolls": obj.get("num_snapcolls"),
            "num_snaps": obj.get("num_snaps"),
            "pending_deletes": obj.get("pending_deletes"),
            "proxy_port": obj.get("proxy_port"),
            "proxy_server": obj.get("proxy_server"),
            "proxy_username": obj.get("proxy_username"),
            "raw_cache_capacity": obj.get("raw_cache_capacity"),
            "raw_capacity": obj.get("raw_capacity"),
            "repl_throttle_list": [Throttle.from_dict(_item) for _item in obj["repl_throttle_list"]] if obj.get("repl_throttle_list") is not None else None,
            "repl_throttled_bandwidth": obj.get("repl_throttled_bandwidth"),
            "repl_throttled_bandwidth_kbps": obj.get("repl_throttled_bandwidth_kbps"),
            "resourceUri": obj.get("resourceUri"),
            "savings": obj.get("savings"),
            "savings_clone": obj.get("savings_clone"),
            "savings_compression": obj.get("savings_compression"),
            "savings_data_reduction": obj.get("savings_data_reduction"),
            "savings_dedupe": obj.get("savings_dedupe"),
            "savings_ratio": obj.get("savings_ratio"),
            "savings_vol_thin_provisioning": obj.get("savings_vol_thin_provisioning"),
            "scsi_vendor_id": obj.get("scsi_vendor_id"),
            "send_alert_to_support": obj.get("send_alert_to_support"),
            "smtp_port": obj.get("smtp_port"),
            "smtp_server": obj.get("smtp_server"),
            "snap_compression_ratio": obj.get("snap_compression_ratio"),
            "snap_retn_meter_high": obj.get("snap_retn_meter_high"),
            "snap_retn_meter_very_high": obj.get("snap_retn_meter_very_high"),
            "snap_usage_populated": obj.get("snap_usage_populated"),
            "snmp_community": obj.get("snmp_community"),
            "snmp_get_enabled": obj.get("snmp_get_enabled"),
            "snmp_get_port": obj.get("snmp_get_port"),
            "snmp_sys_contact": obj.get("snmp_sys_contact"),
            "snmp_sys_location": obj.get("snmp_sys_location"),
            "snmp_trap_enabled": obj.get("snmp_trap_enabled"),
            "snmp_trap_host": obj.get("snmp_trap_host"),
            "snmp_trap_port": obj.get("snmp_trap_port"),
            "space_info_valid": obj.get("space_info_valid"),
            "syslogd_enabled": obj.get("syslogd_enabled"),
            "syslogd_port": obj.get("syslogd_port"),
            "syslogd_server": obj.get("syslogd_server"),
            "syslogd_servers": [NimbleSyslogdServerInfo.from_dict(_item) for _item in obj["syslogd_servers"]] if obj.get("syslogd_servers") is not None else None,
            "systemHeadroom": SystemHeadroom.from_dict(obj["systemHeadroom"]) if obj.get("systemHeadroom") is not None else None,
            "tdz_enabled": obj.get("tdz_enabled"),
            "tdz_prefix": obj.get("tdz_prefix"),
            "timezone": obj.get("timezone"),
            "tlsv1_enabled": obj.get("tlsv1_enabled"),
            "uncompressed_snap_usage_bytes": obj.get("uncompressed_snap_usage_bytes"),
            "uncompressed_vol_usage_bytes": obj.get("uncompressed_vol_usage_bytes"),
            "unique_name_enabled": obj.get("unique_name_enabled"),
            "unused_reserve_bytes": obj.get("unused_reserve_bytes"),
            "update_array_names": obj.get("update_array_names"),
            "update_download_end_time": obj.get("update_download_end_time"),
            "update_download_error_code": obj.get("update_download_error_code"),
            "update_download_start_time": obj.get("update_download_start_time"),
            "update_downloading": obj.get("update_downloading"),
            "update_end_time": obj.get("update_end_time"),
            "update_error_code": obj.get("update_error_code"),
            "update_progress_msg": obj.get("update_progress_msg"),
            "update_start_time": obj.get("update_start_time"),
            "update_state": obj.get("update_state"),
            "usable_cache_capacity": obj.get("usable_cache_capacity"),
            "usable_capacity_bytes": obj.get("usable_capacity_bytes"),
            "usage": obj.get("usage"),
            "usage_valid": obj.get("usage_valid"),
            "user_inactivity_timeout": obj.get("user_inactivity_timeout"),
            "version_current": obj.get("version_current"),
            "version_rollback": obj.get("version_rollback"),
            "version_target": obj.get("version_target"),
            "vol_compression_ratio": obj.get("vol_compression_ratio"),
            "vol_thin_provisioning_ratio": obj.get("vol_thin_provisioning_ratio"),
            "volume_migration_status": [VolFamMigStatus.from_dict(_item) for _item in obj["volume_migration_status"]] if obj.get("volume_migration_status") is not None else None,
            "vss_validation_timeout": obj.get("vss_validation_timeout"),
            "vvol_enabled": obj.get("vvol_enabled"),
            "witness_status": [WitnessTestResponse.from_dict(_item) for _item in obj["witness_status"]] if obj.get("witness_status") is not None else None
        })
        return _obj


