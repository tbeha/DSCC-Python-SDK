# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HostChapInputObject(BaseModel):
    """
    HostChapInputObject
    """ # noqa: E501
    initiator_chap_enabled: Optional[StrictBool] = Field(default=None, description="Initiator CHAP enabled or disabled", alias="initiatorChapEnabled")
    initiator_chap_name: Optional[StrictStr] = Field(default=None, description="Name of initiator CHAP", alias="initiatorChapName")
    initiator_encrypted_chap_secret: Optional[StrictStr] = Field(default=None, description="Base64 encoded Initiator CHAP Secret", alias="initiatorEncryptedChapSecret")
    system: Optional[StrictStr] = Field(default=None, description="Host CHAP details for a given system")
    target_chap_enabled: Optional[StrictBool] = Field(default=None, description="Target CHAP enabled or disabled", alias="targetChapEnabled")
    target_chap_name: Optional[StrictStr] = Field(default=None, description="Name of target CHAP", alias="targetChapName")
    target_encrypted_chap_secret: Optional[StrictStr] = Field(default=None, description="Base64 encoded Target CHAP Secret", alias="targetEncryptedChapSecret")
    __properties: ClassVar[List[str]] = ["initiatorChapEnabled", "initiatorChapName", "initiatorEncryptedChapSecret", "system", "targetChapEnabled", "targetChapName", "targetEncryptedChapSecret"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HostChapInputObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if initiator_chap_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_chap_enabled is None and "initiator_chap_enabled" in self.model_fields_set:
            _dict['initiatorChapEnabled'] = None

        # set to None if initiator_chap_name (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_chap_name is None and "initiator_chap_name" in self.model_fields_set:
            _dict['initiatorChapName'] = None

        # set to None if target_chap_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.target_chap_enabled is None and "target_chap_enabled" in self.model_fields_set:
            _dict['targetChapEnabled'] = None

        # set to None if target_chap_name (nullable) is None
        # and model_fields_set contains the field
        if self.target_chap_name is None and "target_chap_name" in self.model_fields_set:
            _dict['targetChapName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HostChapInputObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "initiatorChapEnabled": obj.get("initiatorChapEnabled"),
            "initiatorChapName": obj.get("initiatorChapName"),
            "initiatorEncryptedChapSecret": obj.get("initiatorEncryptedChapSecret"),
            "system": obj.get("system"),
            "targetChapEnabled": obj.get("targetChapEnabled"),
            "targetChapName": obj.get("targetChapName"),
            "targetEncryptedChapSecret": obj.get("targetEncryptedChapSecret")
        })
        return _obj


