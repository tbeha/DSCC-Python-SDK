# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4SecondaryRemoteInfo(BaseModel):
    """
    DeviceType4SecondaryRemoteInfo
    """ # noqa: E501
    customer_id: Optional[StrictStr] = Field(default=None, description="TenantId of resource", alias="customerId")
    is_remote_array_support_replication: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate if remote array OS version supports replication", alias="isRemoteArraySupportReplication")
    over_period_alert: Optional[StrictBool] = Field(default=None, description="This field is valid only for 3DC remote replication. If synchronization of an asynchronous periodic Remote Copy group takes longer to complete than its synchronization period, an alert is generated. This property is not valid in case of synchronous policy and will always be false in that case.", alias="overPeriodAlert")
    partner_id: Optional[StrictStr] = Field(default=None, description="Id of replication partner", alias="partnerId")
    partner_name: Optional[StrictStr] = Field(default=None, description="Name of replication partner", alias="partnerName")
    replication_partner_user_cpg: Optional[StrictStr] = Field(default=None, description="User CPG in which the target volumes would get created in the replication partner system.", alias="replicationPartnerUserCpg")
    replication_type: Optional[StrictStr] = Field(default=None, description="Mode of replication. Can be periodic only", alias="replicationType")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resource Uri of replication partner object", alias="resourceUri")
    __properties: ClassVar[List[str]] = ["customerId", "isRemoteArraySupportReplication", "overPeriodAlert", "partnerId", "partnerName", "replicationPartnerUserCpg", "replicationType", "resourceUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4SecondaryRemoteInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if over_period_alert (nullable) is None
        # and model_fields_set contains the field
        if self.over_period_alert is None and "over_period_alert" in self.model_fields_set:
            _dict['overPeriodAlert'] = None

        # set to None if replication_partner_user_cpg (nullable) is None
        # and model_fields_set contains the field
        if self.replication_partner_user_cpg is None and "replication_partner_user_cpg" in self.model_fields_set:
            _dict['replicationPartnerUserCpg'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4SecondaryRemoteInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerId": obj.get("customerId"),
            "isRemoteArraySupportReplication": obj.get("isRemoteArraySupportReplication"),
            "overPeriodAlert": obj.get("overPeriodAlert"),
            "partnerId": obj.get("partnerId"),
            "partnerName": obj.get("partnerName"),
            "replicationPartnerUserCpg": obj.get("replicationPartnerUserCpg"),
            "replicationType": obj.get("replicationType"),
            "resourceUri": obj.get("resourceUri")
        })
        return _obj


