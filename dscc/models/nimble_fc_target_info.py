# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleFCTargetInfo(BaseModel):
    """
    Information about the Fibre Channel target.
    """ # noqa: E501
    target_fcid: Optional[StrictStr] = Field(default=None, description="FCID assigned to the Fibre Channel target port.")
    target_port_array_name: Optional[StrictStr] = Field(default=None, description="Name of the array hosting the Fibre Channel target port.")
    target_port_ctrlr_name: Optional[StrictStr] = Field(default=None, description="Name (A or B) of the controller to which the port belongs.")
    target_port_interface_name: Optional[StrictStr] = Field(default=None, description="Name of the interface hosted on the Fibre Channel target port.")
    target_wwnn: Optional[StrictStr] = Field(default=None, description="WWNN (World Wide Node Name) of the Fibre Channel target port.")
    target_wwpn: Optional[StrictStr] = Field(default=None, description="WWPN (World Wide Port Name) of the Fibre Channel target port.")
    __properties: ClassVar[List[str]] = ["target_fcid", "target_port_array_name", "target_port_ctrlr_name", "target_port_interface_name", "target_wwnn", "target_wwpn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleFCTargetInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if target_fcid (nullable) is None
        # and model_fields_set contains the field
        if self.target_fcid is None and "target_fcid" in self.model_fields_set:
            _dict['target_fcid'] = None

        # set to None if target_port_array_name (nullable) is None
        # and model_fields_set contains the field
        if self.target_port_array_name is None and "target_port_array_name" in self.model_fields_set:
            _dict['target_port_array_name'] = None

        # set to None if target_port_ctrlr_name (nullable) is None
        # and model_fields_set contains the field
        if self.target_port_ctrlr_name is None and "target_port_ctrlr_name" in self.model_fields_set:
            _dict['target_port_ctrlr_name'] = None

        # set to None if target_port_interface_name (nullable) is None
        # and model_fields_set contains the field
        if self.target_port_interface_name is None and "target_port_interface_name" in self.model_fields_set:
            _dict['target_port_interface_name'] = None

        # set to None if target_wwnn (nullable) is None
        # and model_fields_set contains the field
        if self.target_wwnn is None and "target_wwnn" in self.model_fields_set:
            _dict['target_wwnn'] = None

        # set to None if target_wwpn (nullable) is None
        # and model_fields_set contains the field
        if self.target_wwpn is None and "target_wwpn" in self.model_fields_set:
            _dict['target_wwpn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleFCTargetInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "target_fcid": obj.get("target_fcid"),
            "target_port_array_name": obj.get("target_port_array_name"),
            "target_port_ctrlr_name": obj.get("target_port_ctrlr_name"),
            "target_port_interface_name": obj.get("target_port_interface_name"),
            "target_wwnn": obj.get("target_wwnn"),
            "target_wwpn": obj.get("target_wwpn")
        })
        return _obj


