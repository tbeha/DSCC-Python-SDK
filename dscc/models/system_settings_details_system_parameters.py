# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SystemSettingsDetailsSystemParameters(BaseModel):
    """
    SystemSettingsDetailsSystemParameters
    """ # noqa: E501
    allow_wrtback_single_node: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Allow writeback single node setting in days", alias="allowWrtbackSingleNode")
    allow_wrtback_upgrade: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Allow the system to continue caching when in a single node state during an upgrade for up to the specified number of days", alias="allowWrtbackUpgrade")
    enable_aiqo_s: Optional[StrictStr] = Field(default=None, description="Enable or disable AI QoS feature, allowed values are:yes or no", alias="enableAIQoS")
    fc_raw_space_alert: Optional[StrictInt] = Field(default=None, description="FC raw space alert setting in MiB", alias="fcRawSpaceAlert")
    host_dif: Optional[StrictStr] = Field(default=None, description="Host Data Integrity Field, allowed values are:yes or no", alias="hostDIF")
    host_dif_template: Optional[StrictStr] = Field(default=None, description="HostDIF Template", alias="hostDIFTemplate")
    max_volume_retention: Optional[StrictInt] = Field(default=None, description="Maximum global volume retention policy in seconds", alias="maxVolumeRetention")
    overprov_ratio_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Over provisioning ratio limit setting", alias="overprovRatioLimit")
    overprov_ratio_warning: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Over provisioning ratio warning setting", alias="overprovRatioWarning")
    __properties: ClassVar[List[str]] = ["allowWrtbackSingleNode", "allowWrtbackUpgrade", "enableAIQoS", "fcRawSpaceAlert", "hostDIF", "hostDIFTemplate", "maxVolumeRetention", "overprovRatioLimit", "overprovRatioWarning"]

    @field_validator('host_dif_template')
    def host_dif_template_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STD_HOST_DIF', 'NO_HOST_DIF', 'THREEPAR_HOST_DIF', 'HBA_HOST_DIF']):
            raise ValueError("must be one of enum values ('STD_HOST_DIF', 'NO_HOST_DIF', 'THREEPAR_HOST_DIF', 'HBA_HOST_DIF')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SystemSettingsDetailsSystemParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if allow_wrtback_single_node (nullable) is None
        # and model_fields_set contains the field
        if self.allow_wrtback_single_node is None and "allow_wrtback_single_node" in self.model_fields_set:
            _dict['allowWrtbackSingleNode'] = None

        # set to None if allow_wrtback_upgrade (nullable) is None
        # and model_fields_set contains the field
        if self.allow_wrtback_upgrade is None and "allow_wrtback_upgrade" in self.model_fields_set:
            _dict['allowWrtbackUpgrade'] = None

        # set to None if enable_aiqo_s (nullable) is None
        # and model_fields_set contains the field
        if self.enable_aiqo_s is None and "enable_aiqo_s" in self.model_fields_set:
            _dict['enableAIQoS'] = None

        # set to None if fc_raw_space_alert (nullable) is None
        # and model_fields_set contains the field
        if self.fc_raw_space_alert is None and "fc_raw_space_alert" in self.model_fields_set:
            _dict['fcRawSpaceAlert'] = None

        # set to None if host_dif (nullable) is None
        # and model_fields_set contains the field
        if self.host_dif is None and "host_dif" in self.model_fields_set:
            _dict['hostDIF'] = None

        # set to None if host_dif_template (nullable) is None
        # and model_fields_set contains the field
        if self.host_dif_template is None and "host_dif_template" in self.model_fields_set:
            _dict['hostDIFTemplate'] = None

        # set to None if max_volume_retention (nullable) is None
        # and model_fields_set contains the field
        if self.max_volume_retention is None and "max_volume_retention" in self.model_fields_set:
            _dict['maxVolumeRetention'] = None

        # set to None if overprov_ratio_limit (nullable) is None
        # and model_fields_set contains the field
        if self.overprov_ratio_limit is None and "overprov_ratio_limit" in self.model_fields_set:
            _dict['overprovRatioLimit'] = None

        # set to None if overprov_ratio_warning (nullable) is None
        # and model_fields_set contains the field
        if self.overprov_ratio_warning is None and "overprov_ratio_warning" in self.model_fields_set:
            _dict['overprovRatioWarning'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SystemSettingsDetailsSystemParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowWrtbackSingleNode": obj.get("allowWrtbackSingleNode"),
            "allowWrtbackUpgrade": obj.get("allowWrtbackUpgrade"),
            "enableAIQoS": obj.get("enableAIQoS"),
            "fcRawSpaceAlert": obj.get("fcRawSpaceAlert"),
            "hostDIF": obj.get("hostDIF"),
            "hostDIFTemplate": obj.get("hostDIFTemplate"),
            "maxVolumeRetention": obj.get("maxVolumeRetention"),
            "overprovRatioLimit": obj.get("overprovRatioLimit"),
            "overprovRatioWarning": obj.get("overprovRatioWarning")
        })
        return _obj


