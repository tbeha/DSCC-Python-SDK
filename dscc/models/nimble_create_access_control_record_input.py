# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleCreateAccessControlRecordInput(BaseModel):
    """
    Create Nimble access-control record input.
    """ # noqa: E501
    apply_to: Optional[StrictStr] = Field(default=None, description="External management agent type. Possible values:'volume', 'pe', 'vvol_volume', 'vvol_snapshot', 'snapshot', 'both'.")
    chap_user_id: Optional[StrictStr] = Field(default=None, description="Identifier for the CHAP user.")
    initiator_group_id: Optional[StrictStr] = Field(default=None, description="Identifier for the initiator group.")
    lun: Optional[StrictInt] = Field(default=None, description="If this access control record applies to a regular volume, this attribute is the volume's LUN (Logical Unit Number). If the access protocol is iSCSI, the LUN will be 0. However, if the access protocol is Fibre Channel, the LUN will be in the range from 0 to 2047. If this record applies to a Virtual Volume, this attribute is the volume's secondary LUN in the range from 0 to 399999, for both iSCSI and Fibre Channel. If the record applies to a OpenstackV2 volume, the LUN will be in the range from 0 to 2047, for both iSCSI and Fibre Channel. If this record applies to a protocol endpoint or only a snapshot, this attribute is not meaningful and is set to null.")
    pe_id: Optional[StrictStr] = Field(default=None, description="Identifier for the protocol endpoint this access control record applies to.")
    pe_ids: Optional[List[Optional[StrictStr]]] = Field(default=None, description="List of candidate protocol endpoints that may be used to access the Virtual Volume. One of them will be selected for the access control record. This field is required only when creating an access control record for a Virtual Volume.")
    snap_id: Optional[StrictStr] = Field(default=None, description="Identifier for the snapshot this access control record applies to.")
    system_uid: Optional[StrictStr] = Field(default=None, description="Rest ID of the array containing this controller. `Filter, Sort`. This field is deprecated.", alias="systemUid")
    vol_id: Optional[StrictStr] = Field(default=None, description="Identifier for the volume this access control record applies to.")
    __properties: ClassVar[List[str]] = ["apply_to", "chap_user_id", "initiator_group_id", "lun", "pe_id", "pe_ids", "snap_id", "systemUid", "vol_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleCreateAccessControlRecordInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if apply_to (nullable) is None
        # and model_fields_set contains the field
        if self.apply_to is None and "apply_to" in self.model_fields_set:
            _dict['apply_to'] = None

        # set to None if chap_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.chap_user_id is None and "chap_user_id" in self.model_fields_set:
            _dict['chap_user_id'] = None

        # set to None if initiator_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_group_id is None and "initiator_group_id" in self.model_fields_set:
            _dict['initiator_group_id'] = None

        # set to None if lun (nullable) is None
        # and model_fields_set contains the field
        if self.lun is None and "lun" in self.model_fields_set:
            _dict['lun'] = None

        # set to None if pe_id (nullable) is None
        # and model_fields_set contains the field
        if self.pe_id is None and "pe_id" in self.model_fields_set:
            _dict['pe_id'] = None

        # set to None if pe_ids (nullable) is None
        # and model_fields_set contains the field
        if self.pe_ids is None and "pe_ids" in self.model_fields_set:
            _dict['pe_ids'] = None

        # set to None if snap_id (nullable) is None
        # and model_fields_set contains the field
        if self.snap_id is None and "snap_id" in self.model_fields_set:
            _dict['snap_id'] = None

        # set to None if system_uid (nullable) is None
        # and model_fields_set contains the field
        if self.system_uid is None and "system_uid" in self.model_fields_set:
            _dict['systemUid'] = None

        # set to None if vol_id (nullable) is None
        # and model_fields_set contains the field
        if self.vol_id is None and "vol_id" in self.model_fields_set:
            _dict['vol_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleCreateAccessControlRecordInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apply_to": obj.get("apply_to"),
            "chap_user_id": obj.get("chap_user_id"),
            "initiator_group_id": obj.get("initiator_group_id"),
            "lun": obj.get("lun"),
            "pe_id": obj.get("pe_id"),
            "pe_ids": obj.get("pe_ids"),
            "snap_id": obj.get("snap_id"),
            "systemUid": obj.get("systemUid"),
            "vol_id": obj.get("vol_id")
        })
        return _obj


