# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.manufacturing_single import ManufacturingSingle
from dscc.models.primera_common_resource_attributes import PrimeraCommonResourceAttributes
from typing import Optional, Set
from typing_extensions import Self

class NodeMemoriesList(BaseModel):
    """
    NodeMemoriesList
    """ # noqa: E501
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    cache_type: Optional[StrictStr] = Field(default=None, description="Type of the cache memory is used for", alias="cacheType")
    cas_latency: Optional[StrictStr] = Field(default=None, description="CAS latency", alias="casLatency")
    common_resource_attributes: Optional[PrimeraCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    displayname: Optional[StrictStr] = Field(default=None, description="Name to be used for display purposes")
    domain: Optional[StrictStr] = Field(default=None, description="Domain that the resource belongs to")
    generation: Optional[StrictInt] = Field(default=None, description="generation `Filter, Sort`")
    id: Optional[StrictStr] = Field(default=None, description="UUID string uniquely identifying the node object. `Filter`")
    jedec_id: Optional[StrictStr] = Field(default=None, description="JEDEC ID", alias="jedecId")
    manufacturing: Optional[ManufacturingSingle] = None
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Name of the resource. `Filter, Sort`")
    node_device_id: Optional[StrictInt] = Field(default=None, description="ID of the node", alias="nodeDeviceId")
    node_id: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the node. `Filter, Sort`", alias="nodeId")
    node_memory_type: Optional[StrictStr] = Field(default=None, description="Type of the physical memory", alias="nodeMemoryType")
    part_number: Optional[StrictStr] = Field(default=None, description="Part number", alias="partNumber")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed node memory object", alias="resourceUri")
    revision: Optional[StrictStr] = Field(default=None, description="Revision")
    riser: Optional[StrictStr] = Field(default=None, description="Riser")
    size_mi_b: Optional[StrictInt] = Field(default=None, description="Size in MiB", alias="sizeMiB")
    slot: Optional[StrictInt] = Field(default=None, description="Slot of the node physical memory")
    slot_id: Optional[StrictStr] = Field(default=None, description="Slot ID of the node physical memory", alias="slotId")
    system_id: Optional[StrictStr] = Field(default=None, description="SystemId/Serial Number  of the array.", alias="systemId")
    type: Optional[StrictStr] = Field(default=None, description="type")
    __properties: ClassVar[List[str]] = ["associatedLinks", "cacheType", "casLatency", "commonResourceAttributes", "customerId", "displayname", "domain", "generation", "id", "jedecId", "manufacturing", "name", "nodeDeviceId", "nodeId", "nodeMemoryType", "partNumber", "resourceUri", "revision", "riser", "sizeMiB", "slot", "slotId", "systemId", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeMemoriesList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manufacturing
        if self.manufacturing:
            _dict['manufacturing'] = self.manufacturing.to_dict()
        # set to None if associated_links (nullable) is None
        # and model_fields_set contains the field
        if self.associated_links is None and "associated_links" in self.model_fields_set:
            _dict['associatedLinks'] = None

        # set to None if cache_type (nullable) is None
        # and model_fields_set contains the field
        if self.cache_type is None and "cache_type" in self.model_fields_set:
            _dict['cacheType'] = None

        # set to None if cas_latency (nullable) is None
        # and model_fields_set contains the field
        if self.cas_latency is None and "cas_latency" in self.model_fields_set:
            _dict['casLatency'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if displayname (nullable) is None
        # and model_fields_set contains the field
        if self.displayname is None and "displayname" in self.model_fields_set:
            _dict['displayname'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if jedec_id (nullable) is None
        # and model_fields_set contains the field
        if self.jedec_id is None and "jedec_id" in self.model_fields_set:
            _dict['jedecId'] = None

        # set to None if manufacturing (nullable) is None
        # and model_fields_set contains the field
        if self.manufacturing is None and "manufacturing" in self.model_fields_set:
            _dict['manufacturing'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if node_device_id (nullable) is None
        # and model_fields_set contains the field
        if self.node_device_id is None and "node_device_id" in self.model_fields_set:
            _dict['nodeDeviceId'] = None

        # set to None if node_id (nullable) is None
        # and model_fields_set contains the field
        if self.node_id is None and "node_id" in self.model_fields_set:
            _dict['nodeId'] = None

        # set to None if node_memory_type (nullable) is None
        # and model_fields_set contains the field
        if self.node_memory_type is None and "node_memory_type" in self.model_fields_set:
            _dict['nodeMemoryType'] = None

        # set to None if part_number (nullable) is None
        # and model_fields_set contains the field
        if self.part_number is None and "part_number" in self.model_fields_set:
            _dict['partNumber'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if revision (nullable) is None
        # and model_fields_set contains the field
        if self.revision is None and "revision" in self.model_fields_set:
            _dict['revision'] = None

        # set to None if riser (nullable) is None
        # and model_fields_set contains the field
        if self.riser is None and "riser" in self.model_fields_set:
            _dict['riser'] = None

        # set to None if size_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.size_mi_b is None and "size_mi_b" in self.model_fields_set:
            _dict['sizeMiB'] = None

        # set to None if slot (nullable) is None
        # and model_fields_set contains the field
        if self.slot is None and "slot" in self.model_fields_set:
            _dict['slot'] = None

        # set to None if slot_id (nullable) is None
        # and model_fields_set contains the field
        if self.slot_id is None and "slot_id" in self.model_fields_set:
            _dict['slotId'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeMemoriesList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedLinks": [AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "cacheType": obj.get("cacheType"),
            "casLatency": obj.get("casLatency"),
            "commonResourceAttributes": PrimeraCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "customerId": obj.get("customerId"),
            "displayname": obj.get("displayname"),
            "domain": obj.get("domain"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "jedecId": obj.get("jedecId"),
            "manufacturing": ManufacturingSingle.from_dict(obj["manufacturing"]) if obj.get("manufacturing") is not None else None,
            "name": obj.get("name"),
            "nodeDeviceId": obj.get("nodeDeviceId"),
            "nodeId": obj.get("nodeId"),
            "nodeMemoryType": obj.get("nodeMemoryType"),
            "partNumber": obj.get("partNumber"),
            "resourceUri": obj.get("resourceUri"),
            "revision": obj.get("revision"),
            "riser": obj.get("riser"),
            "sizeMiB": obj.get("sizeMiB"),
            "slot": obj.get("slot"),
            "slotId": obj.get("slotId"),
            "systemId": obj.get("systemId"),
            "type": obj.get("type")
        })
        return _obj


