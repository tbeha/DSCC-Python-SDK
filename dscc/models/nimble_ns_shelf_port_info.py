# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleNsShelfPortInfo(BaseModel):
    """
    NimbleNsShelfPortInfo
    """ # noqa: E501
    port_errors: Optional[StrictStr] = Field(default=None, description="Comma separated list of integers to indicate error conditions.")
    port_idx: Optional[StrictInt] = Field(default=None, description="Index of the port, starting from 0.")
    port_name: Optional[StrictStr] = Field(default=None, description="Name of the port.")
    port_status: Optional[StrictStr] = Field(default=None, description="Status of the port. Possible values:'connected', 'disconnected', 'unknown','disabled'.")
    port_type: Optional[StrictStr] = Field(default=None, description="Type of the sas port (e.g. upstream/downstream). Possible values:'upstream', 'downstream', 'unknown'.")
    remote_loc_id: Optional[StrictInt] = Field(default=None, description="The location ID of the controller that connects to this port.")
    remote_port_id: Optional[StrictInt] = Field(default=None, description="The pord_id of the remote SAS port that connects to this port.")
    remote_sas_addr: Optional[StrictStr] = Field(default=None, description="SAS address for the connected.")
    remote_sas_domain: Optional[StrictStr] = Field(default=None, description="The sas domain (A or B side) it connects to. Possible values:'A', 'B', 'unknown'.")
    remote_sas_phy_id: Optional[StrictStr] = Field(default=None, description="Comma separated list of phy ids that this port connects to.")
    __properties: ClassVar[List[str]] = ["port_errors", "port_idx", "port_name", "port_status", "port_type", "remote_loc_id", "remote_port_id", "remote_sas_addr", "remote_sas_domain", "remote_sas_phy_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleNsShelfPortInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if port_errors (nullable) is None
        # and model_fields_set contains the field
        if self.port_errors is None and "port_errors" in self.model_fields_set:
            _dict['port_errors'] = None

        # set to None if port_idx (nullable) is None
        # and model_fields_set contains the field
        if self.port_idx is None and "port_idx" in self.model_fields_set:
            _dict['port_idx'] = None

        # set to None if port_name (nullable) is None
        # and model_fields_set contains the field
        if self.port_name is None and "port_name" in self.model_fields_set:
            _dict['port_name'] = None

        # set to None if port_status (nullable) is None
        # and model_fields_set contains the field
        if self.port_status is None and "port_status" in self.model_fields_set:
            _dict['port_status'] = None

        # set to None if port_type (nullable) is None
        # and model_fields_set contains the field
        if self.port_type is None and "port_type" in self.model_fields_set:
            _dict['port_type'] = None

        # set to None if remote_loc_id (nullable) is None
        # and model_fields_set contains the field
        if self.remote_loc_id is None and "remote_loc_id" in self.model_fields_set:
            _dict['remote_loc_id'] = None

        # set to None if remote_port_id (nullable) is None
        # and model_fields_set contains the field
        if self.remote_port_id is None and "remote_port_id" in self.model_fields_set:
            _dict['remote_port_id'] = None

        # set to None if remote_sas_addr (nullable) is None
        # and model_fields_set contains the field
        if self.remote_sas_addr is None and "remote_sas_addr" in self.model_fields_set:
            _dict['remote_sas_addr'] = None

        # set to None if remote_sas_domain (nullable) is None
        # and model_fields_set contains the field
        if self.remote_sas_domain is None and "remote_sas_domain" in self.model_fields_set:
            _dict['remote_sas_domain'] = None

        # set to None if remote_sas_phy_id (nullable) is None
        # and model_fields_set contains the field
        if self.remote_sas_phy_id is None and "remote_sas_phy_id" in self.model_fields_set:
            _dict['remote_sas_phy_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleNsShelfPortInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "port_errors": obj.get("port_errors"),
            "port_idx": obj.get("port_idx"),
            "port_name": obj.get("port_name"),
            "port_status": obj.get("port_status"),
            "port_type": obj.get("port_type"),
            "remote_loc_id": obj.get("remote_loc_id"),
            "remote_port_id": obj.get("remote_port_id"),
            "remote_sas_addr": obj.get("remote_sas_addr"),
            "remote_sas_domain": obj.get("remote_sas_domain"),
            "remote_sas_phy_id": obj.get("remote_sas_phy_id")
        })
        return _obj


