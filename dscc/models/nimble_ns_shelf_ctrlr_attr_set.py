# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleNsShelfCtrlrAttrSet(BaseModel):
    """
    NimbleNsShelfCtrlrAttrSet
    """ # noqa: E501
    cached_serial: Optional[StrictStr] = Field(default=None, description="Cached serial.")
    disk_serials: Optional[StrictStr] = Field(default=None, description="Comma separated list of disk serials connected to this logical controller.")
    disk_types: Optional[StrictStr] = Field(default=None, description="Comma separated list of disk types (H for HDD, S for SSD).")
    hw_state: Optional[StrictStr] = Field(default=None, description="The hardware state for this logical controller. Possible values:'discovering', 'disconnected', 'void','ready','faulty'.")
    session_serial: Optional[StrictStr] = Field(default=None, description="Session serial.")
    sw_type: Optional[StrictStr] = Field(default=None, description="The software type of this logical controller. Possible values:'Disk Shelf', 'unknown shelf software type', 'All Flash Shelf','Head Shelf'.")
    __properties: ClassVar[List[str]] = ["cached_serial", "disk_serials", "disk_types", "hw_state", "session_serial", "sw_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleNsShelfCtrlrAttrSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cached_serial (nullable) is None
        # and model_fields_set contains the field
        if self.cached_serial is None and "cached_serial" in self.model_fields_set:
            _dict['cached_serial'] = None

        # set to None if disk_serials (nullable) is None
        # and model_fields_set contains the field
        if self.disk_serials is None and "disk_serials" in self.model_fields_set:
            _dict['disk_serials'] = None

        # set to None if disk_types (nullable) is None
        # and model_fields_set contains the field
        if self.disk_types is None and "disk_types" in self.model_fields_set:
            _dict['disk_types'] = None

        # set to None if hw_state (nullable) is None
        # and model_fields_set contains the field
        if self.hw_state is None and "hw_state" in self.model_fields_set:
            _dict['hw_state'] = None

        # set to None if session_serial (nullable) is None
        # and model_fields_set contains the field
        if self.session_serial is None and "session_serial" in self.model_fields_set:
            _dict['session_serial'] = None

        # set to None if sw_type (nullable) is None
        # and model_fields_set contains the field
        if self.sw_type is None and "sw_type" in self.model_fields_set:
            _dict['sw_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleNsShelfCtrlrAttrSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cached_serial": obj.get("cached_serial"),
            "disk_serials": obj.get("disk_serials"),
            "disk_types": obj.get("disk_types"),
            "hw_state": obj.get("hw_state"),
            "session_serial": obj.get("session_serial"),
            "sw_type": obj.get("sw_type")
        })
        return _obj


