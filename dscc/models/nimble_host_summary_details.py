# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.fc_initiator_list import FCInitiatorList
from dscc.models.fc_port_list import FCPortList
from dscc.models.iscsi_initiator_list import IscsiInitiatorList
from typing import Optional, Set
from typing_extensions import Self

class NimbleHostSummaryDetails(BaseModel):
    """
    NimbleHostSummaryDetails
    """ # noqa: E501
    access_protocol: Optional[StrictStr] = Field(default=None, description="Access protocol of the volume. Possible values:'iscsi', 'fc'.")
    acr_id: Optional[StrictStr] = Field(default=None, description="Identifier of the access control record.")
    apply_to: Optional[StrictStr] = Field(default=None, description="Type of object this access control record applies to. Possible values: 'volume'. 'pe', 'vvol_volume', 'vvol_snapshot', 'snapshot', 'both'.")
    chap_user_id: Optional[StrictStr] = Field(default=None, description="Identifier for the CHAP user.")
    chap_user_name: Optional[StrictStr] = Field(default=None, description="Flag denoting if data in the associated volume should be compressed.")
    fc_initiators: Optional[List[Optional[FCInitiatorList]]] = Field(default=None, description="list of FC Initiators")
    fc_target_ports: Optional[List[Optional[FCPortList]]] = Field(default=None, description="list of FC Ports")
    host_type: Optional[StrictStr] = Field(default=None, description="type of Host.")
    id: Optional[StrictStr] = Field(default=None, description="Identifier for the host id")
    initiator_group_id: Optional[StrictStr] = Field(default=None, description="Identifier for the initiator group. `Filter, Sort`")
    initiator_group_name: Optional[StrictStr] = Field(default=None, description="Name of the initiator group.")
    iscsi_initiators: Optional[List[Optional[IscsiInitiatorList]]] = Field(default=None, description="list of iscsi Initiators")
    lun: Optional[StrictInt] = Field(default=None, description="If this access control record applies to a regular volume, this attribute is the volume's LUN (Logical Unit Number). If the access protocol is iSCSI, the LUN will be 0. However, if the access protocol is Fibre Channel, the LUN will be in the range from 0 to 2047. If this record applies to a Virtual Volume, this attribute is the volume's secondary LUN in the range from 0 to 399999, for both iSCSI and Fibre Channel. If the record applies to a OpenstackV2 volume, the LUN will be in the range from 0 to 2047, for both iSCSI and Fibre Channel. If this record applies to a protocol endpoint or only a snapshot, this attribute is not meaningful and is set to null.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the host group in the Data Services Cloud Console (DSCC)")
    num_connections: Optional[StrictInt] = Field(default=None, description="Number of Connections")
    sc_host_id: Optional[StrictStr] = Field(default=None, description="Identifier for the initiator group in the Data Services Cloud Console (DSCC)")
    snap_id: Optional[StrictStr] = Field(default=None, description="Identifier for the snapshot this access control record applies to. `Filter, Sort`")
    user_created: Optional[StrictBool] = Field(default=None, description="Indicates whether it is user created host or discovered host.")
    __properties: ClassVar[List[str]] = ["access_protocol", "acr_id", "apply_to", "chap_user_id", "chap_user_name", "fc_initiators", "fc_target_ports", "host_type", "id", "initiator_group_id", "initiator_group_name", "iscsi_initiators", "lun", "name", "num_connections", "sc_host_id", "snap_id", "user_created"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleHostSummaryDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fc_initiators (list)
        _items = []
        if self.fc_initiators:
            for _item in self.fc_initiators:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fc_initiators'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fc_target_ports (list)
        _items = []
        if self.fc_target_ports:
            for _item in self.fc_target_ports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fc_target_ports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in iscsi_initiators (list)
        _items = []
        if self.iscsi_initiators:
            for _item in self.iscsi_initiators:
                if _item:
                    _items.append(_item.to_dict())
            _dict['iscsi_initiators'] = _items
        # set to None if access_protocol (nullable) is None
        # and model_fields_set contains the field
        if self.access_protocol is None and "access_protocol" in self.model_fields_set:
            _dict['access_protocol'] = None

        # set to None if acr_id (nullable) is None
        # and model_fields_set contains the field
        if self.acr_id is None and "acr_id" in self.model_fields_set:
            _dict['acr_id'] = None

        # set to None if apply_to (nullable) is None
        # and model_fields_set contains the field
        if self.apply_to is None and "apply_to" in self.model_fields_set:
            _dict['apply_to'] = None

        # set to None if chap_user_id (nullable) is None
        # and model_fields_set contains the field
        if self.chap_user_id is None and "chap_user_id" in self.model_fields_set:
            _dict['chap_user_id'] = None

        # set to None if chap_user_name (nullable) is None
        # and model_fields_set contains the field
        if self.chap_user_name is None and "chap_user_name" in self.model_fields_set:
            _dict['chap_user_name'] = None

        # set to None if fc_initiators (nullable) is None
        # and model_fields_set contains the field
        if self.fc_initiators is None and "fc_initiators" in self.model_fields_set:
            _dict['fc_initiators'] = None

        # set to None if fc_target_ports (nullable) is None
        # and model_fields_set contains the field
        if self.fc_target_ports is None and "fc_target_ports" in self.model_fields_set:
            _dict['fc_target_ports'] = None

        # set to None if host_type (nullable) is None
        # and model_fields_set contains the field
        if self.host_type is None and "host_type" in self.model_fields_set:
            _dict['host_type'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if initiator_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_group_id is None and "initiator_group_id" in self.model_fields_set:
            _dict['initiator_group_id'] = None

        # set to None if initiator_group_name (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_group_name is None and "initiator_group_name" in self.model_fields_set:
            _dict['initiator_group_name'] = None

        # set to None if iscsi_initiators (nullable) is None
        # and model_fields_set contains the field
        if self.iscsi_initiators is None and "iscsi_initiators" in self.model_fields_set:
            _dict['iscsi_initiators'] = None

        # set to None if lun (nullable) is None
        # and model_fields_set contains the field
        if self.lun is None and "lun" in self.model_fields_set:
            _dict['lun'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if num_connections (nullable) is None
        # and model_fields_set contains the field
        if self.num_connections is None and "num_connections" in self.model_fields_set:
            _dict['num_connections'] = None

        # set to None if sc_host_id (nullable) is None
        # and model_fields_set contains the field
        if self.sc_host_id is None and "sc_host_id" in self.model_fields_set:
            _dict['sc_host_id'] = None

        # set to None if snap_id (nullable) is None
        # and model_fields_set contains the field
        if self.snap_id is None and "snap_id" in self.model_fields_set:
            _dict['snap_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleHostSummaryDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_protocol": obj.get("access_protocol"),
            "acr_id": obj.get("acr_id"),
            "apply_to": obj.get("apply_to"),
            "chap_user_id": obj.get("chap_user_id"),
            "chap_user_name": obj.get("chap_user_name"),
            "fc_initiators": [FCInitiatorList.from_dict(_item) for _item in obj["fc_initiators"]] if obj.get("fc_initiators") is not None else None,
            "fc_target_ports": [FCPortList.from_dict(_item) for _item in obj["fc_target_ports"]] if obj.get("fc_target_ports") is not None else None,
            "host_type": obj.get("host_type"),
            "id": obj.get("id"),
            "initiator_group_id": obj.get("initiator_group_id"),
            "initiator_group_name": obj.get("initiator_group_name"),
            "iscsi_initiators": [IscsiInitiatorList.from_dict(_item) for _item in obj["iscsi_initiators"]] if obj.get("iscsi_initiators") is not None else None,
            "lun": obj.get("lun"),
            "name": obj.get("name"),
            "num_connections": obj.get("num_connections"),
            "sc_host_id": obj.get("sc_host_id"),
            "snap_id": obj.get("snap_id"),
            "user_created": obj.get("user_created")
        })
        return _obj


