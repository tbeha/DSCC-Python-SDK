# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleMergeGroupsInput(BaseModel):
    """
    Perform group merge with the specified group.
    """ # noqa: E501
    force: Optional[StrictBool] = Field(default=None, description="Ignore warnings and forcibly merge specified group with this group. Possible values: 'true', 'false'.")
    skip_secondary_mgmt_ip: Optional[StrictBool] = Field(default=None, description="Skip check for secondary management IP address. Possible values: 'true', 'false'.")
    src_group_ip: Optional[StrictStr] = Field(description="IP address of the source group. Four numbers in the range [0,255] separated by periods. Example: '128.0.0.1'.")
    src_group_name: Optional[StrictStr] = Field(description="Name of the source group. String of up to 64 alphanumeric characters, - is allowed after first character. Example: 'g1-exchange'.")
    src_passphrase: Optional[StrictStr] = Field(default=None, description="Source group encryption passphrase. Encryption passphrase. String with size from 8 to 64 printable characters. Example: 'passphrase-91'.")
    src_password: Optional[StrictStr] = Field(description="Password of the source group. String of 8 to 255 printable characters excluding ampersand and ;[]`. Example: 'password-91'.")
    src_username: Optional[StrictStr] = Field(description="Username of the source group. String of up to 80 alphanumeric characters, beginning with a letter. For Active Directory users, it can include backslash (\\), dash (-), period (.), underscore (_) and space. Example: 'user1', 'companydomain\\user1'.")
    __properties: ClassVar[List[str]] = ["force", "skip_secondary_mgmt_ip", "src_group_ip", "src_group_name", "src_passphrase", "src_password", "src_username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleMergeGroupsInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if src_group_ip (nullable) is None
        # and model_fields_set contains the field
        if self.src_group_ip is None and "src_group_ip" in self.model_fields_set:
            _dict['src_group_ip'] = None

        # set to None if src_group_name (nullable) is None
        # and model_fields_set contains the field
        if self.src_group_name is None and "src_group_name" in self.model_fields_set:
            _dict['src_group_name'] = None

        # set to None if src_password (nullable) is None
        # and model_fields_set contains the field
        if self.src_password is None and "src_password" in self.model_fields_set:
            _dict['src_password'] = None

        # set to None if src_username (nullable) is None
        # and model_fields_set contains the field
        if self.src_username is None and "src_username" in self.model_fields_set:
            _dict['src_username'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleMergeGroupsInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "force": obj.get("force"),
            "skip_secondary_mgmt_ip": obj.get("skip_secondary_mgmt_ip"),
            "src_group_ip": obj.get("src_group_ip"),
            "src_group_name": obj.get("src_group_name"),
            "src_passphrase": obj.get("src_passphrase"),
            "src_password": obj.get("src_password"),
            "src_username": obj.get("src_username")
        })
        return _obj


