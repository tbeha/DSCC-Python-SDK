# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleSnapshotFilterableFieldsWithoutFilter(BaseModel):
    """
    NimbleSnapshotFilterableFieldsWithoutFilter
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Identifier for the snapshot. A 42 digit hexadecimal number.")
    is_locked: Optional[StrictBool] = Field(default=None, description="To verify a snapshot is immutable or not.")
    name: Optional[StrictStr] = Field(default=None, description="Name of snapshot. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.")
    online: Optional[StrictBool] = Field(default=None, description="Online state for a snapshot means it could be mounted for data restore.")
    pool_name: Optional[StrictStr] = Field(default=None, description="Name of the pool in which the parent volume belongs to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    replication_status: Optional[StrictStr] = Field(default=None, description="Replication status. Possible values: 'complete', 'in_progress', 'pending', 'fail'.")
    schedule_id: Optional[StrictStr] = Field(default=None, description="Identifier of protection schedule. A 42 digit hexadecimal number.")
    schedule_name: Optional[StrictStr] = Field(default=None, description="Name of protection schedule. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    serial_number: Optional[StrictStr] = Field(default=None, description="Identifier for the SCSI protocol. A 32 digit hexadecimal number.")
    size: Optional[StrictInt] = Field(default=None, description="Size of volume at time of snapshot (in bytes).")
    snap_collection_id: Optional[StrictStr] = Field(default=None, description="Identifier of snapshot collection. A 42 digit hexadecimal number.")
    snap_collection_name: Optional[StrictStr] = Field(default=None, description="Name of snapshot collection. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.")
    target_name: Optional[StrictStr] = Field(default=None, description="The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target snapshot. The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target.")
    writable: Optional[StrictBool] = Field(default=None, description="Whether snapshot is writable or not. Mandatory and must be set to 'true' for VSS application synchronized snapshots.")
    __properties: ClassVar[List[str]] = ["id", "is_locked", "name", "online", "pool_name", "replication_status", "schedule_id", "schedule_name", "serial_number", "size", "snap_collection_id", "snap_collection_name", "target_name", "writable"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleSnapshotFilterableFieldsWithoutFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if is_locked (nullable) is None
        # and model_fields_set contains the field
        if self.is_locked is None and "is_locked" in self.model_fields_set:
            _dict['is_locked'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if online (nullable) is None
        # and model_fields_set contains the field
        if self.online is None and "online" in self.model_fields_set:
            _dict['online'] = None

        # set to None if pool_name (nullable) is None
        # and model_fields_set contains the field
        if self.pool_name is None and "pool_name" in self.model_fields_set:
            _dict['pool_name'] = None

        # set to None if replication_status (nullable) is None
        # and model_fields_set contains the field
        if self.replication_status is None and "replication_status" in self.model_fields_set:
            _dict['replication_status'] = None

        # set to None if schedule_id (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_id is None and "schedule_id" in self.model_fields_set:
            _dict['schedule_id'] = None

        # set to None if schedule_name (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_name is None and "schedule_name" in self.model_fields_set:
            _dict['schedule_name'] = None

        # set to None if serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.serial_number is None and "serial_number" in self.model_fields_set:
            _dict['serial_number'] = None

        # set to None if size (nullable) is None
        # and model_fields_set contains the field
        if self.size is None and "size" in self.model_fields_set:
            _dict['size'] = None

        # set to None if snap_collection_id (nullable) is None
        # and model_fields_set contains the field
        if self.snap_collection_id is None and "snap_collection_id" in self.model_fields_set:
            _dict['snap_collection_id'] = None

        # set to None if snap_collection_name (nullable) is None
        # and model_fields_set contains the field
        if self.snap_collection_name is None and "snap_collection_name" in self.model_fields_set:
            _dict['snap_collection_name'] = None

        # set to None if target_name (nullable) is None
        # and model_fields_set contains the field
        if self.target_name is None and "target_name" in self.model_fields_set:
            _dict['target_name'] = None

        # set to None if writable (nullable) is None
        # and model_fields_set contains the field
        if self.writable is None and "writable" in self.model_fields_set:
            _dict['writable'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleSnapshotFilterableFieldsWithoutFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "is_locked": obj.get("is_locked"),
            "name": obj.get("name"),
            "online": obj.get("online"),
            "pool_name": obj.get("pool_name"),
            "replication_status": obj.get("replication_status"),
            "schedule_id": obj.get("schedule_id"),
            "schedule_name": obj.get("schedule_name"),
            "serial_number": obj.get("serial_number"),
            "size": obj.get("size"),
            "snap_collection_id": obj.get("snap_collection_id"),
            "snap_collection_name": obj.get("snap_collection_name"),
            "target_name": obj.get("target_name"),
            "writable": obj.get("writable")
        })
        return _obj


