# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4CreatevVolSCInput(BaseModel):
    """
    Request body for creating VMware Storage Container
    """ # noqa: E501
    domain: Optional[StrictStr] = Field(default=None, description="Domain that the resource belongs to")
    host_ids: Optional[List[StrictStr]] = Field(default=None, description="Host IDs", alias="hostIDs")
    host_set_ids: Optional[List[StrictStr]] = Field(default=None, description="Host Set IDs", alias="hostSetIDs")
    name: StrictStr = Field(description="Storage Container Name.")
    sc_type: Optional[StrictStr] = Field(default=None, description="Field is supported from 10.4.0 and above. Indicates the type of the VMware VASA storage container that would get created in the system. Valid values are NVMe and SCSI.", alias="scType")
    __properties: ClassVar[List[str]] = ["domain", "hostIDs", "hostSetIDs", "name", "scType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4CreatevVolSCInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if host_ids (nullable) is None
        # and model_fields_set contains the field
        if self.host_ids is None and "host_ids" in self.model_fields_set:
            _dict['hostIDs'] = None

        # set to None if host_set_ids (nullable) is None
        # and model_fields_set contains the field
        if self.host_set_ids is None and "host_set_ids" in self.model_fields_set:
            _dict['hostSetIDs'] = None

        # set to None if sc_type (nullable) is None
        # and model_fields_set contains the field
        if self.sc_type is None and "sc_type" in self.model_fields_set:
            _dict['scType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4CreatevVolSCInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain": obj.get("domain"),
            "hostIDs": obj.get("hostIDs"),
            "hostSetIDs": obj.get("hostSetIDs"),
            "name": obj.get("name"),
            "scType": obj.get("scType")
        })
        return _obj


