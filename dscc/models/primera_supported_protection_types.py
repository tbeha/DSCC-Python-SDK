# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.primera_common_resource_attributes import PrimeraCommonResourceAttributes
from dscc.models.primera_replication_partner import PrimeraReplicationPartner
from typing import Optional, Set
from typing_extensions import Self

class PrimeraSupportedProtectionTypes(BaseModel):
    """
    Response body for supported protection types on an application set
    """ # noqa: E501
    async_partners: Optional[List[Optional[PrimeraReplicationPartner]]] = Field(default=None, description="List of potential replication partners that can be part of asynchronous protection policy", alias="asyncPartners")
    common_resource_attributes: Optional[PrimeraCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    is_sld_supported: Optional[StrictBool] = Field(default=None, description="Shows if SLD is supported or not", alias="isSLDSupported")
    protection_types: Optional[List[StrictStr]] = Field(default=None, description="List of protection policies types that can be configured on the application set Possible values: schedule, async, sync", alias="protectionTypes")
    request_uri: Optional[StrictStr] = Field(default=None, description="requestUri for supported protection types", alias="requestUri")
    sync_partners: Optional[List[Optional[PrimeraReplicationPartner]]] = Field(default=None, description="List of potential replication partners that can be part of synchronous protection policy", alias="syncPartners")
    __properties: ClassVar[List[str]] = ["asyncPartners", "commonResourceAttributes", "customerId", "generation", "isSLDSupported", "protectionTypes", "requestUri", "syncPartners"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrimeraSupportedProtectionTypes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in async_partners (list)
        _items = []
        if self.async_partners:
            for _item in self.async_partners:
                if _item:
                    _items.append(_item.to_dict())
            _dict['asyncPartners'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sync_partners (list)
        _items = []
        if self.sync_partners:
            for _item in self.sync_partners:
                if _item:
                    _items.append(_item.to_dict())
            _dict['syncPartners'] = _items
        # set to None if async_partners (nullable) is None
        # and model_fields_set contains the field
        if self.async_partners is None and "async_partners" in self.model_fields_set:
            _dict['asyncPartners'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if protection_types (nullable) is None
        # and model_fields_set contains the field
        if self.protection_types is None and "protection_types" in self.model_fields_set:
            _dict['protectionTypes'] = None

        # set to None if request_uri (nullable) is None
        # and model_fields_set contains the field
        if self.request_uri is None and "request_uri" in self.model_fields_set:
            _dict['requestUri'] = None

        # set to None if sync_partners (nullable) is None
        # and model_fields_set contains the field
        if self.sync_partners is None and "sync_partners" in self.model_fields_set:
            _dict['syncPartners'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrimeraSupportedProtectionTypes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asyncPartners": [PrimeraReplicationPartner.from_dict(_item) for _item in obj["asyncPartners"]] if obj.get("asyncPartners") is not None else None,
            "commonResourceAttributes": PrimeraCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "customerId": obj.get("customerId"),
            "generation": obj.get("generation"),
            "isSLDSupported": obj.get("isSLDSupported"),
            "protectionTypes": obj.get("protectionTypes"),
            "requestUri": obj.get("requestUri"),
            "syncPartners": [PrimeraReplicationPartner.from_dict(_item) for _item in obj["syncPartners"]] if obj.get("syncPartners") is not None else None
        })
        return _obj


