# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OnlineClone(BaseModel):
    """
    Online clone of a volume.
    """ # noqa: E501
    auto_lun: Optional[StrictBool] = Field(default=None, description="Specify to use auto lun number.", alias="autoLun")
    destination_cpg: Optional[StrictStr] = Field(default=None, description="Name of the User CPG", alias="destinationCpg")
    destination_snapshot_cpg: Optional[StrictStr] = Field(default=None, description="Name of the Snapshot CPG", alias="destinationSnapshotCpg")
    host_group_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of host group.", alias="hostGroupId")
    lun: Optional[StrictInt] = Field(default=None, description="LUN of volume.")
    __properties: ClassVar[List[str]] = ["autoLun", "destinationCpg", "destinationSnapshotCpg", "hostGroupId", "lun"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OnlineClone from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if auto_lun (nullable) is None
        # and model_fields_set contains the field
        if self.auto_lun is None and "auto_lun" in self.model_fields_set:
            _dict['autoLun'] = None

        # set to None if destination_cpg (nullable) is None
        # and model_fields_set contains the field
        if self.destination_cpg is None and "destination_cpg" in self.model_fields_set:
            _dict['destinationCpg'] = None

        # set to None if destination_snapshot_cpg (nullable) is None
        # and model_fields_set contains the field
        if self.destination_snapshot_cpg is None and "destination_snapshot_cpg" in self.model_fields_set:
            _dict['destinationSnapshotCpg'] = None

        # set to None if host_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.host_group_id is None and "host_group_id" in self.model_fields_set:
            _dict['hostGroupId'] = None

        # set to None if lun (nullable) is None
        # and model_fields_set contains the field
        if self.lun is None and "lun" in self.model_fields_set:
            _dict['lun'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OnlineClone from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoLun": obj.get("autoLun"),
            "destinationCpg": obj.get("destinationCpg"),
            "destinationSnapshotCpg": obj.get("destinationSnapshotCpg"),
            "hostGroupId": obj.get("hostGroupId"),
            "lun": obj.get("lun")
        })
        return _obj


