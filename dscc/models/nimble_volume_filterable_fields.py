# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleVolumeFilterableFields(BaseModel):
    """
    NimbleVolumeFilterableFields
    """ # noqa: E501
    base_snap_id: Optional[StrictStr] = Field(default=None, description="Base snapshot ID. This attribute is required together with name and clone when cloning a volume with the create operation. A 42 digit hexadecimal number. `Filter, Sort`")
    base_snap_name: Optional[StrictStr] = Field(default=None, description="Name of base snapshot. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints. `Filter, Sort`")
    clone: Optional[StrictBool] = Field(default=None, description="Whether this volume is a clone. Use this attribute in combination with name and base_snap_id to create a clone by setting clone = true. `Filter, Sort`")
    dest_pool_id: Optional[StrictStr] = Field(default=None, description="ID of the destination pool where the volume is moving to. A 42 digit hexadecimal number. `Filter, Sort`")
    dest_pool_name: Optional[StrictStr] = Field(default=None, description="Name of the destination pool where the volume is moving to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`")
    folder_id: Optional[StrictStr] = Field(default=None, description="ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal number or the empty string. `Filter, Sort`")
    folder_name: Optional[StrictStr] = Field(default=None, description="Name of the folder holding this volume. It can be empty. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`")
    id: Optional[StrictStr] = Field(default=None, description="Identifier for the volume. A 42 digit hexadecimal number. `Filter`")
    name: Optional[StrictStr] = Field(default=None, description="Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. `Filter, Sort`")
    online: Optional[StrictBool] = Field(default=None, description="Online state of volume, available for host initiators to establish connections. `Filter, Sort`")
    owned_by_group: Optional[StrictStr] = Field(default=None, description="Name of group that currently owns the volume. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`")
    owned_by_group_id: Optional[StrictStr] = Field(default=None, description="ID of group that currently owns the volume. A 42 digit hexadecimal number. `Filter, Sort`")
    parent_vol_id: Optional[StrictStr] = Field(default=None, description="Parent volume ID. A 42 digit hexadecimal number. `Filter, Sort`")
    parent_vol_name: Optional[StrictStr] = Field(default=None, description="Name of parent volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints. `Filter, Sort`")
    perfpolicy_id: Optional[StrictStr] = Field(default=None, description="Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal number. `Filter, Sort`")
    perfpolicy_name: Optional[StrictStr] = Field(default=None, description="Name of performance policy. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`")
    pool_id: Optional[StrictStr] = Field(default=None, description="Identifier associated with the pool in the storage pool table. A 42 digit hexadecimal number. `Filter, Sort`")
    pool_name: Optional[StrictStr] = Field(default=None, description="Name of the pool where the volume resides. Volume data will be distributed across arrays over which specified pool is defined. If pool option is not specified, volume is assigned to the default pool. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`")
    read_only: Optional[StrictBool] = Field(default=None, description="Volume is read-only. `Filter, Sort`")
    replication_role: Optional[StrictStr] = Field(default=None, description="Replication role that this volume performs. Possible values: 'periodic_snapshot_downstream', 'synchronous_upstream', 'synchronous_downstream', 'no_replication', 'periodic_snapshot_upstream'. `Filter, Sort`")
    secondary_serial_number: Optional[StrictStr] = Field(default=None, description="Secondary identifier associated with the volume for the SCSI protocol. `Filter, Sort`")
    serial_number: Optional[StrictStr] = Field(default=None, description="Identifier associated with the volume for the SCSI protocol. A 32 digit hexadecimal number. `Filter, Sort`")
    size: Optional[StrictInt] = Field(default=None, description="Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume. `Filter, Sort`")
    target_name: Optional[StrictStr] = Field(default=None, description="The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target volume. The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target. `Filter, Sort`")
    volcoll_id: Optional[StrictStr] = Field(default=None, description="ID of volume collection of which this volume is a member. Use this attribute in update operation to associate or dissociate volumes with or from volume collections. When associating, set this attribute to the ID of the volume collection. When dissociating, set this attribute to empty string. An optional NsObjectID. A 42 digit hexadecimal number or the empty string. `Filter, Sort`")
    volcoll_name: Optional[StrictStr] = Field(default=None, description="Name of volume collection of which this volume is a member. String of up to 64 alphanumeric characters, - and . and : are allowed after first character. `Filter, Sort`")
    __properties: ClassVar[List[str]] = ["base_snap_id", "base_snap_name", "clone", "dest_pool_id", "dest_pool_name", "folder_id", "folder_name", "id", "name", "online", "owned_by_group", "owned_by_group_id", "parent_vol_id", "parent_vol_name", "perfpolicy_id", "perfpolicy_name", "pool_id", "pool_name", "read_only", "replication_role", "secondary_serial_number", "serial_number", "size", "target_name", "volcoll_id", "volcoll_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleVolumeFilterableFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if base_snap_id (nullable) is None
        # and model_fields_set contains the field
        if self.base_snap_id is None and "base_snap_id" in self.model_fields_set:
            _dict['base_snap_id'] = None

        # set to None if base_snap_name (nullable) is None
        # and model_fields_set contains the field
        if self.base_snap_name is None and "base_snap_name" in self.model_fields_set:
            _dict['base_snap_name'] = None

        # set to None if clone (nullable) is None
        # and model_fields_set contains the field
        if self.clone is None and "clone" in self.model_fields_set:
            _dict['clone'] = None

        # set to None if dest_pool_id (nullable) is None
        # and model_fields_set contains the field
        if self.dest_pool_id is None and "dest_pool_id" in self.model_fields_set:
            _dict['dest_pool_id'] = None

        # set to None if dest_pool_name (nullable) is None
        # and model_fields_set contains the field
        if self.dest_pool_name is None and "dest_pool_name" in self.model_fields_set:
            _dict['dest_pool_name'] = None

        # set to None if folder_id (nullable) is None
        # and model_fields_set contains the field
        if self.folder_id is None and "folder_id" in self.model_fields_set:
            _dict['folder_id'] = None

        # set to None if folder_name (nullable) is None
        # and model_fields_set contains the field
        if self.folder_name is None and "folder_name" in self.model_fields_set:
            _dict['folder_name'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if online (nullable) is None
        # and model_fields_set contains the field
        if self.online is None and "online" in self.model_fields_set:
            _dict['online'] = None

        # set to None if owned_by_group (nullable) is None
        # and model_fields_set contains the field
        if self.owned_by_group is None and "owned_by_group" in self.model_fields_set:
            _dict['owned_by_group'] = None

        # set to None if owned_by_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.owned_by_group_id is None and "owned_by_group_id" in self.model_fields_set:
            _dict['owned_by_group_id'] = None

        # set to None if parent_vol_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_vol_id is None and "parent_vol_id" in self.model_fields_set:
            _dict['parent_vol_id'] = None

        # set to None if parent_vol_name (nullable) is None
        # and model_fields_set contains the field
        if self.parent_vol_name is None and "parent_vol_name" in self.model_fields_set:
            _dict['parent_vol_name'] = None

        # set to None if perfpolicy_id (nullable) is None
        # and model_fields_set contains the field
        if self.perfpolicy_id is None and "perfpolicy_id" in self.model_fields_set:
            _dict['perfpolicy_id'] = None

        # set to None if perfpolicy_name (nullable) is None
        # and model_fields_set contains the field
        if self.perfpolicy_name is None and "perfpolicy_name" in self.model_fields_set:
            _dict['perfpolicy_name'] = None

        # set to None if pool_id (nullable) is None
        # and model_fields_set contains the field
        if self.pool_id is None and "pool_id" in self.model_fields_set:
            _dict['pool_id'] = None

        # set to None if pool_name (nullable) is None
        # and model_fields_set contains the field
        if self.pool_name is None and "pool_name" in self.model_fields_set:
            _dict['pool_name'] = None

        # set to None if read_only (nullable) is None
        # and model_fields_set contains the field
        if self.read_only is None and "read_only" in self.model_fields_set:
            _dict['read_only'] = None

        # set to None if replication_role (nullable) is None
        # and model_fields_set contains the field
        if self.replication_role is None and "replication_role" in self.model_fields_set:
            _dict['replication_role'] = None

        # set to None if secondary_serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_serial_number is None and "secondary_serial_number" in self.model_fields_set:
            _dict['secondary_serial_number'] = None

        # set to None if serial_number (nullable) is None
        # and model_fields_set contains the field
        if self.serial_number is None and "serial_number" in self.model_fields_set:
            _dict['serial_number'] = None

        # set to None if size (nullable) is None
        # and model_fields_set contains the field
        if self.size is None and "size" in self.model_fields_set:
            _dict['size'] = None

        # set to None if target_name (nullable) is None
        # and model_fields_set contains the field
        if self.target_name is None and "target_name" in self.model_fields_set:
            _dict['target_name'] = None

        # set to None if volcoll_id (nullable) is None
        # and model_fields_set contains the field
        if self.volcoll_id is None and "volcoll_id" in self.model_fields_set:
            _dict['volcoll_id'] = None

        # set to None if volcoll_name (nullable) is None
        # and model_fields_set contains the field
        if self.volcoll_name is None and "volcoll_name" in self.model_fields_set:
            _dict['volcoll_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleVolumeFilterableFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_snap_id": obj.get("base_snap_id"),
            "base_snap_name": obj.get("base_snap_name"),
            "clone": obj.get("clone"),
            "dest_pool_id": obj.get("dest_pool_id"),
            "dest_pool_name": obj.get("dest_pool_name"),
            "folder_id": obj.get("folder_id"),
            "folder_name": obj.get("folder_name"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "online": obj.get("online"),
            "owned_by_group": obj.get("owned_by_group"),
            "owned_by_group_id": obj.get("owned_by_group_id"),
            "parent_vol_id": obj.get("parent_vol_id"),
            "parent_vol_name": obj.get("parent_vol_name"),
            "perfpolicy_id": obj.get("perfpolicy_id"),
            "perfpolicy_name": obj.get("perfpolicy_name"),
            "pool_id": obj.get("pool_id"),
            "pool_name": obj.get("pool_name"),
            "read_only": obj.get("read_only"),
            "replication_role": obj.get("replication_role"),
            "secondary_serial_number": obj.get("secondary_serial_number"),
            "serial_number": obj.get("serial_number"),
            "size": obj.get("size"),
            "target_name": obj.get("target_name"),
            "volcoll_id": obj.get("volcoll_id"),
            "volcoll_name": obj.get("volcoll_name")
        })
        return _obj


