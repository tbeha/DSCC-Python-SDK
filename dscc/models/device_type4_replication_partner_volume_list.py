# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.common_resource_attributes import CommonResourceAttributes
from dscc.models.device_type4_replication_partner_volume_list_remote_volume import DeviceType4ReplicationPartnerVolumeListRemoteVolume
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4ReplicationPartnerVolumeList(BaseModel):
    """
    DeviceType4ReplicationPartnerVolumeList
    """ # noqa: E501
    common_resource_attributes: Optional[CommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    display_name: Optional[StrictStr] = Field(default=None, description="Volume display name", alias="displayName")
    domain: Optional[StrictStr] = Field(default=None, description="Domain that the resource belongs to.")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    group_id: Optional[StrictStr] = Field(default=None, description="Unique id of replication partner remote group.", alias="groupId")
    group_name: Optional[StrictStr] = Field(default=None, description="Replication partner remote group name.", alias="groupName")
    group_object_id: Optional[StrictInt] = Field(default=None, description="Replication partner group ID.", alias="groupObjectId")
    id: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the volume.")
    is_remote_array_support_replication: Optional[StrictBool] = Field(default=None, description="Boolean value to indicate if remote array OS version supports replication", alias="isRemoteArraySupportReplication")
    local_volume_id: Optional[StrictInt] = Field(default=None, description="Volume ID.", alias="localVolumeId")
    local_volume_name: Optional[StrictStr] = Field(default=None, description="Volume name.", alias="localVolumeName")
    remote_volume: Optional[DeviceType4ReplicationPartnerVolumeListRemoteVolume] = Field(default=None, alias="remoteVolume")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed volume object", alias="resourceUri")
    system_id: Optional[StrictStr] = Field(default=None, description="Unique ID or serial number of the system.", alias="systemId")
    system_wwn: Optional[StrictStr] = Field(default=None, description="WWN of the system.", alias="systemWWN")
    type: Optional[StrictStr] = Field(default=None, description="type")
    __properties: ClassVar[List[str]] = ["commonResourceAttributes", "customerId", "displayName", "domain", "generation", "groupId", "groupName", "groupObjectId", "id", "isRemoteArraySupportReplication", "localVolumeId", "localVolumeName", "remoteVolume", "resourceUri", "systemId", "systemWWN", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4ReplicationPartnerVolumeList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote_volume
        if self.remote_volume:
            _dict['remoteVolume'] = self.remote_volume.to_dict()
        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if group_id (nullable) is None
        # and model_fields_set contains the field
        if self.group_id is None and "group_id" in self.model_fields_set:
            _dict['groupId'] = None

        # set to None if group_name (nullable) is None
        # and model_fields_set contains the field
        if self.group_name is None and "group_name" in self.model_fields_set:
            _dict['groupName'] = None

        # set to None if group_object_id (nullable) is None
        # and model_fields_set contains the field
        if self.group_object_id is None and "group_object_id" in self.model_fields_set:
            _dict['groupObjectId'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if local_volume_id (nullable) is None
        # and model_fields_set contains the field
        if self.local_volume_id is None and "local_volume_id" in self.model_fields_set:
            _dict['localVolumeId'] = None

        # set to None if local_volume_name (nullable) is None
        # and model_fields_set contains the field
        if self.local_volume_name is None and "local_volume_name" in self.model_fields_set:
            _dict['localVolumeName'] = None

        # set to None if remote_volume (nullable) is None
        # and model_fields_set contains the field
        if self.remote_volume is None and "remote_volume" in self.model_fields_set:
            _dict['remoteVolume'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if system_wwn (nullable) is None
        # and model_fields_set contains the field
        if self.system_wwn is None and "system_wwn" in self.model_fields_set:
            _dict['systemWWN'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4ReplicationPartnerVolumeList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonResourceAttributes": CommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "customerId": obj.get("customerId"),
            "displayName": obj.get("displayName"),
            "domain": obj.get("domain"),
            "generation": obj.get("generation"),
            "groupId": obj.get("groupId"),
            "groupName": obj.get("groupName"),
            "groupObjectId": obj.get("groupObjectId"),
            "id": obj.get("id"),
            "isRemoteArraySupportReplication": obj.get("isRemoteArraySupportReplication"),
            "localVolumeId": obj.get("localVolumeId"),
            "localVolumeName": obj.get("localVolumeName"),
            "remoteVolume": DeviceType4ReplicationPartnerVolumeListRemoteVolume.from_dict(obj["remoteVolume"]) if obj.get("remoteVolume") is not None else None,
            "resourceUri": obj.get("resourceUri"),
            "systemId": obj.get("systemId"),
            "systemWWN": obj.get("systemWWN"),
            "type": obj.get("type")
        })
        return _obj


