# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.nimble_z_conf_ip import NimbleZConfIP
from typing import Optional, Set
from typing_extensions import Self

class UninitializedArrayResponse(BaseModel):
    """
    UninitializedArrayResponse
    """ # noqa: E501
    all_flash: Optional[StrictBool] = Field(default=None, description="True if it is an All-Flash array, False otherwise.Possible values : true, false.")
    array_name: Optional[StrictStr] = Field(default=None, description="Name of the uninitialized array.String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    count_of_fc_ports: Optional[StrictInt] = Field(default=None, description="Number of Fibre Channel ports of the uninitialized array. Unsigned 64-bit integer.")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    dedupe_configurable: Optional[StrictBool] = Field(default=None, description="True if it is a hybrid array that is capable of updating data deduplication setting, False otherwise.Possible values : true, false.")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    id: Optional[StrictStr] = Field(default=None, description="Identifier for the uninitialized array. A 42 digit hexadecimal number.")
    model_str: Optional[StrictStr] = Field(default=None, description="Model description of the uninitialized array.String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Link to the object URI", alias="resourceUri")
    serial: Optional[StrictStr] = Field(default=None, description="Serial Number of the uninitialized array. A 42 digit hexadecimal number.")
    type: Optional[StrictStr] = Field(default=None, description="type")
    version: Optional[StrictStr] = Field(default=None, description="Version of the uninitialized array. String of up to 64 alphanumeric characters, - and . and :are allowed after first character.")
    zconf_ipaddrs: Optional[List[Optional[NimbleZConfIP]]] = Field(default=None, description="List of link local zero conf address of the uninitialized array. List of IP Addresses")
    __properties: ClassVar[List[str]] = ["all_flash", "array_name", "associated_links", "consoleUri", "count_of_fc_ports", "customerId", "dedupe_configurable", "generation", "id", "model_str", "resourceUri", "serial", "type", "version", "zconf_ipaddrs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UninitializedArrayResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associated_links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in zconf_ipaddrs (list)
        _items = []
        if self.zconf_ipaddrs:
            for _item in self.zconf_ipaddrs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['zconf_ipaddrs'] = _items
        # set to None if all_flash (nullable) is None
        # and model_fields_set contains the field
        if self.all_flash is None and "all_flash" in self.model_fields_set:
            _dict['all_flash'] = None

        # set to None if array_name (nullable) is None
        # and model_fields_set contains the field
        if self.array_name is None and "array_name" in self.model_fields_set:
            _dict['array_name'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if count_of_fc_ports (nullable) is None
        # and model_fields_set contains the field
        if self.count_of_fc_ports is None and "count_of_fc_ports" in self.model_fields_set:
            _dict['count_of_fc_ports'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if dedupe_configurable (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_configurable is None and "dedupe_configurable" in self.model_fields_set:
            _dict['dedupe_configurable'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if model_str (nullable) is None
        # and model_fields_set contains the field
        if self.model_str is None and "model_str" in self.model_fields_set:
            _dict['model_str'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if serial (nullable) is None
        # and model_fields_set contains the field
        if self.serial is None and "serial" in self.model_fields_set:
            _dict['serial'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if zconf_ipaddrs (nullable) is None
        # and model_fields_set contains the field
        if self.zconf_ipaddrs is None and "zconf_ipaddrs" in self.model_fields_set:
            _dict['zconf_ipaddrs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UninitializedArrayResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "all_flash": obj.get("all_flash"),
            "array_name": obj.get("array_name"),
            "associated_links": [AssociatedLinksInner.from_dict(_item) for _item in obj["associated_links"]] if obj.get("associated_links") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "count_of_fc_ports": obj.get("count_of_fc_ports"),
            "customerId": obj.get("customerId"),
            "dedupe_configurable": obj.get("dedupe_configurable"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "model_str": obj.get("model_str"),
            "resourceUri": obj.get("resourceUri"),
            "serial": obj.get("serial"),
            "type": obj.get("type"),
            "version": obj.get("version"),
            "zconf_ipaddrs": [NimbleZConfIP.from_dict(_item) for _item in obj["zconf_ipaddrs"]] if obj.get("zconf_ipaddrs") is not None else None
        })
        return _obj


