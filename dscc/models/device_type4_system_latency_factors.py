# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.device_type4_factor_data import DeviceType4FactorData
from dscc.models.device_type4_system_latency_factors_latency_bands import DeviceType4SystemLatencyFactorsLatencyBands
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4SystemLatencyFactors(BaseModel):
    """
    system latency factors response structure
    """ # noqa: E501
    customer_id: Optional[StrictStr] = Field(default=None, description="Customer identifier", alias="customerId")
    end_time: Optional[StrictInt] = Field(default=None, description="End time of the interval for which latency factors are determined", alias="endTime")
    latency_bands: Optional[DeviceType4SystemLatencyFactorsLatencyBands] = Field(default=None, alias="latencyBands")
    start_time: Optional[StrictInt] = Field(default=None, description="Start time of the interval for which latency factors are determined", alias="startTime")
    system_factors_metrics: Optional[List[Optional[DeviceType4FactorData]]] = Field(default=None, alias="systemFactorsMetrics")
    system_id: Optional[StrictStr] = Field(default=None, description="System identifier", alias="systemId")
    __properties: ClassVar[List[str]] = ["customerId", "endTime", "latencyBands", "startTime", "systemFactorsMetrics", "systemId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4SystemLatencyFactors from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of latency_bands
        if self.latency_bands:
            _dict['latencyBands'] = self.latency_bands.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in system_factors_metrics (list)
        _items = []
        if self.system_factors_metrics:
            for _item in self.system_factors_metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['systemFactorsMetrics'] = _items
        # set to None if latency_bands (nullable) is None
        # and model_fields_set contains the field
        if self.latency_bands is None and "latency_bands" in self.model_fields_set:
            _dict['latencyBands'] = None

        # set to None if system_factors_metrics (nullable) is None
        # and model_fields_set contains the field
        if self.system_factors_metrics is None and "system_factors_metrics" in self.model_fields_set:
            _dict['systemFactorsMetrics'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4SystemLatencyFactors from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerId": obj.get("customerId"),
            "endTime": obj.get("endTime"),
            "latencyBands": DeviceType4SystemLatencyFactorsLatencyBands.from_dict(obj["latencyBands"]) if obj.get("latencyBands") is not None else None,
            "startTime": obj.get("startTime"),
            "systemFactorsMetrics": [DeviceType4FactorData.from_dict(_item) for _item in obj["systemFactorsMetrics"]] if obj.get("systemFactorsMetrics") is not None else None,
            "systemId": obj.get("systemId")
        })
        return _obj


