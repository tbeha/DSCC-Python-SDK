# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleNsSchedule(BaseModel):
    """
    NimbleNsSchedule
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="A schedule is active only if it is owned by the same owner as the volume collection. Only active schedules of a volume collection participate in the creation of snapshots and replication.")
    at_time: Optional[StrictInt] = Field(default=None, description="Time of day when snapshot should be taken.")
    days: Optional[StrictStr] = Field(default=None, description="Which days snapshots should be taken.")
    disable_appsync: Optional[StrictBool] = Field(default=None, description="Disables application synchronized snapshots and creates crash consistent snapshots instead.")
    downstream_partner: Optional[StrictStr] = Field(default=None, description="Partner name if snapshots created by this schedule should be replicated.")
    downstream_partner_id: Optional[StrictStr] = Field(default=None, description="Partner ID if snapshots created by this schedule should be replicated.")
    downstream_partner_name: Optional[StrictStr] = Field(default=None, description="Partner name if snapshots created by this schedule should be replicated.")
    id: Optional[StrictStr] = Field(default=None, description="ID of protection schedule.")
    mfa_protected: Optional[StrictBool] = Field(default=None, description="Protected by multi-factor authentication. Possible values: 'true', 'false'.")
    name: Optional[StrictStr] = Field(default=None, description="Name of protection schedule.")
    num_retain: Optional[StrictInt] = Field(default=None, description="Number of snapshots to retain.")
    num_retain_replica: Optional[StrictInt] = Field(default=None, description="Number of snapshots to retain on the replica.")
    period: Optional[StrictInt] = Field(default=None, description="Frequency of snapshots.")
    period_unit: Optional[StrictStr] = Field(default=None, description="Units for repeat frequency -- minutes, hours, days or weeks. Possible values: 'hours', 'weeks', 'minutes', 'days'.")
    repl_alert_thres: Optional[StrictInt] = Field(default=None, description="Replication alert threshold.")
    replicate_every: Optional[StrictInt] = Field(default=None, description="Which snapshots should be replicated.")
    schedule_id: Optional[StrictStr] = Field(default=None, description="ID of protection schedule.")
    schedule_name: Optional[StrictStr] = Field(default=None, description="Name of protection schedule.")
    schedule_type: Optional[StrictStr] = Field(default=None, description="regular or external_trigger. Possible values: 'external_trigger', 'regular'.")
    skip_db_consistency_check: Optional[StrictBool] = Field(default=None, description="Skip consistency check for database files on snapshots created by this schedule.")
    snap_verify: Optional[StrictBool] = Field(default=None, description="Run verification tool on snapshot created by this schedule.")
    until_time: Optional[StrictInt] = Field(default=None, description="Time of day to stop taking snapshots.")
    __properties: ClassVar[List[str]] = ["active", "at_time", "days", "disable_appsync", "downstream_partner", "downstream_partner_id", "downstream_partner_name", "id", "mfa_protected", "name", "num_retain", "num_retain_replica", "period", "period_unit", "repl_alert_thres", "replicate_every", "schedule_id", "schedule_name", "schedule_type", "skip_db_consistency_check", "snap_verify", "until_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleNsSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if active (nullable) is None
        # and model_fields_set contains the field
        if self.active is None and "active" in self.model_fields_set:
            _dict['active'] = None

        # set to None if at_time (nullable) is None
        # and model_fields_set contains the field
        if self.at_time is None and "at_time" in self.model_fields_set:
            _dict['at_time'] = None

        # set to None if days (nullable) is None
        # and model_fields_set contains the field
        if self.days is None and "days" in self.model_fields_set:
            _dict['days'] = None

        # set to None if disable_appsync (nullable) is None
        # and model_fields_set contains the field
        if self.disable_appsync is None and "disable_appsync" in self.model_fields_set:
            _dict['disable_appsync'] = None

        # set to None if downstream_partner (nullable) is None
        # and model_fields_set contains the field
        if self.downstream_partner is None and "downstream_partner" in self.model_fields_set:
            _dict['downstream_partner'] = None

        # set to None if downstream_partner_id (nullable) is None
        # and model_fields_set contains the field
        if self.downstream_partner_id is None and "downstream_partner_id" in self.model_fields_set:
            _dict['downstream_partner_id'] = None

        # set to None if downstream_partner_name (nullable) is None
        # and model_fields_set contains the field
        if self.downstream_partner_name is None and "downstream_partner_name" in self.model_fields_set:
            _dict['downstream_partner_name'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if mfa_protected (nullable) is None
        # and model_fields_set contains the field
        if self.mfa_protected is None and "mfa_protected" in self.model_fields_set:
            _dict['mfa_protected'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if num_retain (nullable) is None
        # and model_fields_set contains the field
        if self.num_retain is None and "num_retain" in self.model_fields_set:
            _dict['num_retain'] = None

        # set to None if num_retain_replica (nullable) is None
        # and model_fields_set contains the field
        if self.num_retain_replica is None and "num_retain_replica" in self.model_fields_set:
            _dict['num_retain_replica'] = None

        # set to None if period (nullable) is None
        # and model_fields_set contains the field
        if self.period is None and "period" in self.model_fields_set:
            _dict['period'] = None

        # set to None if period_unit (nullable) is None
        # and model_fields_set contains the field
        if self.period_unit is None and "period_unit" in self.model_fields_set:
            _dict['period_unit'] = None

        # set to None if repl_alert_thres (nullable) is None
        # and model_fields_set contains the field
        if self.repl_alert_thres is None and "repl_alert_thres" in self.model_fields_set:
            _dict['repl_alert_thres'] = None

        # set to None if replicate_every (nullable) is None
        # and model_fields_set contains the field
        if self.replicate_every is None and "replicate_every" in self.model_fields_set:
            _dict['replicate_every'] = None

        # set to None if schedule_id (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_id is None and "schedule_id" in self.model_fields_set:
            _dict['schedule_id'] = None

        # set to None if schedule_name (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_name is None and "schedule_name" in self.model_fields_set:
            _dict['schedule_name'] = None

        # set to None if schedule_type (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_type is None and "schedule_type" in self.model_fields_set:
            _dict['schedule_type'] = None

        # set to None if skip_db_consistency_check (nullable) is None
        # and model_fields_set contains the field
        if self.skip_db_consistency_check is None and "skip_db_consistency_check" in self.model_fields_set:
            _dict['skip_db_consistency_check'] = None

        # set to None if snap_verify (nullable) is None
        # and model_fields_set contains the field
        if self.snap_verify is None and "snap_verify" in self.model_fields_set:
            _dict['snap_verify'] = None

        # set to None if until_time (nullable) is None
        # and model_fields_set contains the field
        if self.until_time is None and "until_time" in self.model_fields_set:
            _dict['until_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleNsSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "at_time": obj.get("at_time"),
            "days": obj.get("days"),
            "disable_appsync": obj.get("disable_appsync"),
            "downstream_partner": obj.get("downstream_partner"),
            "downstream_partner_id": obj.get("downstream_partner_id"),
            "downstream_partner_name": obj.get("downstream_partner_name"),
            "id": obj.get("id"),
            "mfa_protected": obj.get("mfa_protected"),
            "name": obj.get("name"),
            "num_retain": obj.get("num_retain"),
            "num_retain_replica": obj.get("num_retain_replica"),
            "period": obj.get("period"),
            "period_unit": obj.get("period_unit"),
            "repl_alert_thres": obj.get("repl_alert_thres"),
            "replicate_every": obj.get("replicate_every"),
            "schedule_id": obj.get("schedule_id"),
            "schedule_name": obj.get("schedule_name"),
            "schedule_type": obj.get("schedule_type"),
            "skip_db_consistency_check": obj.get("skip_db_consistency_check"),
            "snap_verify": obj.get("snap_verify"),
            "until_time": obj.get("until_time")
        })
        return _obj


