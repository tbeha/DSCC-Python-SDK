# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleHandoverVolumeCollectionsInput(BaseModel):
    """
    Perform handover action on a volume collection input.
    """ # noqa: E501
    invoke_on_upstream_partner: Optional[StrictBool] = Field(default=None, description="Invoke handover request on upstream partner. Default: 'false'. This operation is not supported for synchronous replication volume vollections. Possible values: 'true', 'false'.")
    no_reverse: Optional[StrictBool] = Field(default=None, description="Do not automatically reverse direction of replication. Using this argument will prevent the new owner from automatically replicating the volume collection to this node when the handover completes. The default behavior is to enable replication back to this node. Default: 'false'. Possible values: 'true', 'false'.")
    override_upstream_down: Optional[StrictBool] = Field(default=None, description="Allow the handover request to proceed even if upstream array is down. The default behavior is to return an error when upstream is down. This option is applicable for synchronous replication only. Default: 'false'. Possible values: 'true', 'false'.")
    replication_partner_id: StrictStr = Field(description="Replication partner ID of the new owner. A 42 digit hexadecimal number.")
    __properties: ClassVar[List[str]] = ["invoke_on_upstream_partner", "no_reverse", "override_upstream_down", "replication_partner_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleHandoverVolumeCollectionsInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if invoke_on_upstream_partner (nullable) is None
        # and model_fields_set contains the field
        if self.invoke_on_upstream_partner is None and "invoke_on_upstream_partner" in self.model_fields_set:
            _dict['invoke_on_upstream_partner'] = None

        # set to None if no_reverse (nullable) is None
        # and model_fields_set contains the field
        if self.no_reverse is None and "no_reverse" in self.model_fields_set:
            _dict['no_reverse'] = None

        # set to None if override_upstream_down (nullable) is None
        # and model_fields_set contains the field
        if self.override_upstream_down is None and "override_upstream_down" in self.model_fields_set:
            _dict['override_upstream_down'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleHandoverVolumeCollectionsInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoke_on_upstream_partner": obj.get("invoke_on_upstream_partner"),
            "no_reverse": obj.get("no_reverse"),
            "override_upstream_down": obj.get("override_upstream_down"),
            "replication_partner_id": obj.get("replication_partner_id")
        })
        return _obj


