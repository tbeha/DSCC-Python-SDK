# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EditSnmpSettings(BaseModel):
    """
    EditSnmpSettings
    """ # noqa: E501
    snmp_community: Optional[StrictStr] = Field(default=None, description="Community string to be used with SNMP. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    snmp_get_enabled: Optional[StrictBool] = Field(default=None, description="Accept SNMP commands.")
    snmp_get_port: Optional[StrictInt] = Field(default=None, description="Port number to which SNMP get requests should be sent. Positive integer value up to 65535 representing TCP/IP port.")
    snmp_sys_contact: Optional[StrictStr] = Field(default=None, description="Name of the SNMP administrator. Plain string.")
    snmp_sys_location: Optional[StrictStr] = Field(default=None, description="Location of the group. Plain string.")
    snmp_trap_enabled: Optional[StrictBool] = Field(default=None, description="Enable or disable SNMP traps")
    snmp_trap_host: Optional[StrictStr] = Field(default=None, description="Hostname or IP Address to send SNMP traps. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; - and . are allowed after the first and before the last character.")
    snmp_trap_port: Optional[StrictInt] = Field(default=None, description="Port number of SNMP trap host. Positive integer value up to 65535 representing TCP/IP port.")
    __properties: ClassVar[List[str]] = ["snmp_community", "snmp_get_enabled", "snmp_get_port", "snmp_sys_contact", "snmp_sys_location", "snmp_trap_enabled", "snmp_trap_host", "snmp_trap_port"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EditSnmpSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if snmp_community (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_community is None and "snmp_community" in self.model_fields_set:
            _dict['snmp_community'] = None

        # set to None if snmp_get_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_get_enabled is None and "snmp_get_enabled" in self.model_fields_set:
            _dict['snmp_get_enabled'] = None

        # set to None if snmp_get_port (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_get_port is None and "snmp_get_port" in self.model_fields_set:
            _dict['snmp_get_port'] = None

        # set to None if snmp_sys_contact (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_sys_contact is None and "snmp_sys_contact" in self.model_fields_set:
            _dict['snmp_sys_contact'] = None

        # set to None if snmp_sys_location (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_sys_location is None and "snmp_sys_location" in self.model_fields_set:
            _dict['snmp_sys_location'] = None

        # set to None if snmp_trap_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_trap_enabled is None and "snmp_trap_enabled" in self.model_fields_set:
            _dict['snmp_trap_enabled'] = None

        # set to None if snmp_trap_host (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_trap_host is None and "snmp_trap_host" in self.model_fields_set:
            _dict['snmp_trap_host'] = None

        # set to None if snmp_trap_port (nullable) is None
        # and model_fields_set contains the field
        if self.snmp_trap_port is None and "snmp_trap_port" in self.model_fields_set:
            _dict['snmp_trap_port'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EditSnmpSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "snmp_community": obj.get("snmp_community"),
            "snmp_get_enabled": obj.get("snmp_get_enabled"),
            "snmp_get_port": obj.get("snmp_get_port"),
            "snmp_sys_contact": obj.get("snmp_sys_contact"),
            "snmp_sys_location": obj.get("snmp_sys_location"),
            "snmp_trap_enabled": obj.get("snmp_trap_enabled"),
            "snmp_trap_host": obj.get("snmp_trap_host"),
            "snmp_trap_port": obj.get("snmp_trap_port")
        })
        return _obj


