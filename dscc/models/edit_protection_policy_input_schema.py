# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.modify_protection_schedule_input_schema import ModifyProtectionScheduleInputSchema
from dscc.models.primera_protection_policy_input_schema import PrimeraProtectionPolicyInputSchema
from dscc.models.primera_protection_schedule_input_schema import PrimeraProtectionScheduleInputSchema
from dscc.models.remove_protection_schedule_input_schema import RemoveProtectionScheduleInputSchema
from typing import Optional, Set
from typing_extensions import Self

class EditProtectionPolicyInputSchema(BaseModel):
    """
    Request body for edit protection policy
    """ # noqa: E501
    create_schedules: Optional[List[PrimeraProtectionScheduleInputSchema]] = Field(default=None, alias="createSchedules")
    modify_schedules: Optional[List[ModifyProtectionScheduleInputSchema]] = Field(default=None, alias="modifySchedules")
    policy: Optional[PrimeraProtectionPolicyInputSchema] = None
    protection_policy_type: StrictStr = Field(description="Specifies Protection policy type. Synchronous replication/protection policy provides protection from array or site failures with zero RPO. Using this policy, you can also configure zero RTO policy like Active Peer Persistence. Asynchronous replication/protection policy provides protection from array or site failure with the user defined RPO.  Schedule snapshot policy takes snapshots of the member volumes of the protected volume set at periodic intervals defined by the user. You can setup the local snapshot schedule and also setup the co-ordinated synchronized snapshot schedule on the protected volume set configured with synchronous or asynchronous replication policy. You can do this by attaching a scheduled snapshot policy on the volume set having already a synchronous or asynchronous protecting policy.", alias="protectionPolicyType")
    remove_schedules: Optional[List[RemoveProtectionScheduleInputSchema]] = Field(default=None, alias="removeSchedules")
    __properties: ClassVar[List[str]] = ["createSchedules", "modifySchedules", "policy", "protectionPolicyType", "removeSchedules"]

    @field_validator('protection_policy_type')
    def protection_policy_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['schedule', 'sync', 'async']):
            raise ValueError("must be one of enum values ('schedule', 'sync', 'async')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EditProtectionPolicyInputSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in create_schedules (list)
        _items = []
        if self.create_schedules:
            for _item in self.create_schedules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['createSchedules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in modify_schedules (list)
        _items = []
        if self.modify_schedules:
            for _item in self.modify_schedules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['modifySchedules'] = _items
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy:
            _dict['policy'] = self.policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in remove_schedules (list)
        _items = []
        if self.remove_schedules:
            for _item in self.remove_schedules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['removeSchedules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EditProtectionPolicyInputSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createSchedules": [PrimeraProtectionScheduleInputSchema.from_dict(_item) for _item in obj["createSchedules"]] if obj.get("createSchedules") is not None else None,
            "modifySchedules": [ModifyProtectionScheduleInputSchema.from_dict(_item) for _item in obj["modifySchedules"]] if obj.get("modifySchedules") is not None else None,
            "policy": PrimeraProtectionPolicyInputSchema.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "protectionPolicyType": obj.get("protectionPolicyType"),
            "removeSchedules": [RemoveProtectionScheduleInputSchema.from_dict(_item) for _item in obj["removeSchedules"]] if obj.get("removeSchedules") is not None else None
        })
        return _obj


