# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MailsettingsInput(BaseModel):
    """
    MailsettingsInput
    """ # noqa: E501
    mail_host_domain: Optional[StrictStr] = Field(default=None, description="SMTP server's Host Domain", alias="mailHostDomain")
    mail_host_server: Optional[StrictStr] = Field(default=None, description="SMTP server address/IP", alias="mailHostServer")
    port: Optional[StrictInt] = Field(default=None, description="SMTP server's port number")
    sender_email_id: Optional[StrictStr] = Field(default=None, description="Sender email address", alias="senderEmailId")
    __properties: ClassVar[List[str]] = ["mailHostDomain", "mailHostServer", "port", "senderEmailId"]

    @field_validator('port')
    def port_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([25, 465, 587, 2525]):
            raise ValueError("must be one of enum values (25, 465, 587, 2525)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MailsettingsInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if mail_host_domain (nullable) is None
        # and model_fields_set contains the field
        if self.mail_host_domain is None and "mail_host_domain" in self.model_fields_set:
            _dict['mailHostDomain'] = None

        # set to None if mail_host_server (nullable) is None
        # and model_fields_set contains the field
        if self.mail_host_server is None and "mail_host_server" in self.model_fields_set:
            _dict['mailHostServer'] = None

        # set to None if port (nullable) is None
        # and model_fields_set contains the field
        if self.port is None and "port" in self.model_fields_set:
            _dict['port'] = None

        # set to None if sender_email_id (nullable) is None
        # and model_fields_set contains the field
        if self.sender_email_id is None and "sender_email_id" in self.model_fields_set:
            _dict['senderEmailId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MailsettingsInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mailHostDomain": obj.get("mailHostDomain"),
            "mailHostServer": obj.get("mailHostServer"),
            "port": obj.get("port"),
            "senderEmailId": obj.get("senderEmailId")
        })
        return _obj


