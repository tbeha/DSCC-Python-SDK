# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.common_resource_attributes import CommonResourceAttributes
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4SupportSetting(BaseModel):
    """
    Support settings for the system
    """ # noqa: E501
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    common_resource_attributes: Optional[CommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    connect_to_hpe: Optional[StrictStr] = Field(default=None, description="Enable remote support by allowing sending of files from device to HPE. Allowed values: enabled or disabled.", alias="connectToHPE")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    customer_id: Optional[StrictStr] = Field(default=None, description="The customer application identifier", alias="customerId")
    email_notifications: Optional[StrictStr] = Field(default=None, description="Receive email notifications. Allowed values: enabled or disabled.", alias="emailNotifications")
    enterprise_server_url: Optional[StrictStr] = Field(default=None, description="Callhome collection server URL", alias="enterpriseServerURL")
    generation: Optional[StrictInt] = Field(default=None, description="A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the support settings.")
    mini_insplore_enabled: Optional[StrictStr] = Field(default=None, description="Enables/Disable scheduled Mini-Insplore collection. Allowed values: enabled or disabled.", alias="miniInsploreEnabled")
    remote_access: Optional[StrictStr] = Field(default=None, description="Enable/Disable Remote Access. Allowed values: DISABLE or ENABLE_NONROOT or ENABLE_ROOT. It is mandatory.", alias="remoteAccess")
    request_uri: Optional[StrictStr] = Field(default=None, description="requestUri for detailed storage object", alias="requestUri")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed storage object", alias="resourceUri")
    type: Optional[StrictStr] = Field(default=None, description="The type of resource.")
    __properties: ClassVar[List[str]] = ["associatedLinks", "commonResourceAttributes", "connectToHPE", "consoleUri", "customerId", "emailNotifications", "enterpriseServerURL", "generation", "id", "miniInsploreEnabled", "remoteAccess", "requestUri", "resourceUri", "type"]

    @field_validator('remote_access')
    def remote_access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISABLE', 'ENABLE_NONROOT', 'ENABLE_ROOT']):
            raise ValueError("must be one of enum values ('DISABLE', 'ENABLE_NONROOT', 'ENABLE_ROOT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4SupportSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # set to None if associated_links (nullable) is None
        # and model_fields_set contains the field
        if self.associated_links is None and "associated_links" in self.model_fields_set:
            _dict['associatedLinks'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if connect_to_hpe (nullable) is None
        # and model_fields_set contains the field
        if self.connect_to_hpe is None and "connect_to_hpe" in self.model_fields_set:
            _dict['connectToHPE'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if email_notifications (nullable) is None
        # and model_fields_set contains the field
        if self.email_notifications is None and "email_notifications" in self.model_fields_set:
            _dict['emailNotifications'] = None

        # set to None if enterprise_server_url (nullable) is None
        # and model_fields_set contains the field
        if self.enterprise_server_url is None and "enterprise_server_url" in self.model_fields_set:
            _dict['enterpriseServerURL'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if mini_insplore_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.mini_insplore_enabled is None and "mini_insplore_enabled" in self.model_fields_set:
            _dict['miniInsploreEnabled'] = None

        # set to None if remote_access (nullable) is None
        # and model_fields_set contains the field
        if self.remote_access is None and "remote_access" in self.model_fields_set:
            _dict['remoteAccess'] = None

        # set to None if request_uri (nullable) is None
        # and model_fields_set contains the field
        if self.request_uri is None and "request_uri" in self.model_fields_set:
            _dict['requestUri'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4SupportSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedLinks": [AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "commonResourceAttributes": CommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "connectToHPE": obj.get("connectToHPE"),
            "consoleUri": obj.get("consoleUri"),
            "customerId": obj.get("customerId"),
            "emailNotifications": obj.get("emailNotifications"),
            "enterpriseServerURL": obj.get("enterpriseServerURL"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "miniInsploreEnabled": obj.get("miniInsploreEnabled"),
            "remoteAccess": obj.get("remoteAccess"),
            "requestUri": obj.get("requestUri"),
            "resourceUri": obj.get("resourceUri"),
            "type": obj.get("type")
        })
        return _obj


