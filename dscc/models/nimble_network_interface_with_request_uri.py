# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.nimble_common_resource_attributes import NimbleCommonResourceAttributes
from dscc.models.nimble_network_ip import NimbleNetworkIP
from typing import Optional, Set
from typing_extensions import Self

class NimbleNetworkInterfaceWithRequestUri(BaseModel):
    """
    NimbleNetworkInterfaceWithRequestUri
    """ # noqa: E501
    request_uri: Optional[StrictStr] = Field(default=None, description="requestUri for detailed network interfaces object", alias="requestUri")
    array_id: Optional[StrictStr] = Field(default=None, description="Identifier for the array. A 42 digit hexadecimal number.")
    array_name_or_serial: Optional[StrictStr] = Field(default=None, description="Name or serial of the array where the interface is hosted.String of up to 64 alphanumeric characters.")
    id: Optional[StrictStr] = Field(default=None, description="Identifier for the array. A 42 digit hexadecimal number.")
    mac: Optional[StrictStr] = Field(default=None, description="MAC address of the interface. Mac address of an interface.")
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details")
    common_resource_attributes: Optional[NimbleCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    controller_id: Optional[StrictStr] = Field(default=None, description="Identifier of the controller where the interface is hosted. A 42 digit hexadecimal number.")
    controller_name: Optional[StrictStr] = Field(default=None, description="Name (A or B) of the controller where the interface is hosted. Plain string.")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    ip_list: Optional[List[Optional[NimbleNetworkIP]]] = Field(default=None, description="List of IP addresses assigned to this network interface. List of IP address assignment details to network interface.")
    is_present: Optional[StrictBool] = Field(default=None, description="Whether this interface is present on this controller. Possible values : true, false.")
    link_speed: Optional[StrictStr] = Field(default=None, description="Speed of the link. Possible values: link_speed_unknown, link_speed_10M,link_speed_100M, link_speed_1000M, link_speed_10000M..")
    link_status: Optional[StrictStr] = Field(default=None, description="Status of the link. Possible values: link_status_unknown,link_status_down, link_status_up")
    max_link_speed: Optional[StrictStr] = Field(default=None, description="Maximum speed of the link. Possible values: 'link_speed_unknown', 'link_speed_10M','link_speed_100M', 'link_speed_1000M', 'link_speed_10000M', 'link_speed_25000M','link_speed_40000M', 'link_speed_50000M', 'link_speed_100000M'.")
    mtu: Optional[StrictInt] = Field(default=None, description="MTU on the link. Unsigned 64-bit integer.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the interface. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    nic_type: Optional[StrictStr] = Field(default=None, description="Interface type. Possible values: nic_type_unknown, nic_type_tp, nic_type_sfp")
    port: Optional[StrictInt] = Field(default=None, description="Port number for this interface.Unsigned 64-bit integer.")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Link to the object URI", alias="resourceUri")
    slot: Optional[StrictInt] = Field(default=None, description="Slot number for this interface. Unsigned 64-bit integer.")
    type: Optional[StrictStr] = Field(default=None, description="type")
    __properties: ClassVar[List[str]] = ["array_id", "array_name_or_serial", "id", "mac", "associated_links", "commonResourceAttributes", "consoleUri", "controller_id", "controller_name", "customerId", "generation", "ip_list", "is_present", "link_speed", "link_status", "max_link_speed", "mtu", "name", "nic_type", "port", "resourceUri", "slot", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleNetworkInterfaceWithRequestUri from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associated_links'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ip_list (list)
        _items = []
        if self.ip_list:
            for _item in self.ip_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ip_list'] = _items
        # set to None if array_id (nullable) is None
        # and model_fields_set contains the field
        if self.array_id is None and "array_id" in self.model_fields_set:
            _dict['array_id'] = None

        # set to None if array_name_or_serial (nullable) is None
        # and model_fields_set contains the field
        if self.array_name_or_serial is None and "array_name_or_serial" in self.model_fields_set:
            _dict['array_name_or_serial'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if mac (nullable) is None
        # and model_fields_set contains the field
        if self.mac is None and "mac" in self.model_fields_set:
            _dict['mac'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if controller_id (nullable) is None
        # and model_fields_set contains the field
        if self.controller_id is None and "controller_id" in self.model_fields_set:
            _dict['controller_id'] = None

        # set to None if controller_name (nullable) is None
        # and model_fields_set contains the field
        if self.controller_name is None and "controller_name" in self.model_fields_set:
            _dict['controller_name'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if ip_list (nullable) is None
        # and model_fields_set contains the field
        if self.ip_list is None and "ip_list" in self.model_fields_set:
            _dict['ip_list'] = None

        # set to None if is_present (nullable) is None
        # and model_fields_set contains the field
        if self.is_present is None and "is_present" in self.model_fields_set:
            _dict['is_present'] = None

        # set to None if link_speed (nullable) is None
        # and model_fields_set contains the field
        if self.link_speed is None and "link_speed" in self.model_fields_set:
            _dict['link_speed'] = None

        # set to None if link_status (nullable) is None
        # and model_fields_set contains the field
        if self.link_status is None and "link_status" in self.model_fields_set:
            _dict['link_status'] = None

        # set to None if max_link_speed (nullable) is None
        # and model_fields_set contains the field
        if self.max_link_speed is None and "max_link_speed" in self.model_fields_set:
            _dict['max_link_speed'] = None

        # set to None if mtu (nullable) is None
        # and model_fields_set contains the field
        if self.mtu is None and "mtu" in self.model_fields_set:
            _dict['mtu'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if nic_type (nullable) is None
        # and model_fields_set contains the field
        if self.nic_type is None and "nic_type" in self.model_fields_set:
            _dict['nic_type'] = None

        # set to None if port (nullable) is None
        # and model_fields_set contains the field
        if self.port is None and "port" in self.model_fields_set:
            _dict['port'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if slot (nullable) is None
        # and model_fields_set contains the field
        if self.slot is None and "slot" in self.model_fields_set:
            _dict['slot'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleNetworkInterfaceWithRequestUri from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "array_id": obj.get("array_id"),
            "array_name_or_serial": obj.get("array_name_or_serial"),
            "id": obj.get("id"),
            "mac": obj.get("mac"),
            "associated_links": [AssociatedLinksInner.from_dict(_item) for _item in obj["associated_links"]] if obj.get("associated_links") is not None else None,
            "commonResourceAttributes": NimbleCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "controller_id": obj.get("controller_id"),
            "controller_name": obj.get("controller_name"),
            "customerId": obj.get("customerId"),
            "generation": obj.get("generation"),
            "ip_list": [NimbleNetworkIP.from_dict(_item) for _item in obj["ip_list"]] if obj.get("ip_list") is not None else None,
            "is_present": obj.get("is_present"),
            "link_speed": obj.get("link_speed"),
            "link_status": obj.get("link_status"),
            "max_link_speed": obj.get("max_link_speed"),
            "mtu": obj.get("mtu"),
            "name": obj.get("name"),
            "nic_type": obj.get("nic_type"),
            "port": obj.get("port"),
            "resourceUri": obj.get("resourceUri"),
            "slot": obj.get("slot"),
            "type": obj.get("type")
        })
        return _obj


