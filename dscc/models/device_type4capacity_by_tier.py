# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4capacityByTier(BaseModel):
    """
    DeviceType4capacityByTier
    """ # noqa: E501
    fc_free: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="fc free capacity", alias="fcFree")
    fc_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="fc used capacity", alias="fcUsed")
    nl_free: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="nl free capacity", alias="nlFree")
    nl_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="nl used capacity", alias="nlUsed")
    ssd_free: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ssd free capacity", alias="ssdFree")
    ssd_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ssd used capacity", alias="ssdUsed")
    total_used: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="usable capacity", alias="totalUsed")
    usable_capacity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="usable capacity", alias="usableCapacity")
    __properties: ClassVar[List[str]] = ["fcFree", "fcUsed", "nlFree", "nlUsed", "ssdFree", "ssdUsed", "totalUsed", "usableCapacity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4capacityByTier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if fc_free (nullable) is None
        # and model_fields_set contains the field
        if self.fc_free is None and "fc_free" in self.model_fields_set:
            _dict['fcFree'] = None

        # set to None if fc_used (nullable) is None
        # and model_fields_set contains the field
        if self.fc_used is None and "fc_used" in self.model_fields_set:
            _dict['fcUsed'] = None

        # set to None if nl_free (nullable) is None
        # and model_fields_set contains the field
        if self.nl_free is None and "nl_free" in self.model_fields_set:
            _dict['nlFree'] = None

        # set to None if nl_used (nullable) is None
        # and model_fields_set contains the field
        if self.nl_used is None and "nl_used" in self.model_fields_set:
            _dict['nlUsed'] = None

        # set to None if ssd_free (nullable) is None
        # and model_fields_set contains the field
        if self.ssd_free is None and "ssd_free" in self.model_fields_set:
            _dict['ssdFree'] = None

        # set to None if ssd_used (nullable) is None
        # and model_fields_set contains the field
        if self.ssd_used is None and "ssd_used" in self.model_fields_set:
            _dict['ssdUsed'] = None

        # set to None if total_used (nullable) is None
        # and model_fields_set contains the field
        if self.total_used is None and "total_used" in self.model_fields_set:
            _dict['totalUsed'] = None

        # set to None if usable_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.usable_capacity is None and "usable_capacity" in self.model_fields_set:
            _dict['usableCapacity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4capacityByTier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fcFree": obj.get("fcFree"),
            "fcUsed": obj.get("fcUsed"),
            "nlFree": obj.get("nlFree"),
            "nlUsed": obj.get("nlUsed"),
            "ssdFree": obj.get("ssdFree"),
            "ssdUsed": obj.get("ssdUsed"),
            "totalUsed": obj.get("totalUsed"),
            "usableCapacity": obj.get("usableCapacity")
        })
        return _obj


