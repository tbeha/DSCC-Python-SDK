# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProtectionScheduleInput(BaseModel):
    """
    Protection schedule details.
    """ # noqa: E501
    at_time: Optional[StrictInt] = Field(default=None, description="Time of day when snapshot should be taken. In case repeat frequency specifies more than one snapshot in a day then the until_time option specifies until what time of day to take snapshots. Non-negative integer in range [0,86399] which is equivalent to [0:00:00 AM, 23:59:59 PM].")
    days: Optional[StrictStr] = Field(default=None, description="Specifies which days snapshots should be taken. Comma separated list of days of the week or 'all'.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the schedule. String of up to 255 printable ASCII characters.")
    disable_appsync: Optional[StrictBool] = Field(default=None, description="Disables application synchronized snapshots and creates crash consistent snapshots instead. Possible values: 'true', 'false'.")
    downstream_partner: Optional[StrictStr] = Field(default=None, description="Specifies the partner name if snapshots created by this schedule should be replicated. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    downstream_partner_id: Optional[StrictStr] = Field(default=None, description="Specifies the partner ID if snapshots created by this schedule should be replicated. In an update operation, if snapshots should be replicated, set this attribute to the ID of the replication partner. If snapshots should not be replicated, set this attribute to the empty string. An optional NsObjectID. A 42 digit hexadecimal number or the empty string.")
    name: StrictStr = Field(description="Name of snapshot schedule to create. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    num_retain: StrictInt = Field(description="Number of snapshots to retain. If replication is enabled on this schedule the array will always retain the latest replicated snapshot, which may exceed the specified retention value. This is necessary to ensure efficient replication performance. Unsigned 64-bit integer.")
    num_retain_replica: Optional[StrictInt] = Field(default=None, description="Number of snapshots to retain on the replica. Unsigned 64-bit integer.")
    period: Optional[StrictInt] = Field(default=None, description="Repeat interval for snapshots with respect to the period_unit. For example, a value of 2 with the 'period_unit' of 'hours' results in one snapshot every 2 hours. Unsigned 64-bit integer.")
    period_unit: Optional[StrictStr] = Field(default=None, description="Time unit over which to take the number of snapshots specified in 'period'. For example, a value of 'days' with a 'period' of '1' results in one snapshot every day. Possible values: 'minutes', 'hours', 'days', 'weeks'.")
    repl_alert_thres: Optional[StrictInt] = Field(default=None, description="Replication alert threshold in seconds. If the replication of a snapshot takes more than this amount of time to complete an alert will be generated. Enter 0 to disable this alert. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    replicate_every: Optional[StrictInt] = Field(default=None, description="Specifies which snapshots should be replicated. If snapshots are replicated and this option is not specified, every snapshot is replicated. Unsigned 64-bit integer.")
    schedule_type: Optional[StrictStr] = Field(default=None, description="Normal schedules have internal timers which drive snapshot creation. An externally driven schedule has no internal timers. All snapshot activity is driven by an external trigger. In other words, these schedules are used only for externally driven manual snapshots. Possible values: 'regular', 'external_trigger'")
    skip_db_consistency_check: Optional[StrictBool] = Field(default=None, description="Skip consistency check for database files on snapshots created by this schedule. This option only applies to snapshot schedules of a protection template with application synchronization set to VSS, application ID set to MS Exchange 2010 or later w/DAG, this schedule's snap_verify option set to yes, and its disable_appsync option set to false. Skipping consistency checks is only recommended if each database in a DAG has multiple copies. Possible values: 'true', 'false'.")
    snap_verify: Optional[StrictBool] = Field(default=None, description="Run verification tool on snapshot created by this schedule. This option can only be used with snapshot schedules of a protection template that has application synchronization. The tool used to verify snapshot depends on the type of application. For example, if application synchronization is VSS and the application ID is Exchange, eseutil tool is run on the snapshots. If verification fails, the logs are not truncated. Possible values: 'true', 'false'.")
    until_time: Optional[StrictInt] = Field(default=None, description="Time of day to stop taking snapshots. Applicable only when repeat frequency specifies more than one snapshot in a day. Non-negative integer in range [0,86399] which is equivalent to [0:00:00 AM, 23:59:59 PM].")
    __properties: ClassVar[List[str]] = ["at_time", "days", "description", "disable_appsync", "downstream_partner", "downstream_partner_id", "name", "num_retain", "num_retain_replica", "period", "period_unit", "repl_alert_thres", "replicate_every", "schedule_type", "skip_db_consistency_check", "snap_verify", "until_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProtectionScheduleInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if at_time (nullable) is None
        # and model_fields_set contains the field
        if self.at_time is None and "at_time" in self.model_fields_set:
            _dict['at_time'] = None

        # set to None if days (nullable) is None
        # and model_fields_set contains the field
        if self.days is None and "days" in self.model_fields_set:
            _dict['days'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if disable_appsync (nullable) is None
        # and model_fields_set contains the field
        if self.disable_appsync is None and "disable_appsync" in self.model_fields_set:
            _dict['disable_appsync'] = None

        # set to None if downstream_partner (nullable) is None
        # and model_fields_set contains the field
        if self.downstream_partner is None and "downstream_partner" in self.model_fields_set:
            _dict['downstream_partner'] = None

        # set to None if downstream_partner_id (nullable) is None
        # and model_fields_set contains the field
        if self.downstream_partner_id is None and "downstream_partner_id" in self.model_fields_set:
            _dict['downstream_partner_id'] = None

        # set to None if num_retain_replica (nullable) is None
        # and model_fields_set contains the field
        if self.num_retain_replica is None and "num_retain_replica" in self.model_fields_set:
            _dict['num_retain_replica'] = None

        # set to None if period (nullable) is None
        # and model_fields_set contains the field
        if self.period is None and "period" in self.model_fields_set:
            _dict['period'] = None

        # set to None if period_unit (nullable) is None
        # and model_fields_set contains the field
        if self.period_unit is None and "period_unit" in self.model_fields_set:
            _dict['period_unit'] = None

        # set to None if repl_alert_thres (nullable) is None
        # and model_fields_set contains the field
        if self.repl_alert_thres is None and "repl_alert_thres" in self.model_fields_set:
            _dict['repl_alert_thres'] = None

        # set to None if replicate_every (nullable) is None
        # and model_fields_set contains the field
        if self.replicate_every is None and "replicate_every" in self.model_fields_set:
            _dict['replicate_every'] = None

        # set to None if schedule_type (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_type is None and "schedule_type" in self.model_fields_set:
            _dict['schedule_type'] = None

        # set to None if skip_db_consistency_check (nullable) is None
        # and model_fields_set contains the field
        if self.skip_db_consistency_check is None and "skip_db_consistency_check" in self.model_fields_set:
            _dict['skip_db_consistency_check'] = None

        # set to None if snap_verify (nullable) is None
        # and model_fields_set contains the field
        if self.snap_verify is None and "snap_verify" in self.model_fields_set:
            _dict['snap_verify'] = None

        # set to None if until_time (nullable) is None
        # and model_fields_set contains the field
        if self.until_time is None and "until_time" in self.model_fields_set:
            _dict['until_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProtectionScheduleInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "at_time": obj.get("at_time"),
            "days": obj.get("days"),
            "description": obj.get("description"),
            "disable_appsync": obj.get("disable_appsync"),
            "downstream_partner": obj.get("downstream_partner"),
            "downstream_partner_id": obj.get("downstream_partner_id"),
            "name": obj.get("name"),
            "num_retain": obj.get("num_retain"),
            "num_retain_replica": obj.get("num_retain_replica"),
            "period": obj.get("period"),
            "period_unit": obj.get("period_unit"),
            "repl_alert_thres": obj.get("repl_alert_thres"),
            "replicate_every": obj.get("replicate_every"),
            "schedule_type": obj.get("schedule_type"),
            "skip_db_consistency_check": obj.get("skip_db_consistency_check"),
            "snap_verify": obj.get("snap_verify"),
            "until_time": obj.get("until_time")
        })
        return _obj


