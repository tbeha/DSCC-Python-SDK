# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4systemSettingsDetailsEncryption(BaseModel):
    """
    DeviceType4systemSettingsDetailsEncryption
    """ # noqa: E501
    backup_saved: Optional[StrictBool] = Field(default=None, description="Encryption settings and/or key backed up", alias="backupSaved")
    dar_state: Optional[StrictStr] = Field(default=None, description="DAR state", alias="darState")
    enabled: Optional[StrictBool] = Field(default=None, description="Encryption enabled")
    failed_disks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of failed disks", alias="failedDisks")
    fips_compliant: Optional[StrictStr] = Field(default=None, description="FIPS compliant", alias="fipsCompliant")
    key_location: Optional[StrictStr] = Field(default=None, description="Location of encyption key Local or External key management", alias="keyLocation")
    kmpi_protocols: Optional[List[StrictStr]] = Field(default=None, description="KMIP protocols set", alias="kmpiProtocols")
    licensed: Optional[StrictBool] = Field(default=None, description="Encryption licensed")
    not_fipspd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of non FIPS compliant physical disks", alias="notFIPSPD")
    not_node_sed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of non SED node drives", alias="notNodeSED")
    not_sedpd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of non SED physical disks", alias="notSEDPD")
    seq_num: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sequence number", alias="seqNum")
    server_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Count of External Key Management servers", alias="serverCount")
    server_names: Optional[List[StrictStr]] = Field(default=None, description="List of External Key Management servers", alias="serverNames")
    server_port: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Connection port number for External Key Managers", alias="serverPort")
    server_user: Optional[StrictStr] = Field(default=None, description="Username on External Key Manager", alias="serverUser")
    __properties: ClassVar[List[str]] = ["backupSaved", "darState", "enabled", "failedDisks", "fipsCompliant", "keyLocation", "kmpiProtocols", "licensed", "notFIPSPD", "notNodeSED", "notSEDPD", "seqNum", "serverCount", "serverNames", "serverPort", "serverUser"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4systemSettingsDetailsEncryption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if backup_saved (nullable) is None
        # and model_fields_set contains the field
        if self.backup_saved is None and "backup_saved" in self.model_fields_set:
            _dict['backupSaved'] = None

        # set to None if dar_state (nullable) is None
        # and model_fields_set contains the field
        if self.dar_state is None and "dar_state" in self.model_fields_set:
            _dict['darState'] = None

        # set to None if enabled (nullable) is None
        # and model_fields_set contains the field
        if self.enabled is None and "enabled" in self.model_fields_set:
            _dict['enabled'] = None

        # set to None if failed_disks (nullable) is None
        # and model_fields_set contains the field
        if self.failed_disks is None and "failed_disks" in self.model_fields_set:
            _dict['failedDisks'] = None

        # set to None if fips_compliant (nullable) is None
        # and model_fields_set contains the field
        if self.fips_compliant is None and "fips_compliant" in self.model_fields_set:
            _dict['fipsCompliant'] = None

        # set to None if key_location (nullable) is None
        # and model_fields_set contains the field
        if self.key_location is None and "key_location" in self.model_fields_set:
            _dict['keyLocation'] = None

        # set to None if kmpi_protocols (nullable) is None
        # and model_fields_set contains the field
        if self.kmpi_protocols is None and "kmpi_protocols" in self.model_fields_set:
            _dict['kmpiProtocols'] = None

        # set to None if licensed (nullable) is None
        # and model_fields_set contains the field
        if self.licensed is None and "licensed" in self.model_fields_set:
            _dict['licensed'] = None

        # set to None if not_fipspd (nullable) is None
        # and model_fields_set contains the field
        if self.not_fipspd is None and "not_fipspd" in self.model_fields_set:
            _dict['notFIPSPD'] = None

        # set to None if not_node_sed (nullable) is None
        # and model_fields_set contains the field
        if self.not_node_sed is None and "not_node_sed" in self.model_fields_set:
            _dict['notNodeSED'] = None

        # set to None if not_sedpd (nullable) is None
        # and model_fields_set contains the field
        if self.not_sedpd is None and "not_sedpd" in self.model_fields_set:
            _dict['notSEDPD'] = None

        # set to None if seq_num (nullable) is None
        # and model_fields_set contains the field
        if self.seq_num is None and "seq_num" in self.model_fields_set:
            _dict['seqNum'] = None

        # set to None if server_count (nullable) is None
        # and model_fields_set contains the field
        if self.server_count is None and "server_count" in self.model_fields_set:
            _dict['serverCount'] = None

        # set to None if server_names (nullable) is None
        # and model_fields_set contains the field
        if self.server_names is None and "server_names" in self.model_fields_set:
            _dict['serverNames'] = None

        # set to None if server_port (nullable) is None
        # and model_fields_set contains the field
        if self.server_port is None and "server_port" in self.model_fields_set:
            _dict['serverPort'] = None

        # set to None if server_user (nullable) is None
        # and model_fields_set contains the field
        if self.server_user is None and "server_user" in self.model_fields_set:
            _dict['serverUser'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4systemSettingsDetailsEncryption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupSaved": obj.get("backupSaved"),
            "darState": obj.get("darState"),
            "enabled": obj.get("enabled"),
            "failedDisks": obj.get("failedDisks"),
            "fipsCompliant": obj.get("fipsCompliant"),
            "keyLocation": obj.get("keyLocation"),
            "kmpiProtocols": obj.get("kmpiProtocols"),
            "licensed": obj.get("licensed"),
            "notFIPSPD": obj.get("notFIPSPD"),
            "notNodeSED": obj.get("notNodeSED"),
            "notSEDPD": obj.get("notSEDPD"),
            "seqNum": obj.get("seqNum"),
            "serverCount": obj.get("serverCount"),
            "serverNames": obj.get("serverNames"),
            "serverPort": obj.get("serverPort"),
            "serverUser": obj.get("serverUser")
        })
        return _obj


