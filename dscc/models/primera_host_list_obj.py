# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.common_resource_attributes_hosts import CommonResourceAttributesHosts
from dscc.models.host_agent import HostAgent
from dscc.models.host_descriptors import HostDescriptors
from dscc.models.host_state import HostState
from dscc.models.persona import Persona
from dscc.models.primera_host_paths_for_primera_host import PrimeraHostPathsForPrimeraHost
from typing import Optional, Set
from typing_extensions import Self

class PrimeraHostListObj(BaseModel):
    """
    Primera Host details
    """ # noqa: E501
    agent: Optional[HostAgent] = None
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    common_resource_attributes: Optional[CommonResourceAttributesHosts] = Field(default=None, alias="commonResourceAttributes")
    descriptors: Optional[HostDescriptors] = None
    displayname: Optional[StrictStr] = Field(default=None, description="Name to be used for display purposes")
    domain: Optional[StrictStr] = Field(default=None, description="Domain name of the Host")
    generation: Optional[StrictInt] = Field(default=None, description="Generation Time of the Resource `Filter, Sort`")
    host_id: Optional[StrictInt] = Field(default=None, description="Numeric ID of the resource", alias="hostId")
    hostpaths: Optional[List[Optional[PrimeraHostPathsForPrimeraHost]]] = None
    id: Optional[StrictStr] = Field(default=None, description="Host Resource UID `Filter`")
    initiator_chap_enabled: Optional[StrictBool] = Field(default=None, description="Indicates if the Initiator Chap is enabled or not", alias="initiatorChapEnabled")
    initiator_chap_name: Optional[StrictStr] = Field(default=None, description="Initiator Chap Name", alias="initiatorChapName")
    initiator_encrypted_chap_secret: Optional[StrictStr] = Field(default=None, description="Initiator Encrypted Chap Secret", alias="initiatorEncryptedChapSecret")
    min_lun_id: Optional[StrictInt] = Field(default=None, description="LUN Id of the host", alias="minLunId")
    name: Optional[StrictStr] = Field(default=None, description="Host Name `Filter, Sort`")
    persona: Optional[Persona] = None
    resource_uri: Optional[StrictStr] = Field(default=None, description="Resoure Uri of the Host        ", alias="resourceUri")
    sc_host_id: Optional[StrictStr] = Field(default=None, description="Host Service Host Id", alias="sc_HostId")
    state: Optional[HostState] = None
    state_description: Optional[List[Optional[StrictStr]]] = Field(default=None, alias="stateDescription")
    state_val: Optional[StrictInt] = Field(default=None, description="Health Status of the Host", alias="stateVal")
    system_uid: Optional[StrictStr] = Field(default=None, description="Serial Number of the system `Filter` ", alias="systemUid")
    system_wwn: Optional[StrictStr] = Field(default=None, description="System wwn `Filter, Sort`", alias="systemWWN")
    target_chap_enabled: Optional[StrictBool] = Field(default=None, description="Indicates if the Target Chap is enabled or not", alias="targetChapEnabled")
    target_chap_name: Optional[StrictStr] = Field(default=None, description="Target Chap Name", alias="targetChapName")
    target_encrypted_chap_secret: Optional[StrictStr] = Field(default=None, description="Target Encrypted Chap Secret", alias="targetEncryptedChapSecret")
    ua_rep_lun: Optional[StrictBool] = Field(default=None, description="Indicates if the UaRepLun is enabled or not", alias="uaRepLun")
    uri: Optional[StrictStr] = Field(default=None, description="Resoure Uri of the Host")
    __properties: ClassVar[List[str]] = ["agent", "associatedLinks", "commonResourceAttributes", "descriptors", "displayname", "domain", "generation", "hostId", "hostpaths", "id", "initiatorChapEnabled", "initiatorChapName", "initiatorEncryptedChapSecret", "minLunId", "name", "persona", "resourceUri", "sc_HostId", "state", "stateDescription", "stateVal", "systemUid", "systemWWN", "targetChapEnabled", "targetChapName", "targetEncryptedChapSecret", "uaRepLun", "uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrimeraHostListObj from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agent
        if self.agent:
            _dict['agent'] = self.agent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of descriptors
        if self.descriptors:
            _dict['descriptors'] = self.descriptors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in hostpaths (list)
        _items = []
        if self.hostpaths:
            for _item in self.hostpaths:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hostpaths'] = _items
        # override the default output from pydantic by calling `to_dict()` of persona
        if self.persona:
            _dict['persona'] = self.persona.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # set to None if agent (nullable) is None
        # and model_fields_set contains the field
        if self.agent is None and "agent" in self.model_fields_set:
            _dict['agent'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if descriptors (nullable) is None
        # and model_fields_set contains the field
        if self.descriptors is None and "descriptors" in self.model_fields_set:
            _dict['descriptors'] = None

        # set to None if displayname (nullable) is None
        # and model_fields_set contains the field
        if self.displayname is None and "displayname" in self.model_fields_set:
            _dict['displayname'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if host_id (nullable) is None
        # and model_fields_set contains the field
        if self.host_id is None and "host_id" in self.model_fields_set:
            _dict['hostId'] = None

        # set to None if hostpaths (nullable) is None
        # and model_fields_set contains the field
        if self.hostpaths is None and "hostpaths" in self.model_fields_set:
            _dict['hostpaths'] = None

        # set to None if initiator_chap_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_chap_enabled is None and "initiator_chap_enabled" in self.model_fields_set:
            _dict['initiatorChapEnabled'] = None

        # set to None if initiator_chap_name (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_chap_name is None and "initiator_chap_name" in self.model_fields_set:
            _dict['initiatorChapName'] = None

        # set to None if initiator_encrypted_chap_secret (nullable) is None
        # and model_fields_set contains the field
        if self.initiator_encrypted_chap_secret is None and "initiator_encrypted_chap_secret" in self.model_fields_set:
            _dict['initiatorEncryptedChapSecret'] = None

        # set to None if min_lun_id (nullable) is None
        # and model_fields_set contains the field
        if self.min_lun_id is None and "min_lun_id" in self.model_fields_set:
            _dict['minLunId'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if persona (nullable) is None
        # and model_fields_set contains the field
        if self.persona is None and "persona" in self.model_fields_set:
            _dict['persona'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if sc_host_id (nullable) is None
        # and model_fields_set contains the field
        if self.sc_host_id is None and "sc_host_id" in self.model_fields_set:
            _dict['sc_HostId'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if state_description (nullable) is None
        # and model_fields_set contains the field
        if self.state_description is None and "state_description" in self.model_fields_set:
            _dict['stateDescription'] = None

        # set to None if state_val (nullable) is None
        # and model_fields_set contains the field
        if self.state_val is None and "state_val" in self.model_fields_set:
            _dict['stateVal'] = None

        # set to None if target_chap_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.target_chap_enabled is None and "target_chap_enabled" in self.model_fields_set:
            _dict['targetChapEnabled'] = None

        # set to None if target_chap_name (nullable) is None
        # and model_fields_set contains the field
        if self.target_chap_name is None and "target_chap_name" in self.model_fields_set:
            _dict['targetChapName'] = None

        # set to None if target_encrypted_chap_secret (nullable) is None
        # and model_fields_set contains the field
        if self.target_encrypted_chap_secret is None and "target_encrypted_chap_secret" in self.model_fields_set:
            _dict['targetEncryptedChapSecret'] = None

        # set to None if ua_rep_lun (nullable) is None
        # and model_fields_set contains the field
        if self.ua_rep_lun is None and "ua_rep_lun" in self.model_fields_set:
            _dict['uaRepLun'] = None

        # set to None if uri (nullable) is None
        # and model_fields_set contains the field
        if self.uri is None and "uri" in self.model_fields_set:
            _dict['uri'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrimeraHostListObj from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agent": HostAgent.from_dict(obj["agent"]) if obj.get("agent") is not None else None,
            "associatedLinks": [AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "commonResourceAttributes": CommonResourceAttributesHosts.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "descriptors": HostDescriptors.from_dict(obj["descriptors"]) if obj.get("descriptors") is not None else None,
            "displayname": obj.get("displayname"),
            "domain": obj.get("domain"),
            "generation": obj.get("generation"),
            "hostId": obj.get("hostId"),
            "hostpaths": [PrimeraHostPathsForPrimeraHost.from_dict(_item) for _item in obj["hostpaths"]] if obj.get("hostpaths") is not None else None,
            "id": obj.get("id"),
            "initiatorChapEnabled": obj.get("initiatorChapEnabled"),
            "initiatorChapName": obj.get("initiatorChapName"),
            "initiatorEncryptedChapSecret": obj.get("initiatorEncryptedChapSecret"),
            "minLunId": obj.get("minLunId"),
            "name": obj.get("name"),
            "persona": Persona.from_dict(obj["persona"]) if obj.get("persona") is not None else None,
            "resourceUri": obj.get("resourceUri"),
            "sc_HostId": obj.get("sc_HostId"),
            "state": HostState.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "stateDescription": obj.get("stateDescription"),
            "stateVal": obj.get("stateVal"),
            "systemUid": obj.get("systemUid"),
            "systemWWN": obj.get("systemWWN"),
            "targetChapEnabled": obj.get("targetChapEnabled"),
            "targetChapName": obj.get("targetChapName"),
            "targetEncryptedChapSecret": obj.get("targetEncryptedChapSecret"),
            "uaRepLun": obj.get("uaRepLun"),
            "uri": obj.get("uri")
        })
        return _obj


