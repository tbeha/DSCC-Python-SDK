# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4SnmpConfigParams(BaseModel):
    """
    DeviceType4SnmpConfigParams
    """ # noqa: E501
    authentication_password: Optional[StrictStr] = Field(default=None, description="Specify the SNMPv3 Authentication Password", alias="authenticationPassword")
    manager_ip: Optional[StrictStr] = Field(default=None, description="Specify the IP address of the host from which the manager runs", alias="managerIP")
    notify: Optional[StrictStr] = Field(default=None, description="Indicates the trap notification types defined by the HPE deviceType1 MIB")
    port: Optional[StrictInt] = Field(default=None, description="Specify the port number where the SNMP manager receives traps")
    priv_password: Optional[StrictStr] = Field(default=None, description="Specify the SNMPv3 Authentication Password", alias="privPassword")
    retry: Optional[StrictInt] = Field(default=None, description="Specify the number of times to send a trap (retry) if the SNMP manager is not available.")
    timeout_secs: Optional[StrictInt] = Field(default=None, description="Specify the number of seconds to wait before sending a trap (timeout).", alias="timeoutSecs")
    user: Optional[StrictStr] = Field(default=None, description="Specify the SNMPv3 user name")
    user_mode: Optional[StrictStr] = Field(default=None, description="Specify the SNMPv3 user mode", alias="userMode")
    version: Optional[StrictInt] = Field(default=None, description="Specify the SNMP version supported")
    __properties: ClassVar[List[str]] = ["authenticationPassword", "managerIP", "notify", "port", "privPassword", "retry", "timeoutSecs", "user", "userMode", "version"]

    @field_validator('notify')
    def notify_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALL', 'NODUP', 'STANDARD']):
            raise ValueError("must be one of enum values ('ALL', 'NODUP', 'STANDARD')")
        return value

    @field_validator('user_mode')
    def user_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NEW', 'EXISTING']):
            raise ValueError("must be one of enum values ('NEW', 'EXISTING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4SnmpConfigParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if authentication_password (nullable) is None
        # and model_fields_set contains the field
        if self.authentication_password is None and "authentication_password" in self.model_fields_set:
            _dict['authenticationPassword'] = None

        # set to None if notify (nullable) is None
        # and model_fields_set contains the field
        if self.notify is None and "notify" in self.model_fields_set:
            _dict['notify'] = None

        # set to None if port (nullable) is None
        # and model_fields_set contains the field
        if self.port is None and "port" in self.model_fields_set:
            _dict['port'] = None

        # set to None if priv_password (nullable) is None
        # and model_fields_set contains the field
        if self.priv_password is None and "priv_password" in self.model_fields_set:
            _dict['privPassword'] = None

        # set to None if retry (nullable) is None
        # and model_fields_set contains the field
        if self.retry is None and "retry" in self.model_fields_set:
            _dict['retry'] = None

        # set to None if timeout_secs (nullable) is None
        # and model_fields_set contains the field
        if self.timeout_secs is None and "timeout_secs" in self.model_fields_set:
            _dict['timeoutSecs'] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['user'] = None

        # set to None if user_mode (nullable) is None
        # and model_fields_set contains the field
        if self.user_mode is None and "user_mode" in self.model_fields_set:
            _dict['userMode'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4SnmpConfigParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authenticationPassword": obj.get("authenticationPassword"),
            "managerIP": obj.get("managerIP"),
            "notify": obj.get("notify"),
            "port": obj.get("port"),
            "privPassword": obj.get("privPassword"),
            "retry": obj.get("retry"),
            "timeoutSecs": obj.get("timeoutSecs"),
            "user": obj.get("user"),
            "userMode": obj.get("userMode"),
            "version": obj.get("version")
        })
        return _obj


