# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dscc.models.common_resource_attributes import CommonResourceAttributes
from dscc.models.device_type4_associated_links_inner import DeviceType4AssociatedLinksInner
from dscc.models.device_type4v_volsc_details_creation_time import DeviceType4vVolscDetailsCreationTime
from dscc.models.host_details import HostDetails
from dscc.models.host_group_details import HostGroupDetails
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4vVolscDetails(BaseModel):
    """
    Storage container details for a device
    """ # noqa: E501
    associated_links: Optional[List[DeviceType4AssociatedLinksInner]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    auto_dissmissed: Optional[StrictInt] = Field(default=None, description="name of the resource", alias="autoDissmissed")
    comment: Optional[StrictStr] = Field(default=None, description="comments")
    common_resource_attributes: Optional[CommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    creation_time: Optional[DeviceType4vVolscDetailsCreationTime] = Field(default=None, alias="creationTime")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    display_name: Optional[StrictStr] = Field(default=None, description="Name to be used for display purposes", alias="displayName")
    domain: Optional[StrictStr] = Field(default=None, description="domain of the storage container")
    generation: Optional[StrictInt] = Field(default=None, description="A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.")
    growth_limit_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Indicates that the auto-grow operation is limited to the specified storage amount.", alias="growthLimitMiB")
    growth_size_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Indicates the growth increment size, the amount of logical disk storage created on each auto-grow operation.", alias="growthSizeMiB")
    growth_warn_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Indicates that the threshold of used logical disk space, when exceeded, results in a warning alert.", alias="growthWarnMiB")
    host_groups: Optional[List[Optional[HostGroupDetails]]] = Field(default=None, description="Hosts", alias="hostGroups")
    host_list: Optional[List[StrictStr]] = Field(default=None, description="vVols storage container host list", alias="hostList")
    hosts: Optional[List[Optional[HostDetails]]] = Field(default=None, description="Hosts")
    id: Optional[StrictStr] = Field(default=None, description="UID of the storage container")
    in_use_mi_b: Optional[StrictInt] = Field(default=None, description="space used by the storage container", alias="inUseMiB")
    name: Optional[StrictStr] = Field(default=None, description="name of the resource")
    num_of_vms: Optional[StrictInt] = Field(default=None, description="no. of VMs in storage container", alias="numOfVMs")
    num_of_vvols: Optional[StrictInt] = Field(default=None, description="no. of vVols in storage container", alias="numOfVvols")
    pevvs: Optional[List[StrictStr]] = Field(default=None, description="vVols storage container PEVV list")
    provisioned_mi_b: Optional[StrictInt] = Field(default=None, description="provisioned size of storage container", alias="provisionedMiB")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed snmpUsers object", alias="resourceUri")
    sc_id: Optional[StrictStr] = Field(default=None, description="The ID of the vvset that represent the storage container")
    sc_uuid: Optional[StrictStr] = Field(default=None, description="sc_uuid of storage container")
    sc_id: Optional[StrictInt] = Field(default=None, description="ID of the storage container", alias="scId")
    sc_type: Optional[StrictStr] = Field(default=None, description="The type of the storage container.", alias="scType")
    system_id: Optional[StrictStr] = Field(default=None, description="systemId of the resource", alias="systemId")
    system_wwn: Optional[StrictStr] = Field(default=None, description="systemWWN of the resource", alias="systemWWN")
    total_mi_b: Optional[StrictInt] = Field(default=None, description="name of the resource", alias="totalMiB")
    type: Optional[StrictStr] = Field(default=None, description="type of the resource")
    uri: Optional[StrictStr] = Field(default=None, description="uri for the storage container")
    __properties: ClassVar[List[str]] = ["associatedLinks", "autoDissmissed", "comment", "commonResourceAttributes", "consoleUri", "creationTime", "customerId", "displayName", "domain", "generation", "growthLimitMiB", "growthSizeMiB", "growthWarnMiB", "hostGroups", "hostList", "hosts", "id", "inUseMiB", "name", "numOfVMs", "numOfVvols", "pevvs", "provisionedMiB", "resourceUri", "sc_id", "sc_uuid", "scId", "scType", "systemId", "systemWWN", "totalMiB", "type", "uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4vVolscDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creation_time
        if self.creation_time:
            _dict['creationTime'] = self.creation_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in host_groups (list)
        _items = []
        if self.host_groups:
            for _item in self.host_groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hostGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hosts (list)
        _items = []
        if self.hosts:
            for _item in self.hosts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hosts'] = _items
        # set to None if associated_links (nullable) is None
        # and model_fields_set contains the field
        if self.associated_links is None and "associated_links" in self.model_fields_set:
            _dict['associatedLinks'] = None

        # set to None if auto_dissmissed (nullable) is None
        # and model_fields_set contains the field
        if self.auto_dissmissed is None and "auto_dissmissed" in self.model_fields_set:
            _dict['autoDissmissed'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if creation_time (nullable) is None
        # and model_fields_set contains the field
        if self.creation_time is None and "creation_time" in self.model_fields_set:
            _dict['creationTime'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if growth_limit_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.growth_limit_mi_b is None and "growth_limit_mi_b" in self.model_fields_set:
            _dict['growthLimitMiB'] = None

        # set to None if growth_size_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.growth_size_mi_b is None and "growth_size_mi_b" in self.model_fields_set:
            _dict['growthSizeMiB'] = None

        # set to None if growth_warn_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.growth_warn_mi_b is None and "growth_warn_mi_b" in self.model_fields_set:
            _dict['growthWarnMiB'] = None

        # set to None if host_groups (nullable) is None
        # and model_fields_set contains the field
        if self.host_groups is None and "host_groups" in self.model_fields_set:
            _dict['hostGroups'] = None

        # set to None if host_list (nullable) is None
        # and model_fields_set contains the field
        if self.host_list is None and "host_list" in self.model_fields_set:
            _dict['hostList'] = None

        # set to None if hosts (nullable) is None
        # and model_fields_set contains the field
        if self.hosts is None and "hosts" in self.model_fields_set:
            _dict['hosts'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if in_use_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.in_use_mi_b is None and "in_use_mi_b" in self.model_fields_set:
            _dict['inUseMiB'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if num_of_vms (nullable) is None
        # and model_fields_set contains the field
        if self.num_of_vms is None and "num_of_vms" in self.model_fields_set:
            _dict['numOfVMs'] = None

        # set to None if num_of_vvols (nullable) is None
        # and model_fields_set contains the field
        if self.num_of_vvols is None and "num_of_vvols" in self.model_fields_set:
            _dict['numOfVvols'] = None

        # set to None if pevvs (nullable) is None
        # and model_fields_set contains the field
        if self.pevvs is None and "pevvs" in self.model_fields_set:
            _dict['pevvs'] = None

        # set to None if provisioned_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.provisioned_mi_b is None and "provisioned_mi_b" in self.model_fields_set:
            _dict['provisionedMiB'] = None

        # set to None if sc_id (nullable) is None
        # and model_fields_set contains the field
        if self.sc_id is None and "sc_id" in self.model_fields_set:
            _dict['sc_id'] = None

        # set to None if sc_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.sc_uuid is None and "sc_uuid" in self.model_fields_set:
            _dict['sc_uuid'] = None

        # set to None if sc_id (nullable) is None
        # and model_fields_set contains the field
        if self.sc_id is None and "sc_id" in self.model_fields_set:
            _dict['scId'] = None

        # set to None if sc_type (nullable) is None
        # and model_fields_set contains the field
        if self.sc_type is None and "sc_type" in self.model_fields_set:
            _dict['scType'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if system_wwn (nullable) is None
        # and model_fields_set contains the field
        if self.system_wwn is None and "system_wwn" in self.model_fields_set:
            _dict['systemWWN'] = None

        # set to None if total_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.total_mi_b is None and "total_mi_b" in self.model_fields_set:
            _dict['totalMiB'] = None

        # set to None if uri (nullable) is None
        # and model_fields_set contains the field
        if self.uri is None and "uri" in self.model_fields_set:
            _dict['uri'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4vVolscDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedLinks": [DeviceType4AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "autoDissmissed": obj.get("autoDissmissed"),
            "comment": obj.get("comment"),
            "commonResourceAttributes": CommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "creationTime": DeviceType4vVolscDetailsCreationTime.from_dict(obj["creationTime"]) if obj.get("creationTime") is not None else None,
            "customerId": obj.get("customerId"),
            "displayName": obj.get("displayName"),
            "domain": obj.get("domain"),
            "generation": obj.get("generation"),
            "growthLimitMiB": obj.get("growthLimitMiB"),
            "growthSizeMiB": obj.get("growthSizeMiB"),
            "growthWarnMiB": obj.get("growthWarnMiB"),
            "hostGroups": [HostGroupDetails.from_dict(_item) for _item in obj["hostGroups"]] if obj.get("hostGroups") is not None else None,
            "hostList": obj.get("hostList"),
            "hosts": [HostDetails.from_dict(_item) for _item in obj["hosts"]] if obj.get("hosts") is not None else None,
            "id": obj.get("id"),
            "inUseMiB": obj.get("inUseMiB"),
            "name": obj.get("name"),
            "numOfVMs": obj.get("numOfVMs"),
            "numOfVvols": obj.get("numOfVvols"),
            "pevvs": obj.get("pevvs"),
            "provisionedMiB": obj.get("provisionedMiB"),
            "resourceUri": obj.get("resourceUri"),
            "sc_id": obj.get("sc_id"),
            "sc_uuid": obj.get("sc_uuid"),
            "scId": obj.get("scId"),
            "scType": obj.get("scType"),
            "systemId": obj.get("systemId"),
            "systemWWN": obj.get("systemWWN"),
            "totalMiB": obj.get("totalMiB"),
            "type": obj.get("type"),
            "uri": obj.get("uri")
        })
        return _obj


