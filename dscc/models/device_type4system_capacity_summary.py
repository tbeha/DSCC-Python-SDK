# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from dscc.models.device_type4allocated import DeviceType4allocated
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4systemCapacitySummary(BaseModel):
    """
    DeviceType4systemCapacitySummary
    """ # noqa: E501
    allocated: Optional[DeviceType4allocated] = None
    allocated_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage of allocated capacity for the system", alias="allocatedPercentage")
    compaction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Compaction details")
    compression: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Compression details")
    data_reduction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Data reduction", alias="dataReduction")
    dedup: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Dedup Details")
    failed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Failed capacity")
    failed_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage of failed capacity", alias="failedPercentage")
    free: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Free capacity of the system")
    free_initialized: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Intialized capacity out of the free capacity", alias="freeInitialized")
    free_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage of the free capacity", alias="freePercentage")
    free_uninitialized: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Uninitialized capacity out of the free capacity", alias="freeUninitialized")
    over_provisioning: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Over provisioning ratio", alias="overProvisioning")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total capacity of the system")
    unavailable: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Unavailable storage")
    unavailable_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage of storage that is unavailable", alias="unavailablePercentage")
    __properties: ClassVar[List[str]] = ["allocated", "allocatedPercentage", "compaction", "compression", "dataReduction", "dedup", "failed", "failedPercentage", "free", "freeInitialized", "freePercentage", "freeUninitialized", "overProvisioning", "total", "unavailable", "unavailablePercentage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4systemCapacitySummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of allocated
        if self.allocated:
            _dict['allocated'] = self.allocated.to_dict()
        # set to None if allocated (nullable) is None
        # and model_fields_set contains the field
        if self.allocated is None and "allocated" in self.model_fields_set:
            _dict['allocated'] = None

        # set to None if allocated_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.allocated_percentage is None and "allocated_percentage" in self.model_fields_set:
            _dict['allocatedPercentage'] = None

        # set to None if compaction (nullable) is None
        # and model_fields_set contains the field
        if self.compaction is None and "compaction" in self.model_fields_set:
            _dict['compaction'] = None

        # set to None if compression (nullable) is None
        # and model_fields_set contains the field
        if self.compression is None and "compression" in self.model_fields_set:
            _dict['compression'] = None

        # set to None if data_reduction (nullable) is None
        # and model_fields_set contains the field
        if self.data_reduction is None and "data_reduction" in self.model_fields_set:
            _dict['dataReduction'] = None

        # set to None if dedup (nullable) is None
        # and model_fields_set contains the field
        if self.dedup is None and "dedup" in self.model_fields_set:
            _dict['dedup'] = None

        # set to None if failed (nullable) is None
        # and model_fields_set contains the field
        if self.failed is None and "failed" in self.model_fields_set:
            _dict['failed'] = None

        # set to None if failed_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.failed_percentage is None and "failed_percentage" in self.model_fields_set:
            _dict['failedPercentage'] = None

        # set to None if free (nullable) is None
        # and model_fields_set contains the field
        if self.free is None and "free" in self.model_fields_set:
            _dict['free'] = None

        # set to None if free_initialized (nullable) is None
        # and model_fields_set contains the field
        if self.free_initialized is None and "free_initialized" in self.model_fields_set:
            _dict['freeInitialized'] = None

        # set to None if free_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.free_percentage is None and "free_percentage" in self.model_fields_set:
            _dict['freePercentage'] = None

        # set to None if free_uninitialized (nullable) is None
        # and model_fields_set contains the field
        if self.free_uninitialized is None and "free_uninitialized" in self.model_fields_set:
            _dict['freeUninitialized'] = None

        # set to None if over_provisioning (nullable) is None
        # and model_fields_set contains the field
        if self.over_provisioning is None and "over_provisioning" in self.model_fields_set:
            _dict['overProvisioning'] = None

        # set to None if total (nullable) is None
        # and model_fields_set contains the field
        if self.total is None and "total" in self.model_fields_set:
            _dict['total'] = None

        # set to None if unavailable (nullable) is None
        # and model_fields_set contains the field
        if self.unavailable is None and "unavailable" in self.model_fields_set:
            _dict['unavailable'] = None

        # set to None if unavailable_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.unavailable_percentage is None and "unavailable_percentage" in self.model_fields_set:
            _dict['unavailablePercentage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4systemCapacitySummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocated": DeviceType4allocated.from_dict(obj["allocated"]) if obj.get("allocated") is not None else None,
            "allocatedPercentage": obj.get("allocatedPercentage"),
            "compaction": obj.get("compaction"),
            "compression": obj.get("compression"),
            "dataReduction": obj.get("dataReduction"),
            "dedup": obj.get("dedup"),
            "failed": obj.get("failed"),
            "failedPercentage": obj.get("failedPercentage"),
            "free": obj.get("free"),
            "freeInitialized": obj.get("freeInitialized"),
            "freePercentage": obj.get("freePercentage"),
            "freeUninitialized": obj.get("freeUninitialized"),
            "overProvisioning": obj.get("overProvisioning"),
            "total": obj.get("total"),
            "unavailable": obj.get("unavailable"),
            "unavailablePercentage": obj.get("unavailablePercentage")
        })
        return _obj


