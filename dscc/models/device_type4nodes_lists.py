# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from dscc.models.device_type4_state import DeviceType4State
from dscc.models.device_type4uptime import DeviceType4uptime
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4nodesLists(BaseModel):
    """
    DeviceType4nodesLists
    """ # noqa: E501
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    displayname: Optional[StrictStr] = Field(default=None, description="Name to be used for display purposes")
    domain: Optional[StrictStr] = Field(default=None, description="Domain that the resource belongs to")
    enclosure_card_id: Optional[StrictInt] = Field(default=None, description="ID of the enclosure card", alias="enclosureCardId")
    enclosure_card_uid: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the enclosure card", alias="enclosureCardUid")
    enclosure_id: Optional[StrictInt] = Field(default=None, description="ID of the enclosure", alias="enclosureId")
    enclosure_uid: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the enclosure", alias="enclosureUid")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    id: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the resource.")
    in_cluster: Optional[StrictBool] = Field(default=None, description="Indicates if this node is part of the cluster.", alias="inCluster")
    kernel_version: Optional[StrictStr] = Field(default=None, description="Kernel version", alias="kernelVersion")
    master: Optional[StrictBool] = Field(default=None, description="Indicates if this is the master node.")
    memory_mi_b: Optional[StrictInt] = Field(default=None, description="Total data memory in the node in MiB", alias="memoryMiB")
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Name of the resource.")
    node_id: Optional[StrictInt] = Field(default=None, description="Numeric ID of the resource.", alias="nodeId")
    online: Optional[StrictBool] = Field(default=None, description="Indicates if this node is online")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed node object", alias="resourceUri")
    state: Optional[DeviceType4State] = None
    system_id: Optional[StrictStr] = Field(default=None, description="SystemId/Serial Number  of the array.", alias="systemId")
    type: Optional[StrictStr] = Field(default=None, description="type")
    uptime: Optional[DeviceType4uptime] = None
    __properties: ClassVar[List[str]] = ["customerId", "displayname", "domain", "enclosureCardId", "enclosureCardUid", "enclosureId", "enclosureUid", "generation", "id", "inCluster", "kernelVersion", "master", "memoryMiB", "name", "nodeId", "online", "resourceUri", "state", "systemId", "type", "uptime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4nodesLists from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of uptime
        if self.uptime:
            _dict['uptime'] = self.uptime.to_dict()
        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if displayname (nullable) is None
        # and model_fields_set contains the field
        if self.displayname is None and "displayname" in self.model_fields_set:
            _dict['displayname'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if enclosure_card_id (nullable) is None
        # and model_fields_set contains the field
        if self.enclosure_card_id is None and "enclosure_card_id" in self.model_fields_set:
            _dict['enclosureCardId'] = None

        # set to None if enclosure_card_uid (nullable) is None
        # and model_fields_set contains the field
        if self.enclosure_card_uid is None and "enclosure_card_uid" in self.model_fields_set:
            _dict['enclosureCardUid'] = None

        # set to None if enclosure_id (nullable) is None
        # and model_fields_set contains the field
        if self.enclosure_id is None and "enclosure_id" in self.model_fields_set:
            _dict['enclosureId'] = None

        # set to None if enclosure_uid (nullable) is None
        # and model_fields_set contains the field
        if self.enclosure_uid is None and "enclosure_uid" in self.model_fields_set:
            _dict['enclosureUid'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if in_cluster (nullable) is None
        # and model_fields_set contains the field
        if self.in_cluster is None and "in_cluster" in self.model_fields_set:
            _dict['inCluster'] = None

        # set to None if kernel_version (nullable) is None
        # and model_fields_set contains the field
        if self.kernel_version is None and "kernel_version" in self.model_fields_set:
            _dict['kernelVersion'] = None

        # set to None if master (nullable) is None
        # and model_fields_set contains the field
        if self.master is None and "master" in self.model_fields_set:
            _dict['master'] = None

        # set to None if memory_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.memory_mi_b is None and "memory_mi_b" in self.model_fields_set:
            _dict['memoryMiB'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if node_id (nullable) is None
        # and model_fields_set contains the field
        if self.node_id is None and "node_id" in self.model_fields_set:
            _dict['nodeId'] = None

        # set to None if online (nullable) is None
        # and model_fields_set contains the field
        if self.online is None and "online" in self.model_fields_set:
            _dict['online'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if uptime (nullable) is None
        # and model_fields_set contains the field
        if self.uptime is None and "uptime" in self.model_fields_set:
            _dict['uptime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4nodesLists from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerId": obj.get("customerId"),
            "displayname": obj.get("displayname"),
            "domain": obj.get("domain"),
            "enclosureCardId": obj.get("enclosureCardId"),
            "enclosureCardUid": obj.get("enclosureCardUid"),
            "enclosureId": obj.get("enclosureId"),
            "enclosureUid": obj.get("enclosureUid"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "inCluster": obj.get("inCluster"),
            "kernelVersion": obj.get("kernelVersion"),
            "master": obj.get("master"),
            "memoryMiB": obj.get("memoryMiB"),
            "name": obj.get("name"),
            "nodeId": obj.get("nodeId"),
            "online": obj.get("online"),
            "resourceUri": obj.get("resourceUri"),
            "state": DeviceType4State.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "systemId": obj.get("systemId"),
            "type": obj.get("type"),
            "uptime": DeviceType4uptime.from_dict(obj["uptime"]) if obj.get("uptime") is not None else None
        })
        return _obj


