# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.offline_clone import OfflineClone
from dscc.models.online_clone import OnlineClone
from typing import Optional, Set
from typing_extensions import Self

class CreateCloneVolumeInput(BaseModel):
    """
    Request body for creating physical copy of a volume.
    """ # noqa: E501
    destination_volume: StrictStr = Field(description="Name of the destination volume.", alias="destinationVolume")
    offline_clone: Optional[OfflineClone] = Field(default=None, alias="offlineClone")
    online: Optional[StrictBool] = Field(default=None, description="Create an online or offline clone of a volume.")
    online_clone: Optional[OnlineClone] = Field(default=None, alias="onlineClone")
    priority: Optional[StrictStr] = Field(default=None, description="Priority of the task for clone volume. Defualts to MEDIUM.")
    __properties: ClassVar[List[str]] = ["destinationVolume", "offlineClone", "online", "onlineClone", "priority"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRIORITYTYPE_HIGH', 'PRIORITYTYPE_MED', 'PRIORITYTYPE_LOW']):
            raise ValueError("must be one of enum values ('PRIORITYTYPE_HIGH', 'PRIORITYTYPE_MED', 'PRIORITYTYPE_LOW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateCloneVolumeInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of offline_clone
        if self.offline_clone:
            _dict['offlineClone'] = self.offline_clone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of online_clone
        if self.online_clone:
            _dict['onlineClone'] = self.online_clone.to_dict()
        # set to None if offline_clone (nullable) is None
        # and model_fields_set contains the field
        if self.offline_clone is None and "offline_clone" in self.model_fields_set:
            _dict['offlineClone'] = None

        # set to None if online (nullable) is None
        # and model_fields_set contains the field
        if self.online is None and "online" in self.model_fields_set:
            _dict['online'] = None

        # set to None if online_clone (nullable) is None
        # and model_fields_set contains the field
        if self.online_clone is None and "online_clone" in self.model_fields_set:
            _dict['onlineClone'] = None

        # set to None if priority (nullable) is None
        # and model_fields_set contains the field
        if self.priority is None and "priority" in self.model_fields_set:
            _dict['priority'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateCloneVolumeInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destinationVolume": obj.get("destinationVolume"),
            "offlineClone": OfflineClone.from_dict(obj["offlineClone"]) if obj.get("offlineClone") is not None else None,
            "online": obj.get("online"),
            "onlineClone": OnlineClone.from_dict(obj["onlineClone"]) if obj.get("onlineClone") is not None else None,
            "priority": obj.get("priority")
        })
        return _obj


