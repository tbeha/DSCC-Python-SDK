# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.app_key_value import AppKeyValue
from typing import Optional, Set
from typing_extensions import Self

class CreateApplicationServer(BaseModel):
    """
    Create Nimble application server input.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Text description of application server. String of up to 255 printable ASCII characters. Defaults to the empty string.")
    hostname: StrictStr = Field(description="Application server hostname. String of alphanumeric characters, valid range is from 2 to 255; Each label must be between 1 and 63 characters long; Hypen and  colon are allowed after the first and before the last character.")
    metadata: Optional[List[Optional[AppKeyValue]]] = Field(default=None, description="Key-value pairs that augment an application server's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed. Defaults to an empty array.")
    name: StrictStr = Field(description="Name of the volume. String of up to 64 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period.")
    password: Optional[StrictStr] = Field(default=None, description="Application server password. A password with few constraints. A string of up to 255 characters.")
    port: Optional[StrictInt] = Field(default=None, description="Application server port number. Positive integer value up to 65535 representing TCP/IP port. Defaults to 65536.")
    server_type: Optional[StrictStr] = Field(default=None, description="Application server type. Defaults to 'vmware'. Possible values are 'vss' and 'vmware'.")
    username: Optional[StrictStr] = Field(default=None, description="Application server username. String of up to 255 printable ASCII characters.")
    __properties: ClassVar[List[str]] = ["description", "hostname", "metadata", "name", "password", "port", "server_type", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateApplicationServer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item in self.metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metadata'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if port (nullable) is None
        # and model_fields_set contains the field
        if self.port is None and "port" in self.model_fields_set:
            _dict['port'] = None

        # set to None if server_type (nullable) is None
        # and model_fields_set contains the field
        if self.server_type is None and "server_type" in self.model_fields_set:
            _dict['server_type'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateApplicationServer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "hostname": obj.get("hostname"),
            "metadata": [AppKeyValue.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "name": obj.get("name"),
            "password": obj.get("password"),
            "port": obj.get("port"),
            "server_type": obj.get("server_type"),
            "username": obj.get("username")
        })
        return _obj


