# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.device_type4_failover_params import DeviceType4FailoverParams
from dscc.models.device_type4_override_params import DeviceType4OverrideParams
from dscc.models.device_type4_recover_params import DeviceType4RecoverParams
from dscc.models.device_type4_restore_params import DeviceType4RestoreParams
from dscc.models.device_type4_reverse_params import DeviceType4ReverseParams
from dscc.models.device_type4_start_params import DeviceType4StartParams
from dscc.models.device_type4_stop_params import DeviceType4StopParams
from dscc.models.device_type4_switch_over_params import DeviceType4SwitchOverParams
from dscc.models.device_type4_sync_params import DeviceType4SyncParams
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4RemoteProtectionActionsInputParams(BaseModel):
    """
    DeviceType4RemoteProtectionActionsInputParams
    """ # noqa: E501
    failover_action_params: Optional[DeviceType4FailoverParams] = Field(default=None, alias="failoverActionParams")
    override_action_params: Optional[DeviceType4OverrideParams] = Field(default=None, alias="overrideActionParams")
    recover_action_params: Optional[DeviceType4RecoverParams] = Field(default=None, alias="recoverActionParams")
    restore_action_params: Optional[DeviceType4RestoreParams] = Field(default=None, alias="restoreActionParams")
    reverse_action_params: Optional[DeviceType4ReverseParams] = Field(default=None, alias="reverseActionParams")
    start_action_params: Optional[DeviceType4StartParams] = Field(default=None, alias="startActionParams")
    stop_action_params: Optional[DeviceType4StopParams] = Field(default=None, alias="stopActionParams")
    switchover_action_params: Optional[DeviceType4SwitchOverParams] = Field(default=None, alias="switchoverActionParams")
    sync_action_params: Optional[DeviceType4SyncParams] = Field(default=None, alias="syncActionParams")
    __properties: ClassVar[List[str]] = ["failoverActionParams", "overrideActionParams", "recoverActionParams", "restoreActionParams", "reverseActionParams", "startActionParams", "stopActionParams", "switchoverActionParams", "syncActionParams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4RemoteProtectionActionsInputParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of failover_action_params
        if self.failover_action_params:
            _dict['failoverActionParams'] = self.failover_action_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of override_action_params
        if self.override_action_params:
            _dict['overrideActionParams'] = self.override_action_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recover_action_params
        if self.recover_action_params:
            _dict['recoverActionParams'] = self.recover_action_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restore_action_params
        if self.restore_action_params:
            _dict['restoreActionParams'] = self.restore_action_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reverse_action_params
        if self.reverse_action_params:
            _dict['reverseActionParams'] = self.reverse_action_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_action_params
        if self.start_action_params:
            _dict['startActionParams'] = self.start_action_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stop_action_params
        if self.stop_action_params:
            _dict['stopActionParams'] = self.stop_action_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of switchover_action_params
        if self.switchover_action_params:
            _dict['switchoverActionParams'] = self.switchover_action_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sync_action_params
        if self.sync_action_params:
            _dict['syncActionParams'] = self.sync_action_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4RemoteProtectionActionsInputParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "failoverActionParams": DeviceType4FailoverParams.from_dict(obj["failoverActionParams"]) if obj.get("failoverActionParams") is not None else None,
            "overrideActionParams": DeviceType4OverrideParams.from_dict(obj["overrideActionParams"]) if obj.get("overrideActionParams") is not None else None,
            "recoverActionParams": DeviceType4RecoverParams.from_dict(obj["recoverActionParams"]) if obj.get("recoverActionParams") is not None else None,
            "restoreActionParams": DeviceType4RestoreParams.from_dict(obj["restoreActionParams"]) if obj.get("restoreActionParams") is not None else None,
            "reverseActionParams": DeviceType4ReverseParams.from_dict(obj["reverseActionParams"]) if obj.get("reverseActionParams") is not None else None,
            "startActionParams": DeviceType4StartParams.from_dict(obj["startActionParams"]) if obj.get("startActionParams") is not None else None,
            "stopActionParams": DeviceType4StopParams.from_dict(obj["stopActionParams"]) if obj.get("stopActionParams") is not None else None,
            "switchoverActionParams": DeviceType4SwitchOverParams.from_dict(obj["switchoverActionParams"]) if obj.get("switchoverActionParams") is not None else None,
            "syncActionParams": DeviceType4SyncParams.from_dict(obj["syncActionParams"]) if obj.get("syncActionParams") is not None else None
        })
        return _obj


