# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4ReplicationPartnerListPolicies(BaseModel):
    """
    The policy assigned to the replication partner remote group.
    """ # noqa: E501
    active_active: Optional[StrictBool] = Field(default=None, description="Specifies active active policy of the group.", alias="activeActive")
    auto_failover: Optional[StrictBool] = Field(default=None, description="Automatic failover on a group.", alias="autoFailover")
    auto_recover: Optional[StrictBool] = Field(default=None, description="If the group is stopped as a result of links going down, the group can be automatically restarted after the links come back up.", alias="autoRecover")
    auto_synchronize: Optional[StrictBool] = Field(default=None, description="Specifies auto synchronization of the group.", alias="autoSynchronize")
    multi_target_peer_persistence: Optional[StrictBool] = Field(default=None, description="Specifies that the group is participating in a Multi-target Peer Persistence configuration. The group must have two targets, one of which must be synchronous.The synchronous group target also requires pathManagement and auto Fail over policy settings.", alias="multiTargetPeerPersistence")
    over_period_alert: Optional[StrictBool] = Field(default=None, description="If synchronization of an asynchronous periodic group takes longer to complete than its synchronization period, an alert is generated.", alias="overPeriodAlert")
    path_management: Optional[StrictBool] = Field(default=None, description="Path management on a group.", alias="pathManagement")
    __properties: ClassVar[List[str]] = ["activeActive", "autoFailover", "autoRecover", "autoSynchronize", "multiTargetPeerPersistence", "overPeriodAlert", "pathManagement"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4ReplicationPartnerListPolicies from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if active_active (nullable) is None
        # and model_fields_set contains the field
        if self.active_active is None and "active_active" in self.model_fields_set:
            _dict['activeActive'] = None

        # set to None if auto_failover (nullable) is None
        # and model_fields_set contains the field
        if self.auto_failover is None and "auto_failover" in self.model_fields_set:
            _dict['autoFailover'] = None

        # set to None if auto_recover (nullable) is None
        # and model_fields_set contains the field
        if self.auto_recover is None and "auto_recover" in self.model_fields_set:
            _dict['autoRecover'] = None

        # set to None if auto_synchronize (nullable) is None
        # and model_fields_set contains the field
        if self.auto_synchronize is None and "auto_synchronize" in self.model_fields_set:
            _dict['autoSynchronize'] = None

        # set to None if multi_target_peer_persistence (nullable) is None
        # and model_fields_set contains the field
        if self.multi_target_peer_persistence is None and "multi_target_peer_persistence" in self.model_fields_set:
            _dict['multiTargetPeerPersistence'] = None

        # set to None if over_period_alert (nullable) is None
        # and model_fields_set contains the field
        if self.over_period_alert is None and "over_period_alert" in self.model_fields_set:
            _dict['overPeriodAlert'] = None

        # set to None if path_management (nullable) is None
        # and model_fields_set contains the field
        if self.path_management is None and "path_management" in self.model_fields_set:
            _dict['pathManagement'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4ReplicationPartnerListPolicies from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeActive": obj.get("activeActive"),
            "autoFailover": obj.get("autoFailover"),
            "autoRecover": obj.get("autoRecover"),
            "autoSynchronize": obj.get("autoSynchronize"),
            "multiTargetPeerPersistence": obj.get("multiTargetPeerPersistence"),
            "overPeriodAlert": obj.get("overPeriodAlert"),
            "pathManagement": obj.get("pathManagement")
        })
        return _obj


