# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.common_resource_attributesfleet import CommonResourceAttributesfleet
from typing import Optional, Set
from typing_extensions import Self

class FleetVolumeset(BaseModel):
    """
    FleetVolumeset
    """ # noqa: E501
    app_type: Optional[StrictStr] = Field(default=None, description="Application name `Filter`", alias="appType")
    application: Optional[StrictStr] = Field(default=None, description="Application name")
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    common_resource_attributes: Optional[CommonResourceAttributesfleet] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    generation: Optional[StrictInt] = Field(default=None, description="generation `Filter, Sort`")
    health_state: Optional[StrictStr] = Field(default=None, description="health state", alias="healthState")
    host_written_capacity_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Host written capacity in MiB", alias="hostWrittenCapacityMiB")
    id: Optional[StrictStr] = Field(default=None, description="id of the volume set `Filter`")
    intrinsic_resource: Optional[StrictStr] = Field(default=None, description="Intrinsic resource type", alias="intrinsicResource")
    iops: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="IOPS")
    is_internal: Optional[StrictBool] = Field(default=None, description="Is an internal resource", alias="isInternal")
    latency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latency")
    location: Optional[StrictStr] = Field(default=None, description="location")
    members: Optional[List[StrictStr]] = Field(default=None, description="Members of the volume set. This field is deprecated.")
    name: Optional[StrictStr] = Field(default=None, description="name of volume-set `Filter, Sort`")
    product_family: Optional[StrictStr] = Field(default=None, description="Product Family", alias="productFamily")
    provisioned_size_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Provisioned size in MiB", alias="provisionedSizeMiB")
    resource_uri: Optional[StrictStr] = Field(default=None, description="resourceUri for detailed volume object", alias="resourceUri")
    size_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Size in MiB", alias="sizeMiB")
    space_warning: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Space warning set for the resource", alias="spaceWarning")
    sub_type: Optional[StrictStr] = Field(default=None, description="subType", alias="subType")
    system_id: Optional[StrictStr] = Field(default=None, description="system ID. `Filter, Sort`", alias="systemId")
    thin_savings: Optional[StrictStr] = Field(default=None, description="ThinSavings", alias="thinSavings")
    through_put: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="ThroughPut for the resource", alias="throughPut")
    total_reserved_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total reserved MiB for the resource", alias="totalReservedMiB")
    type: Optional[StrictStr] = Field(default=None, description="type")
    used_capacity_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Used capacity percentage", alias="usedCapacityPercent")
    used_size_mi_b: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Used size in MiB", alias="usedSizeMiB")
    volume_set_id: Optional[StrictStr] = Field(default=None, description="UID of the volume set Id", alias="volumeSetId")
    volume_type: Optional[StrictStr] = Field(default=None, description="Type of volume", alias="volumeType")
    wwn: Optional[StrictStr] = Field(default=None, description="wwn of the volume")
    __properties: ClassVar[List[str]] = ["appType", "application", "associatedLinks", "commonResourceAttributes", "consoleUri", "customerId", "generation", "healthState", "hostWrittenCapacityMiB", "id", "intrinsicResource", "iops", "isInternal", "latency", "location", "members", "name", "productFamily", "provisionedSizeMiB", "resourceUri", "sizeMiB", "spaceWarning", "subType", "systemId", "thinSavings", "throughPut", "totalReservedMiB", "type", "usedCapacityPercent", "usedSizeMiB", "volumeSetId", "volumeType", "wwn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FleetVolumeset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # set to None if app_type (nullable) is None
        # and model_fields_set contains the field
        if self.app_type is None and "app_type" in self.model_fields_set:
            _dict['appType'] = None

        # set to None if application (nullable) is None
        # and model_fields_set contains the field
        if self.application is None and "application" in self.model_fields_set:
            _dict['application'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if health_state (nullable) is None
        # and model_fields_set contains the field
        if self.health_state is None and "health_state" in self.model_fields_set:
            _dict['healthState'] = None

        # set to None if host_written_capacity_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.host_written_capacity_mi_b is None and "host_written_capacity_mi_b" in self.model_fields_set:
            _dict['hostWrittenCapacityMiB'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if intrinsic_resource (nullable) is None
        # and model_fields_set contains the field
        if self.intrinsic_resource is None and "intrinsic_resource" in self.model_fields_set:
            _dict['intrinsicResource'] = None

        # set to None if iops (nullable) is None
        # and model_fields_set contains the field
        if self.iops is None and "iops" in self.model_fields_set:
            _dict['iops'] = None

        # set to None if is_internal (nullable) is None
        # and model_fields_set contains the field
        if self.is_internal is None and "is_internal" in self.model_fields_set:
            _dict['isInternal'] = None

        # set to None if latency (nullable) is None
        # and model_fields_set contains the field
        if self.latency is None and "latency" in self.model_fields_set:
            _dict['latency'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if product_family (nullable) is None
        # and model_fields_set contains the field
        if self.product_family is None and "product_family" in self.model_fields_set:
            _dict['productFamily'] = None

        # set to None if provisioned_size_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.provisioned_size_mi_b is None and "provisioned_size_mi_b" in self.model_fields_set:
            _dict['provisionedSizeMiB'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if size_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.size_mi_b is None and "size_mi_b" in self.model_fields_set:
            _dict['sizeMiB'] = None

        # set to None if space_warning (nullable) is None
        # and model_fields_set contains the field
        if self.space_warning is None and "space_warning" in self.model_fields_set:
            _dict['spaceWarning'] = None

        # set to None if sub_type (nullable) is None
        # and model_fields_set contains the field
        if self.sub_type is None and "sub_type" in self.model_fields_set:
            _dict['subType'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if thin_savings (nullable) is None
        # and model_fields_set contains the field
        if self.thin_savings is None and "thin_savings" in self.model_fields_set:
            _dict['thinSavings'] = None

        # set to None if through_put (nullable) is None
        # and model_fields_set contains the field
        if self.through_put is None and "through_put" in self.model_fields_set:
            _dict['throughPut'] = None

        # set to None if total_reserved_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.total_reserved_mi_b is None and "total_reserved_mi_b" in self.model_fields_set:
            _dict['totalReservedMiB'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if used_capacity_percent (nullable) is None
        # and model_fields_set contains the field
        if self.used_capacity_percent is None and "used_capacity_percent" in self.model_fields_set:
            _dict['usedCapacityPercent'] = None

        # set to None if used_size_mi_b (nullable) is None
        # and model_fields_set contains the field
        if self.used_size_mi_b is None and "used_size_mi_b" in self.model_fields_set:
            _dict['usedSizeMiB'] = None

        # set to None if volume_set_id (nullable) is None
        # and model_fields_set contains the field
        if self.volume_set_id is None and "volume_set_id" in self.model_fields_set:
            _dict['volumeSetId'] = None

        # set to None if volume_type (nullable) is None
        # and model_fields_set contains the field
        if self.volume_type is None and "volume_type" in self.model_fields_set:
            _dict['volumeType'] = None

        # set to None if wwn (nullable) is None
        # and model_fields_set contains the field
        if self.wwn is None and "wwn" in self.model_fields_set:
            _dict['wwn'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FleetVolumeset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appType": obj.get("appType"),
            "application": obj.get("application"),
            "associatedLinks": [AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "commonResourceAttributes": CommonResourceAttributesfleet.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "customerId": obj.get("customerId"),
            "generation": obj.get("generation"),
            "healthState": obj.get("healthState"),
            "hostWrittenCapacityMiB": obj.get("hostWrittenCapacityMiB"),
            "id": obj.get("id"),
            "intrinsicResource": obj.get("intrinsicResource"),
            "iops": obj.get("iops"),
            "isInternal": obj.get("isInternal"),
            "latency": obj.get("latency"),
            "location": obj.get("location"),
            "members": obj.get("members"),
            "name": obj.get("name"),
            "productFamily": obj.get("productFamily"),
            "provisionedSizeMiB": obj.get("provisionedSizeMiB"),
            "resourceUri": obj.get("resourceUri"),
            "sizeMiB": obj.get("sizeMiB"),
            "spaceWarning": obj.get("spaceWarning"),
            "subType": obj.get("subType"),
            "systemId": obj.get("systemId"),
            "thinSavings": obj.get("thinSavings"),
            "throughPut": obj.get("throughPut"),
            "totalReservedMiB": obj.get("totalReservedMiB"),
            "type": obj.get("type"),
            "usedCapacityPercent": obj.get("usedCapacityPercent"),
            "usedSizeMiB": obj.get("usedSizeMiB"),
            "volumeSetId": obj.get("volumeSetId"),
            "volumeType": obj.get("volumeType"),
            "wwn": obj.get("wwn")
        })
        return _obj


