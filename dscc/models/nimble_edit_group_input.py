# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleEditGroupInput(BaseModel):
    """
    NimbleEditGroupInput
    """ # noqa: E501
    auto_switchover_enabled: Optional[StrictBool] = Field(default=None, description="Whether automatic switchover of Group management services feature is enabled.")
    autoclean_unmanaged_snapshots_enabled: Optional[StrictBool] = Field(default=None, description="Whether auto-clean unmanaged snapshots feature is enabled.")
    autoclean_unmanaged_snapshots_ttl_unit: Optional[StrictInt] = Field(default=None, description="Unit for unmanaged snapshot time to live.")
    cc_mode_enabled: Optional[StrictBool] = Field(default=None, description="Enable or disable Common Criteria mode.")
    var_date: Optional[StrictInt] = Field(default=None, description="Unix epoch time local to the group. Seconds since last epoch i.e. 00:00 January 1, 1970. Setting this along with ntp_server causes ntp_server to be reset.", alias="date")
    default_iscsi_target_scope: Optional[StrictStr] = Field(default=None, description="Newly created volumes are exported under iSCSI Group Target or iSCSI Volume Target.")
    group_snapshot_ttl: Optional[StrictInt] = Field(default=None, description="Snapshot Time-to-live(TTL) configured at group level for automatic deletion of unmanaged snapshots. Value 0 indicates unlimited TTL.")
    group_target_name: Optional[StrictStr] = Field(default=None, description="Iscsi target name for this group. Plain string.")
    max_lock_period: Optional[StrictInt] = Field(default=None, description="Maximum seconds to keep any snapshot as immutable within a Nimble group. Default value would be 1209600 seconds.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the group. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    ntp_server: Optional[StrictStr] = Field(default=None, description="Either IP address or hostname of the NTP server for this group.")
    tdz_enabled: Optional[StrictBool] = Field(default=None, description="Is Target Driven Zoning (TDZ) enabled on this group.")
    tdz_prefix: Optional[StrictStr] = Field(default=None, description="Target Driven Zoning (TDZ) prefix for peer zones created by TDZ.")
    timezone: Optional[StrictStr] = Field(default=None, description="Timezone in which this group is located. Plain string.")
    tlsv1_enabled: Optional[StrictBool] = Field(default=None, description="Enable or disable TLSv1.0 and TLSv1.1.")
    __properties: ClassVar[List[str]] = ["auto_switchover_enabled", "autoclean_unmanaged_snapshots_enabled", "autoclean_unmanaged_snapshots_ttl_unit", "cc_mode_enabled", "date", "default_iscsi_target_scope", "group_snapshot_ttl", "group_target_name", "max_lock_period", "name", "ntp_server", "tdz_enabled", "tdz_prefix", "timezone", "tlsv1_enabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleEditGroupInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if auto_switchover_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.auto_switchover_enabled is None and "auto_switchover_enabled" in self.model_fields_set:
            _dict['auto_switchover_enabled'] = None

        # set to None if autoclean_unmanaged_snapshots_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.autoclean_unmanaged_snapshots_enabled is None and "autoclean_unmanaged_snapshots_enabled" in self.model_fields_set:
            _dict['autoclean_unmanaged_snapshots_enabled'] = None

        # set to None if autoclean_unmanaged_snapshots_ttl_unit (nullable) is None
        # and model_fields_set contains the field
        if self.autoclean_unmanaged_snapshots_ttl_unit is None and "autoclean_unmanaged_snapshots_ttl_unit" in self.model_fields_set:
            _dict['autoclean_unmanaged_snapshots_ttl_unit'] = None

        # set to None if cc_mode_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.cc_mode_enabled is None and "cc_mode_enabled" in self.model_fields_set:
            _dict['cc_mode_enabled'] = None

        # set to None if var_date (nullable) is None
        # and model_fields_set contains the field
        if self.var_date is None and "var_date" in self.model_fields_set:
            _dict['date'] = None

        # set to None if default_iscsi_target_scope (nullable) is None
        # and model_fields_set contains the field
        if self.default_iscsi_target_scope is None and "default_iscsi_target_scope" in self.model_fields_set:
            _dict['default_iscsi_target_scope'] = None

        # set to None if group_snapshot_ttl (nullable) is None
        # and model_fields_set contains the field
        if self.group_snapshot_ttl is None and "group_snapshot_ttl" in self.model_fields_set:
            _dict['group_snapshot_ttl'] = None

        # set to None if group_target_name (nullable) is None
        # and model_fields_set contains the field
        if self.group_target_name is None and "group_target_name" in self.model_fields_set:
            _dict['group_target_name'] = None

        # set to None if max_lock_period (nullable) is None
        # and model_fields_set contains the field
        if self.max_lock_period is None and "max_lock_period" in self.model_fields_set:
            _dict['max_lock_period'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if ntp_server (nullable) is None
        # and model_fields_set contains the field
        if self.ntp_server is None and "ntp_server" in self.model_fields_set:
            _dict['ntp_server'] = None

        # set to None if tdz_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.tdz_enabled is None and "tdz_enabled" in self.model_fields_set:
            _dict['tdz_enabled'] = None

        # set to None if tdz_prefix (nullable) is None
        # and model_fields_set contains the field
        if self.tdz_prefix is None and "tdz_prefix" in self.model_fields_set:
            _dict['tdz_prefix'] = None

        # set to None if timezone (nullable) is None
        # and model_fields_set contains the field
        if self.timezone is None and "timezone" in self.model_fields_set:
            _dict['timezone'] = None

        # set to None if tlsv1_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.tlsv1_enabled is None and "tlsv1_enabled" in self.model_fields_set:
            _dict['tlsv1_enabled'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleEditGroupInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auto_switchover_enabled": obj.get("auto_switchover_enabled"),
            "autoclean_unmanaged_snapshots_enabled": obj.get("autoclean_unmanaged_snapshots_enabled"),
            "autoclean_unmanaged_snapshots_ttl_unit": obj.get("autoclean_unmanaged_snapshots_ttl_unit"),
            "cc_mode_enabled": obj.get("cc_mode_enabled"),
            "date": obj.get("date"),
            "default_iscsi_target_scope": obj.get("default_iscsi_target_scope"),
            "group_snapshot_ttl": obj.get("group_snapshot_ttl"),
            "group_target_name": obj.get("group_target_name"),
            "max_lock_period": obj.get("max_lock_period"),
            "name": obj.get("name"),
            "ntp_server": obj.get("ntp_server"),
            "tdz_enabled": obj.get("tdz_enabled"),
            "tdz_prefix": obj.get("tdz_prefix"),
            "timezone": obj.get("timezone"),
            "tlsv1_enabled": obj.get("tlsv1_enabled")
        })
        return _obj


