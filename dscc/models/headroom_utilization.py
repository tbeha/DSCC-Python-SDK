# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.headroom_data import HeadroomData
from dscc.models.headroom_utilization_average_headroom_utilization_data import HeadroomUtilizationAverageHeadroomUtilizationData
from typing import Optional, Set
from typing_extensions import Self

class HeadroomUtilization(BaseModel):
    """
    headroom-utilization response structure
    """ # noqa: E501
    average_headroom_utilization_data: Optional[HeadroomUtilizationAverageHeadroomUtilizationData] = Field(default=None, alias="averageHeadroomUtilizationData")
    customer_id: Optional[StrictStr] = Field(default=None, description="CustomerId", alias="customerId")
    end_time: Optional[StrictInt] = Field(default=None, description="End time of the interval for which headroom-utilization are calculated", alias="endTime")
    granularity_in_min: Optional[StrictInt] = Field(default=None, description="Time interval granularity in minutes", alias="granularityInMin")
    headroom_utilization_data: Optional[List[Optional[HeadroomData]]] = Field(default=None, alias="headroomUtilizationData")
    request_uri: Optional[StrictStr] = Field(default=None, description="requestUri for headroom-utilization ", alias="requestUri")
    start_time: Optional[StrictInt] = Field(default=None, description="Start time of the interval for which headroom-utilization are calculated", alias="startTime")
    __properties: ClassVar[List[str]] = ["averageHeadroomUtilizationData", "customerId", "endTime", "granularityInMin", "headroomUtilizationData", "requestUri", "startTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HeadroomUtilization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of average_headroom_utilization_data
        if self.average_headroom_utilization_data:
            _dict['averageHeadroomUtilizationData'] = self.average_headroom_utilization_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in headroom_utilization_data (list)
        _items = []
        if self.headroom_utilization_data:
            for _item in self.headroom_utilization_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['headroomUtilizationData'] = _items
        # set to None if headroom_utilization_data (nullable) is None
        # and model_fields_set contains the field
        if self.headroom_utilization_data is None and "headroom_utilization_data" in self.model_fields_set:
            _dict['headroomUtilizationData'] = None

        # set to None if request_uri (nullable) is None
        # and model_fields_set contains the field
        if self.request_uri is None and "request_uri" in self.model_fields_set:
            _dict['requestUri'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HeadroomUtilization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "averageHeadroomUtilizationData": HeadroomUtilizationAverageHeadroomUtilizationData.from_dict(obj["averageHeadroomUtilizationData"]) if obj.get("averageHeadroomUtilizationData") is not None else None,
            "customerId": obj.get("customerId"),
            "endTime": obj.get("endTime"),
            "granularityInMin": obj.get("granularityInMin"),
            "headroomUtilizationData": [HeadroomData.from_dict(_item) for _item in obj["headroomUtilizationData"]] if obj.get("headroomUtilizationData") is not None else None,
            "requestUri": obj.get("requestUri"),
            "startTime": obj.get("startTime")
        })
        return _obj


