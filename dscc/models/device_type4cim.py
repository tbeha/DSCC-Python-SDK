# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4cim(BaseModel):
    """
    CIM service details for a device
    """ # noqa: E501
    cim_policy: Optional[StrictStr] = Field(default=None, description="Specifies the CIM Policy of CIM server", alias="cimPolicy")
    cim_state: Optional[StrictStr] = Field(default=None, description="Specifies whether CIM state is active or inactive", alias="cimState")
    cim_version: Optional[StrictStr] = Field(default=None, description="CIM version information", alias="cimVersion")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    customer_id: Optional[StrictStr] = Field(default=None, description="The customer application identifier", alias="customerId")
    generation: Optional[StrictInt] = Field(default=None, description="A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.")
    http_port: Optional[StrictInt] = Field(default=None, description="HTTP port number", alias="httpPort")
    http_state: Optional[StrictBool] = Field(default=None, description="Specifies whether HTTPState is enabled or disabled for CIM Server", alias="httpState")
    https_port: Optional[StrictInt] = Field(default=None, description="Specifies HTTPS port number", alias="httpsPort")
    https_state: Optional[StrictBool] = Field(default=None, description="Specifies whether HTTPS state is enabled or disabled for cim server", alias="httpsState")
    id: Optional[StrictStr] = Field(default=None, description="Unique Identifier of the resource")
    pg_version: Optional[StrictStr] = Field(default=None, description="Information about PGVersion of CIM server", alias="pgVersion")
    service_state: Optional[StrictBool] = Field(default=None, description="Specifies whether service state is enabled or disabled", alias="serviceState")
    slp_port: Optional[StrictInt] = Field(default=None, description="SLPport specification", alias="slpPort")
    slp_state: Optional[StrictBool] = Field(default=None, description="whether slpstate is enabled or disabled", alias="slpState")
    system_id: Optional[StrictStr] = Field(default=None, description="SystemId of the storage system", alias="systemId")
    system_wwn: Optional[StrictStr] = Field(default=None, description="WWN of the array", alias="systemWWN")
    type: Optional[StrictStr] = Field(default=None, description="The type of resource.")
    __properties: ClassVar[List[str]] = ["cimPolicy", "cimState", "cimVersion", "consoleUri", "customerId", "generation", "httpPort", "httpState", "httpsPort", "httpsState", "id", "pgVersion", "serviceState", "slpPort", "slpState", "systemId", "systemWWN", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4cim from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cim_policy (nullable) is None
        # and model_fields_set contains the field
        if self.cim_policy is None and "cim_policy" in self.model_fields_set:
            _dict['cimPolicy'] = None

        # set to None if cim_state (nullable) is None
        # and model_fields_set contains the field
        if self.cim_state is None and "cim_state" in self.model_fields_set:
            _dict['cimState'] = None

        # set to None if cim_version (nullable) is None
        # and model_fields_set contains the field
        if self.cim_version is None and "cim_version" in self.model_fields_set:
            _dict['cimVersion'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if http_port (nullable) is None
        # and model_fields_set contains the field
        if self.http_port is None and "http_port" in self.model_fields_set:
            _dict['httpPort'] = None

        # set to None if http_state (nullable) is None
        # and model_fields_set contains the field
        if self.http_state is None and "http_state" in self.model_fields_set:
            _dict['httpState'] = None

        # set to None if https_port (nullable) is None
        # and model_fields_set contains the field
        if self.https_port is None and "https_port" in self.model_fields_set:
            _dict['httpsPort'] = None

        # set to None if https_state (nullable) is None
        # and model_fields_set contains the field
        if self.https_state is None and "https_state" in self.model_fields_set:
            _dict['httpsState'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if pg_version (nullable) is None
        # and model_fields_set contains the field
        if self.pg_version is None and "pg_version" in self.model_fields_set:
            _dict['pgVersion'] = None

        # set to None if service_state (nullable) is None
        # and model_fields_set contains the field
        if self.service_state is None and "service_state" in self.model_fields_set:
            _dict['serviceState'] = None

        # set to None if slp_port (nullable) is None
        # and model_fields_set contains the field
        if self.slp_port is None and "slp_port" in self.model_fields_set:
            _dict['slpPort'] = None

        # set to None if slp_state (nullable) is None
        # and model_fields_set contains the field
        if self.slp_state is None and "slp_state" in self.model_fields_set:
            _dict['slpState'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if system_wwn (nullable) is None
        # and model_fields_set contains the field
        if self.system_wwn is None and "system_wwn" in self.model_fields_set:
            _dict['systemWWN'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4cim from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cimPolicy": obj.get("cimPolicy"),
            "cimState": obj.get("cimState"),
            "cimVersion": obj.get("cimVersion"),
            "consoleUri": obj.get("consoleUri"),
            "customerId": obj.get("customerId"),
            "generation": obj.get("generation"),
            "httpPort": obj.get("httpPort"),
            "httpState": obj.get("httpState"),
            "httpsPort": obj.get("httpsPort"),
            "httpsState": obj.get("httpsState"),
            "id": obj.get("id"),
            "pgVersion": obj.get("pgVersion"),
            "serviceState": obj.get("serviceState"),
            "slpPort": obj.get("slpPort"),
            "slpState": obj.get("slpState"),
            "systemId": obj.get("systemId"),
            "systemWWN": obj.get("systemWWN"),
            "type": obj.get("type")
        })
        return _obj


