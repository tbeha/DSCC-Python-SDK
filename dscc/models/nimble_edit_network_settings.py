# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.nimble_edit_array_net import NimbleEditArrayNet
from dscc.models.nimble_route import NimbleRoute
from dscc.models.nimble_subnet import NimbleSubnet
from typing import Optional, Set
from typing_extensions import Self

class NimbleEditNetworkSettings(BaseModel):
    """
    Edit Nimble network-settings input.
    """ # noqa: E501
    array_list: Optional[List[Optional[NimbleEditArrayNet]]] = Field(default=None, description="List of array network configs.")
    iscsi_automatic_connection_method: Optional[StrictBool] = Field(default=None, description="Enable automatic connection method. Enabling this means means redirecting connections from the specified iSCSI discovery IP to the best data IP based on connection counts.")
    iscsi_connection_rebalancing: Optional[StrictBool] = Field(default=None, description="Enable connection rebalancing. Enabling this means rebalancing iSCSI connections by periodically breaking existing connections that are out-of-balance, allowing the host to reconnect to a more appropriate data IP.")
    mgmt_ip: Optional[StrictStr] = Field(default=None, description="Management IP for the Group. Four numbers in the range [0,255] separated by periods.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the network configuration. Use the name 'draft' when creating a draft configuration. Possible values are 'active', 'backup' and 'draft'.")
    route_list: Optional[List[Optional[NimbleRoute]]] = Field(default=None, description="List of static routes.")
    secondary_mgmt_ip: Optional[StrictStr] = Field(default=None, description="Secondary management IP address for the Group. Four numbers in the range [0,255] separated by periods.")
    subnet_list: Optional[List[Optional[NimbleSubnet]]] = Field(default=None, description="List of subnet configs.")
    __properties: ClassVar[List[str]] = ["array_list", "iscsi_automatic_connection_method", "iscsi_connection_rebalancing", "mgmt_ip", "name", "route_list", "secondary_mgmt_ip", "subnet_list"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleEditNetworkSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in array_list (list)
        _items = []
        if self.array_list:
            for _item in self.array_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['array_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in route_list (list)
        _items = []
        if self.route_list:
            for _item in self.route_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['route_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subnet_list (list)
        _items = []
        if self.subnet_list:
            for _item in self.subnet_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subnet_list'] = _items
        # set to None if secondary_mgmt_ip (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_mgmt_ip is None and "secondary_mgmt_ip" in self.model_fields_set:
            _dict['secondary_mgmt_ip'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleEditNetworkSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "array_list": [NimbleEditArrayNet.from_dict(_item) for _item in obj["array_list"]] if obj.get("array_list") is not None else None,
            "iscsi_automatic_connection_method": obj.get("iscsi_automatic_connection_method"),
            "iscsi_connection_rebalancing": obj.get("iscsi_connection_rebalancing"),
            "mgmt_ip": obj.get("mgmt_ip"),
            "name": obj.get("name"),
            "route_list": [NimbleRoute.from_dict(_item) for _item in obj["route_list"]] if obj.get("route_list") is not None else None,
            "secondary_mgmt_ip": obj.get("secondary_mgmt_ip"),
            "subnet_list": [NimbleSubnet.from_dict(_item) for _item in obj["subnet_list"]] if obj.get("subnet_list") is not None else None
        })
        return _obj


