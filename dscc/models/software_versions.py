# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.software_versions_components_inner import SoftwareVersionsComponentsInner
from typing import Optional, Set
from typing_extensions import Self

class SoftwareVersions(BaseModel):
    """
    Software versions of the product
    """ # noqa: E501
    base_version: Optional[StrictStr] = Field(default=None, description="Base Version `Filter`", alias="baseVersion")
    components: Optional[List[Optional[SoftwareVersionsComponentsInner]]] = None
    full_version: Optional[StrictStr] = Field(default=None, description="Full Version", alias="fullVersion")
    patches: Optional[StrictStr] = Field(default=None, description="Set of Patches `Filter`")
    release: Optional[StrictStr] = Field(default=None, description="Release Version")
    __properties: ClassVar[List[str]] = ["baseVersion", "components", "fullVersion", "patches", "release"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwareVersions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in components (list)
        _items = []
        if self.components:
            for _item in self.components:
                if _item:
                    _items.append(_item.to_dict())
            _dict['components'] = _items
        # set to None if base_version (nullable) is None
        # and model_fields_set contains the field
        if self.base_version is None and "base_version" in self.model_fields_set:
            _dict['baseVersion'] = None

        # set to None if components (nullable) is None
        # and model_fields_set contains the field
        if self.components is None and "components" in self.model_fields_set:
            _dict['components'] = None

        # set to None if full_version (nullable) is None
        # and model_fields_set contains the field
        if self.full_version is None and "full_version" in self.model_fields_set:
            _dict['fullVersion'] = None

        # set to None if patches (nullable) is None
        # and model_fields_set contains the field
        if self.patches is None and "patches" in self.model_fields_set:
            _dict['patches'] = None

        # set to None if release (nullable) is None
        # and model_fields_set contains the field
        if self.release is None and "release" in self.model_fields_set:
            _dict['release'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwareVersions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseVersion": obj.get("baseVersion"),
            "components": [SoftwareVersionsComponentsInner.from_dict(_item) for _item in obj["components"]] if obj.get("components") is not None else None,
            "fullVersion": obj.get("fullVersion"),
            "patches": obj.get("patches"),
            "release": obj.get("release")
        })
        return _obj


