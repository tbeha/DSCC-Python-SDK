# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.custom_app import CustomApp
from dscc.models.nimble_create_volumes_workflow_input_protection_policy_schedules_inner import NimbleCreateVolumesWorkflowInputProtectionPolicySchedulesInner
from dscc.models.nimble_host_group_details import NimbleHostGroupDetails
from typing import Optional, Set
from typing_extensions import Self

class NimbleCreateVolumesWorkflowInput(BaseModel):
    """
    Request body for create volume workflow
    """ # noqa: E501
    agent_type: Optional[StrictStr] = Field(default=None, description="External management agent type. Defaults to 'none'. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'")
    app_uuid: Optional[StrictStr] = Field(default=None, description="Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed. Defaults to the empty string. ")
    count: StrictInt = Field(description="Number of volumes to be created.")
    dedupe_enabled: Optional[StrictBool] = Field(default=None, description="Indicate whether dedupe is enabled. Defaults to 'false'.")
    downstream_partner: Optional[StrictStr] = Field(default=None, description="Name of the downstream partner", alias="downstreamPartner")
    downstream_partner_id: Optional[StrictStr] = Field(default=None, description="ID of the downstream partner", alias="downstreamPartnerId")
    folder_id: Optional[StrictStr] = Field(default=None, description="ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal int64 or the empty string. Defaults to the empty string.")
    host_groups: Optional[List[Optional[NimbleHostGroupDetails]]] = Field(default=None, description="List of host group details.")
    limit: Optional[StrictInt] = Field(default=None, description="Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100. Defaults to the default volume limit set on group, typically 100.")
    limit_iops: Optional[StrictInt] = Field(default=None, description="IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). By default the volume is created with unlimited iops.")
    limit_mbps: Optional[StrictInt] = Field(default=None, description="Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). By default, the volume is created with unlimited throughput.")
    name: StrictStr = Field(description="Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.")
    perfpolicy: Optional[CustomApp] = None
    perfpolicy_id: Optional[StrictStr] = Field(default=None, description="Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal int64. Defaults to ID of the 'default' performance policy.")
    pool_id: Optional[StrictStr] = Field(default=None, description="Identifier associated with the pool in the storage pool table. A 42 digit hexadecimal int64. Defaults to the ID of the 'default' pool.")
    protection_policy_id: Optional[StrictStr] = Field(default=None, description="Protection policy ID", alias="protectionPolicyId")
    protection_policy_schedules: Optional[List[NimbleCreateVolumesWorkflowInputProtectionPolicySchedulesInner]] = Field(default=None, description="Protection Policy Schedule", alias="protectionPolicySchedules")
    replication_start_time: Optional[StrictInt] = Field(default=None, description="Remote replication start time which  will be used to offset local snapshot start time", alias="replicationStartTime")
    size: StrictInt = Field(description="Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume.When creating a new volume, size is required. When cloning an existing volume, size defaults to that of the parent volume.")
    suffix: Optional[StrictInt] = Field(default=None, description="suffix for customized volume name")
    vol_col_id: Optional[StrictStr] = Field(default=None, description="volume collection id", alias="volColId")
    vol_col_name: Optional[StrictStr] = Field(default=None, description="volume collection Name", alias="volColName")
    warn_level: Optional[StrictInt] = Field(default=None, description="Threshold for available space as a percentage of volume size below which an alert is raised. If this option is not specified, array default volume warn level setting is used to decide the warning level for this volume. Percentage as integer from 0 to 100. Defaults to the default volume warning level set on the group, typically 80.")
    __properties: ClassVar[List[str]] = ["agent_type", "app_uuid", "count", "dedupe_enabled", "downstreamPartner", "downstreamPartnerId", "folder_id", "host_groups", "limit", "limit_iops", "limit_mbps", "name", "perfpolicy", "perfpolicy_id", "pool_id", "protectionPolicyId", "protectionPolicySchedules", "replicationStartTime", "size", "suffix", "volColId", "volColName", "warn_level"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleCreateVolumesWorkflowInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in host_groups (list)
        _items = []
        if self.host_groups:
            for _item in self.host_groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['host_groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of perfpolicy
        if self.perfpolicy:
            _dict['perfpolicy'] = self.perfpolicy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in protection_policy_schedules (list)
        _items = []
        if self.protection_policy_schedules:
            for _item in self.protection_policy_schedules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['protectionPolicySchedules'] = _items
        # set to None if agent_type (nullable) is None
        # and model_fields_set contains the field
        if self.agent_type is None and "agent_type" in self.model_fields_set:
            _dict['agent_type'] = None

        # set to None if app_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.app_uuid is None and "app_uuid" in self.model_fields_set:
            _dict['app_uuid'] = None

        # set to None if dedupe_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_enabled is None and "dedupe_enabled" in self.model_fields_set:
            _dict['dedupe_enabled'] = None

        # set to None if downstream_partner (nullable) is None
        # and model_fields_set contains the field
        if self.downstream_partner is None and "downstream_partner" in self.model_fields_set:
            _dict['downstreamPartner'] = None

        # set to None if downstream_partner_id (nullable) is None
        # and model_fields_set contains the field
        if self.downstream_partner_id is None and "downstream_partner_id" in self.model_fields_set:
            _dict['downstreamPartnerId'] = None

        # set to None if folder_id (nullable) is None
        # and model_fields_set contains the field
        if self.folder_id is None and "folder_id" in self.model_fields_set:
            _dict['folder_id'] = None

        # set to None if host_groups (nullable) is None
        # and model_fields_set contains the field
        if self.host_groups is None and "host_groups" in self.model_fields_set:
            _dict['host_groups'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if limit_iops (nullable) is None
        # and model_fields_set contains the field
        if self.limit_iops is None and "limit_iops" in self.model_fields_set:
            _dict['limit_iops'] = None

        # set to None if limit_mbps (nullable) is None
        # and model_fields_set contains the field
        if self.limit_mbps is None and "limit_mbps" in self.model_fields_set:
            _dict['limit_mbps'] = None

        # set to None if perfpolicy (nullable) is None
        # and model_fields_set contains the field
        if self.perfpolicy is None and "perfpolicy" in self.model_fields_set:
            _dict['perfpolicy'] = None

        # set to None if perfpolicy_id (nullable) is None
        # and model_fields_set contains the field
        if self.perfpolicy_id is None and "perfpolicy_id" in self.model_fields_set:
            _dict['perfpolicy_id'] = None

        # set to None if pool_id (nullable) is None
        # and model_fields_set contains the field
        if self.pool_id is None and "pool_id" in self.model_fields_set:
            _dict['pool_id'] = None

        # set to None if protection_policy_id (nullable) is None
        # and model_fields_set contains the field
        if self.protection_policy_id is None and "protection_policy_id" in self.model_fields_set:
            _dict['protectionPolicyId'] = None

        # set to None if protection_policy_schedules (nullable) is None
        # and model_fields_set contains the field
        if self.protection_policy_schedules is None and "protection_policy_schedules" in self.model_fields_set:
            _dict['protectionPolicySchedules'] = None

        # set to None if replication_start_time (nullable) is None
        # and model_fields_set contains the field
        if self.replication_start_time is None and "replication_start_time" in self.model_fields_set:
            _dict['replicationStartTime'] = None

        # set to None if suffix (nullable) is None
        # and model_fields_set contains the field
        if self.suffix is None and "suffix" in self.model_fields_set:
            _dict['suffix'] = None

        # set to None if vol_col_id (nullable) is None
        # and model_fields_set contains the field
        if self.vol_col_id is None and "vol_col_id" in self.model_fields_set:
            _dict['volColId'] = None

        # set to None if vol_col_name (nullable) is None
        # and model_fields_set contains the field
        if self.vol_col_name is None and "vol_col_name" in self.model_fields_set:
            _dict['volColName'] = None

        # set to None if warn_level (nullable) is None
        # and model_fields_set contains the field
        if self.warn_level is None and "warn_level" in self.model_fields_set:
            _dict['warn_level'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleCreateVolumesWorkflowInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agent_type": obj.get("agent_type"),
            "app_uuid": obj.get("app_uuid"),
            "count": obj.get("count"),
            "dedupe_enabled": obj.get("dedupe_enabled"),
            "downstreamPartner": obj.get("downstreamPartner"),
            "downstreamPartnerId": obj.get("downstreamPartnerId"),
            "folder_id": obj.get("folder_id"),
            "host_groups": [NimbleHostGroupDetails.from_dict(_item) for _item in obj["host_groups"]] if obj.get("host_groups") is not None else None,
            "limit": obj.get("limit"),
            "limit_iops": obj.get("limit_iops"),
            "limit_mbps": obj.get("limit_mbps"),
            "name": obj.get("name"),
            "perfpolicy": CustomApp.from_dict(obj["perfpolicy"]) if obj.get("perfpolicy") is not None else None,
            "perfpolicy_id": obj.get("perfpolicy_id"),
            "pool_id": obj.get("pool_id"),
            "protectionPolicyId": obj.get("protectionPolicyId"),
            "protectionPolicySchedules": [NimbleCreateVolumesWorkflowInputProtectionPolicySchedulesInner.from_dict(_item) for _item in obj["protectionPolicySchedules"]] if obj.get("protectionPolicySchedules") is not None else None,
            "replicationStartTime": obj.get("replicationStartTime"),
            "size": obj.get("size"),
            "suffix": obj.get("suffix"),
            "volColId": obj.get("volColId"),
            "volColName": obj.get("volColName"),
            "warn_level": obj.get("warn_level")
        })
        return _obj


