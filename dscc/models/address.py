# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.state import STATE
from typing import Optional, Set
from typing_extensions import Self

class Address(BaseModel):
    """
    Address
    """ # noqa: E501
    active_node: Optional[StrictInt] = Field(default=None, description="Active node ID", alias="activeNode")
    auto_sense: Optional[StrictBool] = Field(default=None, description="Specifies if the autosense is enabled for network port", alias="autoSense")
    full_duplex: Optional[StrictBool] = Field(default=None, description="Is network port full duplex", alias="fullDuplex")
    ip_address: Optional[StrictStr] = Field(default=None, description="IP Address of the network port", alias="ipAddress")
    net_mask: Optional[StrictStr] = Field(default=None, description="Net mask of the network port", alias="netMask")
    speed: Optional[StrictInt] = Field(default=None, description="Speed of the network port")
    state: Optional[STATE] = None
    status: Optional[StrictStr] = Field(default=None, description="Status of the network port")
    __properties: ClassVar[List[str]] = ["activeNode", "autoSense", "fullDuplex", "ipAddress", "netMask", "speed", "state", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # set to None if active_node (nullable) is None
        # and model_fields_set contains the field
        if self.active_node is None and "active_node" in self.model_fields_set:
            _dict['activeNode'] = None

        # set to None if auto_sense (nullable) is None
        # and model_fields_set contains the field
        if self.auto_sense is None and "auto_sense" in self.model_fields_set:
            _dict['autoSense'] = None

        # set to None if full_duplex (nullable) is None
        # and model_fields_set contains the field
        if self.full_duplex is None and "full_duplex" in self.model_fields_set:
            _dict['fullDuplex'] = None

        # set to None if ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address is None and "ip_address" in self.model_fields_set:
            _dict['ipAddress'] = None

        # set to None if net_mask (nullable) is None
        # and model_fields_set contains the field
        if self.net_mask is None and "net_mask" in self.model_fields_set:
            _dict['netMask'] = None

        # set to None if speed (nullable) is None
        # and model_fields_set contains the field
        if self.speed is None and "speed" in self.model_fields_set:
            _dict['speed'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeNode": obj.get("activeNode"),
            "autoSense": obj.get("autoSense"),
            "fullDuplex": obj.get("fullDuplex"),
            "ipAddress": obj.get("ipAddress"),
            "netMask": obj.get("netMask"),
            "speed": obj.get("speed"),
            "state": STATE.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "status": obj.get("status")
        })
        return _obj


