# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.key_value import KeyValue
from typing import Optional, Set
from typing_extensions import Self

class NimbleCreateVolumeInput(BaseModel):
    """
    Create Nimble volume input.
    """ # noqa: E501
    agent_type: Optional[StrictStr] = Field(default=None, description="External management agent type. Defaults to 'none'. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'")
    app_uuid: Optional[StrictStr] = Field(default=None, description="Application identifier of volume. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed. Defaults to the empty string.")
    base_snap_id: Optional[StrictStr] = Field(default=None, description="Base snapshot ID. This attribute is required together with name and clone when cloning a volume with the create operation. A 42 digit hexadecimal int64. Defaults to the empty string.")
    block_size: Optional[StrictInt] = Field(default=None, description="Size in bytes of blocks in the volume. Defaults to 4096.")
    cache_pinned: Optional[StrictBool] = Field(default=None, description="If set to true, all the contents of this volume are kept in flash cache. This provides for consistent performance guarantees for all types of workloads. The amount of flash needed to pin the volume is equal to the limit for the volume. Defaults to 'false'.")
    clone: Optional[StrictBool] = Field(default=None, description="Whether this volume is a clone. Use this attribute in combination with name and base_snap_id to create a clone by setting clone = true. Defaults to 'false'.")
    dedupe_enabled: Optional[StrictBool] = Field(default=None, description="Indicate whether dedupe is enabled. Defaults to 'false'.")
    description: Optional[StrictStr] = Field(default=None, description="Text description of volume. String of up to 255 printable ASCII characters. Defaults to the empty string.")
    dest_pool_id: Optional[StrictStr] = Field(default=None, description="ID of the destination pool where the volume is moving to. A 42 digit hexadecimal int64. Defaults to the empty string.")
    encryption_cipher: Optional[StrictStr] = Field(default=None, description="The encryption cipher of the volume. Defaults to 'none'. Possible values: 'none', 'aes_256_xts'")
    folder_id: Optional[StrictStr] = Field(default=None, description="ID of the folder holding this volume. An optional NsObjectID. A 42 digit hexadecimal int64 or the empty string. Defaults to the empty string.")
    limit: Optional[StrictInt] = Field(default=None, description="Limit for the volume as a percentage of volume size. Percentage as integer from 0 to 100. Defaults to the default volume limit set on group, typically 100.")
    limit_iops: Optional[StrictInt] = Field(default=None, description="IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). By default the volume is created with unlimited iops.")
    limit_mbps: Optional[StrictInt] = Field(default=None, description="Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops _ampersand_amp;lt;= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). By default, the volume is created with unlimited throughput.")
    metadata: Optional[List[Optional[KeyValue]]] = Field(default=None, description="Key-value pairs that augment a volume's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed. Defaults to an empty array.")
    multi_initiator: Optional[StrictBool] = Field(default=None, description="This indicates whether volume and its snapshots are multi-initiator accessible. This attribute applies only to volumes and snapshots available to iSCSI initiators. Defaults to 'false'.")
    name: StrictStr = Field(description="Name of the volume. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.")
    online: Optional[StrictBool] = Field(default=None, description="Online state of volume, available for host initiators to establish connections. Defaults to 'true'.")
    owned_by_group_id: Optional[StrictStr] = Field(default=None, description="ID of group that currently owns the volume. A 42 digit hexadecimal int64. Defaults to the ID of the group that created the volume.")
    perfpolicy_id: Optional[StrictStr] = Field(default=None, description="Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. A 42 digit hexadecimal int64. Defaults to ID of the 'default' performance policy.")
    pool_id: Optional[StrictStr] = Field(default=None, description="Identifier associated with the pool in the storage pool table. A 42 digit hexadecimal int64. Defaults to the ID of the 'default' pool.")
    read_only: Optional[StrictBool] = Field(default=None, description="Volume is read-only. Defaults to 'false'.")
    reserve: Optional[StrictInt] = Field(default=None, description="Amount of space to reserve for this volume as a percentage of volume size. Percentage as integer either 0 or 100. Defaults to the default volume reservation set on the group, typically 0.")
    size: Optional[StrictInt] = Field(default=None, description="Volume size in megabytes. Size is required for creating a volume but not for cloning an existing volume.When creating a new volume, size is required. When cloning an existing volume, size defaults to that of the parent volume.")
    snap_reserve: Optional[StrictInt] = Field(default=None, description="Amount of space to reserve for snapshots of this volume as a percentage of volume size. Defaults to the default snapshot reserve set on the group, typically 0.")
    snap_warn_level: Optional[StrictInt] = Field(default=None, description="Threshold for available space as a percentage of volume size below which an alert is raised. Defaults to the default snapshot warning level set on the group, typically 0.")
    suffix: Optional[StrictInt] = Field(default=None, description="suffix for customized volume name. This field is deprecated.")
    warn_level: Optional[StrictInt] = Field(default=None, description="Threshold for available space as a percentage of volume size below which an alert is raised. If this option is not specified, array default volume warn level setting is used to decide the warning level for this volume. Percentage as integer from 0 to 100. Defaults to the default volume warning level set on the group, typically 80.")
    __properties: ClassVar[List[str]] = ["agent_type", "app_uuid", "base_snap_id", "block_size", "cache_pinned", "clone", "dedupe_enabled", "description", "dest_pool_id", "encryption_cipher", "folder_id", "limit", "limit_iops", "limit_mbps", "metadata", "multi_initiator", "name", "online", "owned_by_group_id", "perfpolicy_id", "pool_id", "read_only", "reserve", "size", "snap_reserve", "snap_warn_level", "suffix", "warn_level"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleCreateVolumeInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item in self.metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metadata'] = _items
        # set to None if agent_type (nullable) is None
        # and model_fields_set contains the field
        if self.agent_type is None and "agent_type" in self.model_fields_set:
            _dict['agent_type'] = None

        # set to None if app_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.app_uuid is None and "app_uuid" in self.model_fields_set:
            _dict['app_uuid'] = None

        # set to None if base_snap_id (nullable) is None
        # and model_fields_set contains the field
        if self.base_snap_id is None and "base_snap_id" in self.model_fields_set:
            _dict['base_snap_id'] = None

        # set to None if block_size (nullable) is None
        # and model_fields_set contains the field
        if self.block_size is None and "block_size" in self.model_fields_set:
            _dict['block_size'] = None

        # set to None if cache_pinned (nullable) is None
        # and model_fields_set contains the field
        if self.cache_pinned is None and "cache_pinned" in self.model_fields_set:
            _dict['cache_pinned'] = None

        # set to None if clone (nullable) is None
        # and model_fields_set contains the field
        if self.clone is None and "clone" in self.model_fields_set:
            _dict['clone'] = None

        # set to None if dedupe_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_enabled is None and "dedupe_enabled" in self.model_fields_set:
            _dict['dedupe_enabled'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if dest_pool_id (nullable) is None
        # and model_fields_set contains the field
        if self.dest_pool_id is None and "dest_pool_id" in self.model_fields_set:
            _dict['dest_pool_id'] = None

        # set to None if encryption_cipher (nullable) is None
        # and model_fields_set contains the field
        if self.encryption_cipher is None and "encryption_cipher" in self.model_fields_set:
            _dict['encryption_cipher'] = None

        # set to None if folder_id (nullable) is None
        # and model_fields_set contains the field
        if self.folder_id is None and "folder_id" in self.model_fields_set:
            _dict['folder_id'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if limit_iops (nullable) is None
        # and model_fields_set contains the field
        if self.limit_iops is None and "limit_iops" in self.model_fields_set:
            _dict['limit_iops'] = None

        # set to None if limit_mbps (nullable) is None
        # and model_fields_set contains the field
        if self.limit_mbps is None and "limit_mbps" in self.model_fields_set:
            _dict['limit_mbps'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if multi_initiator (nullable) is None
        # and model_fields_set contains the field
        if self.multi_initiator is None and "multi_initiator" in self.model_fields_set:
            _dict['multi_initiator'] = None

        # set to None if online (nullable) is None
        # and model_fields_set contains the field
        if self.online is None and "online" in self.model_fields_set:
            _dict['online'] = None

        # set to None if owned_by_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.owned_by_group_id is None and "owned_by_group_id" in self.model_fields_set:
            _dict['owned_by_group_id'] = None

        # set to None if perfpolicy_id (nullable) is None
        # and model_fields_set contains the field
        if self.perfpolicy_id is None and "perfpolicy_id" in self.model_fields_set:
            _dict['perfpolicy_id'] = None

        # set to None if pool_id (nullable) is None
        # and model_fields_set contains the field
        if self.pool_id is None and "pool_id" in self.model_fields_set:
            _dict['pool_id'] = None

        # set to None if read_only (nullable) is None
        # and model_fields_set contains the field
        if self.read_only is None and "read_only" in self.model_fields_set:
            _dict['read_only'] = None

        # set to None if reserve (nullable) is None
        # and model_fields_set contains the field
        if self.reserve is None and "reserve" in self.model_fields_set:
            _dict['reserve'] = None

        # set to None if size (nullable) is None
        # and model_fields_set contains the field
        if self.size is None and "size" in self.model_fields_set:
            _dict['size'] = None

        # set to None if snap_reserve (nullable) is None
        # and model_fields_set contains the field
        if self.snap_reserve is None and "snap_reserve" in self.model_fields_set:
            _dict['snap_reserve'] = None

        # set to None if snap_warn_level (nullable) is None
        # and model_fields_set contains the field
        if self.snap_warn_level is None and "snap_warn_level" in self.model_fields_set:
            _dict['snap_warn_level'] = None

        # set to None if warn_level (nullable) is None
        # and model_fields_set contains the field
        if self.warn_level is None and "warn_level" in self.model_fields_set:
            _dict['warn_level'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleCreateVolumeInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agent_type": obj.get("agent_type"),
            "app_uuid": obj.get("app_uuid"),
            "base_snap_id": obj.get("base_snap_id"),
            "block_size": obj.get("block_size"),
            "cache_pinned": obj.get("cache_pinned"),
            "clone": obj.get("clone"),
            "dedupe_enabled": obj.get("dedupe_enabled"),
            "description": obj.get("description"),
            "dest_pool_id": obj.get("dest_pool_id"),
            "encryption_cipher": obj.get("encryption_cipher"),
            "folder_id": obj.get("folder_id"),
            "limit": obj.get("limit"),
            "limit_iops": obj.get("limit_iops"),
            "limit_mbps": obj.get("limit_mbps"),
            "metadata": [KeyValue.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "multi_initiator": obj.get("multi_initiator"),
            "name": obj.get("name"),
            "online": obj.get("online"),
            "owned_by_group_id": obj.get("owned_by_group_id"),
            "perfpolicy_id": obj.get("perfpolicy_id"),
            "pool_id": obj.get("pool_id"),
            "read_only": obj.get("read_only"),
            "reserve": obj.get("reserve"),
            "size": obj.get("size"),
            "snap_reserve": obj.get("snap_reserve"),
            "snap_warn_level": obj.get("snap_warn_level"),
            "suffix": obj.get("suffix"),
            "warn_level": obj.get("warn_level")
        })
        return _obj


