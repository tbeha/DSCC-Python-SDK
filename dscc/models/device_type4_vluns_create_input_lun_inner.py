# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4VlunsCreateInputLUNInner(BaseModel):
    """
    DeviceType4VlunsCreateInputLUNInner
    """ # noqa: E501
    lun: Optional[StrictInt] = Field(default=None, description="Logical Unit Number", alias="LUN")
    host_group_id: Optional[StrictStr] = Field(default=None, description="Host group Id", alias="hostGroupId")
    nvme_transport_type: Optional[StrictStr] = Field(default=None, description="Transport type of the protocol. Configuration of the transport type is only supported for NVMe protocol starting from the system OS version 10.3.0 and the default transport type value is FC.", alias="nvmeTransportType")
    __properties: ClassVar[List[str]] = ["LUN", "hostGroupId", "nvmeTransportType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4VlunsCreateInputLUNInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if nvme_transport_type (nullable) is None
        # and model_fields_set contains the field
        if self.nvme_transport_type is None and "nvme_transport_type" in self.model_fields_set:
            _dict['nvmeTransportType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4VlunsCreateInputLUNInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "LUN": obj.get("LUN"),
            "hostGroupId": obj.get("hostGroupId"),
            "nvmeTransportType": obj.get("nvmeTransportType")
        })
        return _obj


