# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from dscc.models.insight_details import InsightDetails
from dscc.models.resource_detail import ResourceDetail
from dscc.models.system_details import SystemDetails
from typing import Optional, Set
from typing_extensions import Self

class InsightsData(BaseModel):
    """
    InsightsData
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="Category of the insight")
    cause: Optional[StrictStr] = None
    create_time: Optional[StrictInt] = Field(default=None, description="Timestamp for the insight.", alias="createTime")
    var_date: Optional[date] = Field(default=None, description="Date in string format corresponding to the timestamp field.", alias="date")
    details: Optional[InsightDetails] = None
    id: Optional[StrictStr] = Field(default=None, description="Primary identifier for the insight.")
    insight_details_uri: Optional[StrictStr] = Field(default=None, description="URI of the insight details page", alias="insightDetailsUri")
    insight_uri: Optional[StrictStr] = Field(default=None, description="URI of the insight", alias="insightUri")
    last_updated_time: Optional[StrictInt] = Field(default=None, alias="lastUpdatedTime")
    remediation: Optional[StrictStr] = None
    resource_details: Optional[ResourceDetail] = Field(default=None, alias="resourceDetails")
    score: Optional[StrictInt] = Field(default=None, description="Score of the insight - 0,1,2...10")
    severity: Optional[StrictStr] = Field(default=None, description="Severity of the insight - CRITICAL, INFO, WARNING")
    state: Optional[StrictStr] = None
    sub_type: Optional[StrictStr] = Field(default=None, description="Sub-type of the insight (eg. DISK/CPU)", alias="subType")
    symptom: Optional[StrictStr] = None
    system_details: Optional[SystemDetails] = Field(default=None, alias="systemDetails")
    system_id: Optional[StrictStr] = Field(default=None, description="Identifier of the system", alias="systemId")
    tenant_id: Optional[StrictStr] = Field(default=None, description="Primary identifier for the customer (UUID) associated with the insight", alias="tenantId")
    title: Optional[StrictStr] = Field(default=None, description="One line description of the insight")
    type: Optional[StrictStr] = Field(default=None, description="Type of the insight")
    value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="insight values - No. of annotations, saturation value")
    __properties: ClassVar[List[str]] = ["category", "cause", "createTime", "date", "details", "id", "insightDetailsUri", "insightUri", "lastUpdatedTime", "remediation", "resourceDetails", "score", "severity", "state", "subType", "symptom", "systemDetails", "systemId", "tenantId", "title", "type", "value"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CAPACITY', 'PERFORMANCE']):
            raise ValueError("must be one of enum values ('CAPACITY', 'PERFORMANCE')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CRITICAL', 'INFO', 'WARNING']):
            raise ValueError("must be one of enum values ('CRITICAL', 'INFO', 'WARNING')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TIME_UNTIL_FULL', 'RESOURCE_CONTENTION', 'LATENCY_ANOMALIES', 'HEADROOM_UTILIZATION']):
            raise ValueError("must be one of enum values ('TIME_UNTIL_FULL', 'RESOURCE_CONTENTION', 'LATENCY_ANOMALIES', 'HEADROOM_UTILIZATION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InsightsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_details
        if self.resource_details:
            _dict['resourceDetails'] = self.resource_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system_details
        if self.system_details:
            _dict['systemDetails'] = self.system_details.to_dict()
        # set to None if cause (nullable) is None
        # and model_fields_set contains the field
        if self.cause is None and "cause" in self.model_fields_set:
            _dict['cause'] = None

        # set to None if remediation (nullable) is None
        # and model_fields_set contains the field
        if self.remediation is None and "remediation" in self.model_fields_set:
            _dict['remediation'] = None

        # set to None if sub_type (nullable) is None
        # and model_fields_set contains the field
        if self.sub_type is None and "sub_type" in self.model_fields_set:
            _dict['subType'] = None

        # set to None if symptom (nullable) is None
        # and model_fields_set contains the field
        if self.symptom is None and "symptom" in self.model_fields_set:
            _dict['symptom'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InsightsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "cause": obj.get("cause"),
            "createTime": obj.get("createTime"),
            "date": obj.get("date"),
            "details": InsightDetails.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "id": obj.get("id"),
            "insightDetailsUri": obj.get("insightDetailsUri"),
            "insightUri": obj.get("insightUri"),
            "lastUpdatedTime": obj.get("lastUpdatedTime"),
            "remediation": obj.get("remediation"),
            "resourceDetails": ResourceDetail.from_dict(obj["resourceDetails"]) if obj.get("resourceDetails") is not None else None,
            "score": obj.get("score"),
            "severity": obj.get("severity"),
            "state": obj.get("state"),
            "subType": obj.get("subType"),
            "symptom": obj.get("symptom"),
            "systemDetails": SystemDetails.from_dict(obj["systemDetails"]) if obj.get("systemDetails") is not None else None,
            "systemId": obj.get("systemId"),
            "tenantId": obj.get("tenantId"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "value": obj.get("value")
        })
        return _obj


