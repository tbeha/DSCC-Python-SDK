# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.common_resource_attributes import CommonResourceAttributes
from dscc.models.device_type4_contacts_details import DeviceType4ContactsDetails
from dscc.models.device_type4system_settings_details_encryption import DeviceType4systemSettingsDetailsEncryption
from dscc.models.device_type4system_settings_details_installationsites import DeviceType4systemSettingsDetailsInstallationsites
from dscc.models.device_type4system_settings_details_remote_syslog_settings import DeviceType4systemSettingsDetailsRemoteSyslogSettings
from dscc.models.device_type4system_settings_details_srinfo import DeviceType4systemSettingsDetailsSrinfo
from dscc.models.device_type4system_settings_details_system_parameters import DeviceType4systemSettingsDetailsSystemParameters
from typing import Optional, Set
from typing_extensions import Self

class DeviceType4systemSettingsDetails(BaseModel):
    """
    DeviceType4systemSettingsDetails
    """ # noqa: E501
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details", alias="associatedLinks")
    auth_mode: Optional[StrictStr] = Field(default=None, description="Password Authentication Mode", alias="authMode")
    common_resource_attributes: Optional[CommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object ", alias="consoleUri")
    customer_id: Optional[StrictStr] = Field(default=None, description="The customer application identifier", alias="customerId")
    encryption: Optional[DeviceType4systemSettingsDetailsEncryption] = None
    generation: Optional[StrictInt] = Field(default=None, description="A monotonically increasing value. This value updates when the resource is updated and can be used as a short way to determine if a resource has changed or which of two different copies of a resource is more up to date.")
    installationsites: Optional[DeviceType4systemSettingsDetailsInstallationsites] = None
    is_fips_enabled: Optional[StrictBool] = Field(default=None, description="Apply FIPS Standard", alias="isFIPSEnabled")
    name: Optional[StrictStr] = Field(default=None, description="system name")
    ntp_server: Optional[StrictStr] = Field(default=None, description="ntp server", alias="ntpServer")
    remote_syslog_settings: Optional[DeviceType4systemSettingsDetailsRemoteSyslogSettings] = Field(default=None, alias="remoteSyslogSettings")
    srinfo: Optional[DeviceType4systemSettingsDetailsSrinfo] = None
    supportcontact: Optional[DeviceType4ContactsDetails] = None
    system_date: Optional[StrictInt] = Field(default=None, description="system date time", alias="systemDate")
    system_id: Optional[StrictStr] = Field(default=None, description="SystemId/serialNumber of the array.", alias="systemId")
    system_parameters: Optional[DeviceType4systemSettingsDetailsSystemParameters] = Field(default=None, alias="systemParameters")
    timezone: Optional[StrictStr] = Field(default=None, description="system time zone")
    type: Optional[StrictStr] = Field(default=None, description="The type of resource.")
    __properties: ClassVar[List[str]] = ["associatedLinks", "authMode", "commonResourceAttributes", "consoleUri", "customerId", "encryption", "generation", "installationsites", "isFIPSEnabled", "name", "ntpServer", "remoteSyslogSettings", "srinfo", "supportcontact", "systemDate", "systemId", "systemParameters", "timezone", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceType4systemSettingsDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associatedLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of installationsites
        if self.installationsites:
            _dict['installationsites'] = self.installationsites.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote_syslog_settings
        if self.remote_syslog_settings:
            _dict['remoteSyslogSettings'] = self.remote_syslog_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of srinfo
        if self.srinfo:
            _dict['srinfo'] = self.srinfo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of supportcontact
        if self.supportcontact:
            _dict['supportcontact'] = self.supportcontact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system_parameters
        if self.system_parameters:
            _dict['systemParameters'] = self.system_parameters.to_dict()
        # set to None if associated_links (nullable) is None
        # and model_fields_set contains the field
        if self.associated_links is None and "associated_links" in self.model_fields_set:
            _dict['associatedLinks'] = None

        # set to None if auth_mode (nullable) is None
        # and model_fields_set contains the field
        if self.auth_mode is None and "auth_mode" in self.model_fields_set:
            _dict['authMode'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if encryption (nullable) is None
        # and model_fields_set contains the field
        if self.encryption is None and "encryption" in self.model_fields_set:
            _dict['encryption'] = None

        # set to None if installationsites (nullable) is None
        # and model_fields_set contains the field
        if self.installationsites is None and "installationsites" in self.model_fields_set:
            _dict['installationsites'] = None

        # set to None if is_fips_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.is_fips_enabled is None and "is_fips_enabled" in self.model_fields_set:
            _dict['isFIPSEnabled'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if ntp_server (nullable) is None
        # and model_fields_set contains the field
        if self.ntp_server is None and "ntp_server" in self.model_fields_set:
            _dict['ntpServer'] = None

        # set to None if remote_syslog_settings (nullable) is None
        # and model_fields_set contains the field
        if self.remote_syslog_settings is None and "remote_syslog_settings" in self.model_fields_set:
            _dict['remoteSyslogSettings'] = None

        # set to None if srinfo (nullable) is None
        # and model_fields_set contains the field
        if self.srinfo is None and "srinfo" in self.model_fields_set:
            _dict['srinfo'] = None

        # set to None if supportcontact (nullable) is None
        # and model_fields_set contains the field
        if self.supportcontact is None and "supportcontact" in self.model_fields_set:
            _dict['supportcontact'] = None

        # set to None if system_date (nullable) is None
        # and model_fields_set contains the field
        if self.system_date is None and "system_date" in self.model_fields_set:
            _dict['systemDate'] = None

        # set to None if system_id (nullable) is None
        # and model_fields_set contains the field
        if self.system_id is None and "system_id" in self.model_fields_set:
            _dict['systemId'] = None

        # set to None if system_parameters (nullable) is None
        # and model_fields_set contains the field
        if self.system_parameters is None and "system_parameters" in self.model_fields_set:
            _dict['systemParameters'] = None

        # set to None if timezone (nullable) is None
        # and model_fields_set contains the field
        if self.timezone is None and "timezone" in self.model_fields_set:
            _dict['timezone'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceType4systemSettingsDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedLinks": [AssociatedLinksInner.from_dict(_item) for _item in obj["associatedLinks"]] if obj.get("associatedLinks") is not None else None,
            "authMode": obj.get("authMode"),
            "commonResourceAttributes": CommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "customerId": obj.get("customerId"),
            "encryption": DeviceType4systemSettingsDetailsEncryption.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "generation": obj.get("generation"),
            "installationsites": DeviceType4systemSettingsDetailsInstallationsites.from_dict(obj["installationsites"]) if obj.get("installationsites") is not None else None,
            "isFIPSEnabled": obj.get("isFIPSEnabled"),
            "name": obj.get("name"),
            "ntpServer": obj.get("ntpServer"),
            "remoteSyslogSettings": DeviceType4systemSettingsDetailsRemoteSyslogSettings.from_dict(obj["remoteSyslogSettings"]) if obj.get("remoteSyslogSettings") is not None else None,
            "srinfo": DeviceType4systemSettingsDetailsSrinfo.from_dict(obj["srinfo"]) if obj.get("srinfo") is not None else None,
            "supportcontact": DeviceType4ContactsDetails.from_dict(obj["supportcontact"]) if obj.get("supportcontact") is not None else None,
            "systemDate": obj.get("systemDate"),
            "systemId": obj.get("systemId"),
            "systemParameters": DeviceType4systemSettingsDetailsSystemParameters.from_dict(obj["systemParameters"]) if obj.get("systemParameters") is not None else None,
            "timezone": obj.get("timezone"),
            "type": obj.get("type")
        })
        return _obj


