# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.key_value import KeyValue
from dscc.models.nimble_common_resource_attributes import NimbleCommonResourceAttributes
from dscc.models.nimble_snap_coll_snapshot import NimbleSnapCollSnapshot
from typing import Optional, Set
from typing_extensions import Self

class NimbleSnapshotCollection(BaseModel):
    """
    NimbleSnapshotCollection
    """ # noqa: E501
    has_locked_snapshots: Optional[StrictBool] = Field(default=None, description="To verify a snapshot collection has any immutable snapshot or not.")
    id: Optional[StrictStr] = Field(default=None, description="Identifier for the snapshot collection. A 42 digit hexadecimal number. `Filter`")
    name: Optional[StrictStr] = Field(default=None, description="Name of snapshot. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. `Filter, Sort`")
    online_status: Optional[StrictStr] = Field(default=None, description="Online status of snapshot collection. This is based on the online status of the individual snapshots. Online status based on that of the constituent entities. Possible values: 'online', 'offline' or 'partial'.")
    schedule_id: Optional[StrictStr] = Field(default=None, description="Identifier of protection schedule. A 42 digit hexadecimal number. `Filter, Sort`")
    srep_owner_id: Optional[StrictStr] = Field(default=None, description="ID of the partner where snapshots for this snapshot collection reside which were created by synchronous replication. Field will be null if no peer snapshot_collection was created by synchronous replication. A 42 digit hexadecimal number. `Filter, Sort`")
    volcoll_id: Optional[StrictStr] = Field(default=None, description="Parent volume collection ID. A 42 digit hexadecimal number. `Filter, Sort`")
    allow_writes: Optional[StrictBool] = Field(default=None, description="Allow applications to write to created snapshot(s). Mandatory and must be set to 'true' for VSS application synchronized snapshots.")
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details")
    common_resource_attributes: Optional[NimbleCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    creation_time: Optional[StrictInt] = Field(default=None, description="Time when this snapshot collection was created. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    description: Optional[StrictStr] = Field(default=None, description="Text description of snapshot collection. String of up to 255 printable ASCII characters.")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    is_complete: Optional[StrictBool] = Field(default=None, description="Is complete.")
    is_external_trigger: Optional[StrictBool] = Field(default=None, description="Is externally triggered.")
    is_manual: Optional[StrictBool] = Field(default=None, description="Is manual.")
    is_manually_managed: Optional[StrictBool] = Field(default=None, description="Is snapshot collection manually managed, i.e., snapshot collection is manually or third party created or created by system at the time of volume restore or resize.")
    is_mfa_protected: Optional[StrictBool] = Field(default=None, description="Protected by multi-factor authentication. Possible values: 'true', 'false'.")
    is_replica: Optional[StrictBool] = Field(default=None, description="Snapshot collection is a replica from upstream replication partner.")
    is_unmanaged: Optional[StrictBool] = Field(default=None, description="Indicates whether a snapshot collection is unmanaged. This is based on the state of individual snapshots.")
    last_modified: Optional[StrictInt] = Field(default=None, description="Time when this snapshot collection was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    metadata: Optional[List[Optional[KeyValue]]] = Field(default=None, description="Key-value pairs that augment a snapshot collection's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.")
    origin_name: Optional[StrictStr] = Field(default=None, description="Origination group name/ID. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    peer_snapcoll_id: Optional[StrictStr] = Field(default=None, description="ID of the peer snapshot collection created by synchronous replication. Field will be null if no peer snapshot_collection was created by synchronous replication. A 42 digit hexadecimal number.")
    repl_status: Optional[StrictStr] = Field(default=None, description="Replication status of snapshot collection")
    replicate_to: Optional[StrictStr] = Field(default=None, description="Specifies the partner name that the snapshots in this snapshot collection are replicated to. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Link to the object URI", alias="resourceUri")
    snapshots_list: Optional[List[Optional[NimbleSnapCollSnapshot]]] = Field(default=None, description="Snapshot list for a SnapshotCollection")
    type: Optional[StrictStr] = Field(default=None, description="type")
    volcoll_creator_id: Optional[StrictStr] = Field(default=None, description="Originator id for the volume collection.")
    volcoll_creator_name: Optional[StrictStr] = Field(default=None, description="Originator name for the volume collection.")
    __properties: ClassVar[List[str]] = ["has_locked_snapshots", "id", "name", "online_status", "schedule_id", "srep_owner_id", "volcoll_id", "allow_writes", "associated_links", "commonResourceAttributes", "consoleUri", "creation_time", "customerId", "description", "generation", "is_complete", "is_external_trigger", "is_manual", "is_manually_managed", "is_mfa_protected", "is_replica", "is_unmanaged", "last_modified", "metadata", "origin_name", "peer_snapcoll_id", "repl_status", "replicate_to", "resourceUri", "snapshots_list", "type", "volcoll_creator_id", "volcoll_creator_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleSnapshotCollection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associated_links'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item in self.metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in snapshots_list (list)
        _items = []
        if self.snapshots_list:
            for _item in self.snapshots_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['snapshots_list'] = _items
        # set to None if has_locked_snapshots (nullable) is None
        # and model_fields_set contains the field
        if self.has_locked_snapshots is None and "has_locked_snapshots" in self.model_fields_set:
            _dict['has_locked_snapshots'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if online_status (nullable) is None
        # and model_fields_set contains the field
        if self.online_status is None and "online_status" in self.model_fields_set:
            _dict['online_status'] = None

        # set to None if schedule_id (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_id is None and "schedule_id" in self.model_fields_set:
            _dict['schedule_id'] = None

        # set to None if srep_owner_id (nullable) is None
        # and model_fields_set contains the field
        if self.srep_owner_id is None and "srep_owner_id" in self.model_fields_set:
            _dict['srep_owner_id'] = None

        # set to None if volcoll_id (nullable) is None
        # and model_fields_set contains the field
        if self.volcoll_id is None and "volcoll_id" in self.model_fields_set:
            _dict['volcoll_id'] = None

        # set to None if allow_writes (nullable) is None
        # and model_fields_set contains the field
        if self.allow_writes is None and "allow_writes" in self.model_fields_set:
            _dict['allow_writes'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if creation_time (nullable) is None
        # and model_fields_set contains the field
        if self.creation_time is None and "creation_time" in self.model_fields_set:
            _dict['creation_time'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if is_complete (nullable) is None
        # and model_fields_set contains the field
        if self.is_complete is None and "is_complete" in self.model_fields_set:
            _dict['is_complete'] = None

        # set to None if is_external_trigger (nullable) is None
        # and model_fields_set contains the field
        if self.is_external_trigger is None and "is_external_trigger" in self.model_fields_set:
            _dict['is_external_trigger'] = None

        # set to None if is_manual (nullable) is None
        # and model_fields_set contains the field
        if self.is_manual is None and "is_manual" in self.model_fields_set:
            _dict['is_manual'] = None

        # set to None if is_manually_managed (nullable) is None
        # and model_fields_set contains the field
        if self.is_manually_managed is None and "is_manually_managed" in self.model_fields_set:
            _dict['is_manually_managed'] = None

        # set to None if is_mfa_protected (nullable) is None
        # and model_fields_set contains the field
        if self.is_mfa_protected is None and "is_mfa_protected" in self.model_fields_set:
            _dict['is_mfa_protected'] = None

        # set to None if is_replica (nullable) is None
        # and model_fields_set contains the field
        if self.is_replica is None and "is_replica" in self.model_fields_set:
            _dict['is_replica'] = None

        # set to None if is_unmanaged (nullable) is None
        # and model_fields_set contains the field
        if self.is_unmanaged is None and "is_unmanaged" in self.model_fields_set:
            _dict['is_unmanaged'] = None

        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['last_modified'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if origin_name (nullable) is None
        # and model_fields_set contains the field
        if self.origin_name is None and "origin_name" in self.model_fields_set:
            _dict['origin_name'] = None

        # set to None if peer_snapcoll_id (nullable) is None
        # and model_fields_set contains the field
        if self.peer_snapcoll_id is None and "peer_snapcoll_id" in self.model_fields_set:
            _dict['peer_snapcoll_id'] = None

        # set to None if repl_status (nullable) is None
        # and model_fields_set contains the field
        if self.repl_status is None and "repl_status" in self.model_fields_set:
            _dict['repl_status'] = None

        # set to None if replicate_to (nullable) is None
        # and model_fields_set contains the field
        if self.replicate_to is None and "replicate_to" in self.model_fields_set:
            _dict['replicate_to'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if snapshots_list (nullable) is None
        # and model_fields_set contains the field
        if self.snapshots_list is None and "snapshots_list" in self.model_fields_set:
            _dict['snapshots_list'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if volcoll_creator_id (nullable) is None
        # and model_fields_set contains the field
        if self.volcoll_creator_id is None and "volcoll_creator_id" in self.model_fields_set:
            _dict['volcoll_creator_id'] = None

        # set to None if volcoll_creator_name (nullable) is None
        # and model_fields_set contains the field
        if self.volcoll_creator_name is None and "volcoll_creator_name" in self.model_fields_set:
            _dict['volcoll_creator_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleSnapshotCollection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "has_locked_snapshots": obj.get("has_locked_snapshots"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "online_status": obj.get("online_status"),
            "schedule_id": obj.get("schedule_id"),
            "srep_owner_id": obj.get("srep_owner_id"),
            "volcoll_id": obj.get("volcoll_id"),
            "allow_writes": obj.get("allow_writes"),
            "associated_links": [AssociatedLinksInner.from_dict(_item) for _item in obj["associated_links"]] if obj.get("associated_links") is not None else None,
            "commonResourceAttributes": NimbleCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "creation_time": obj.get("creation_time"),
            "customerId": obj.get("customerId"),
            "description": obj.get("description"),
            "generation": obj.get("generation"),
            "is_complete": obj.get("is_complete"),
            "is_external_trigger": obj.get("is_external_trigger"),
            "is_manual": obj.get("is_manual"),
            "is_manually_managed": obj.get("is_manually_managed"),
            "is_mfa_protected": obj.get("is_mfa_protected"),
            "is_replica": obj.get("is_replica"),
            "is_unmanaged": obj.get("is_unmanaged"),
            "last_modified": obj.get("last_modified"),
            "metadata": [KeyValue.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "origin_name": obj.get("origin_name"),
            "peer_snapcoll_id": obj.get("peer_snapcoll_id"),
            "repl_status": obj.get("repl_status"),
            "replicate_to": obj.get("replicate_to"),
            "resourceUri": obj.get("resourceUri"),
            "snapshots_list": [NimbleSnapCollSnapshot.from_dict(_item) for _item in obj["snapshots_list"]] if obj.get("snapshots_list") is not None else None,
            "type": obj.get("type"),
            "volcoll_creator_id": obj.get("volcoll_creator_id"),
            "volcoll_creator_name": obj.get("volcoll_creator_name")
        })
        return _obj


