# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.console_reference import ConsoleReference
from dscc.models.resource_reference import ResourceReference
from typing import Optional, Set
from typing_extensions import Self

class IssueDetails(BaseModel):
    """
    IssueDetails
    """ # noqa: E501
    additional_details: Optional[ConsoleReference] = Field(default=None, description="A link to be displayed in the Issues UI.", alias="additionalDetails")
    body: Optional[StrictStr] = Field(default=None, description="Long description with more details including possible remediations.")
    category: Optional[StrictStr] = Field(default=None, description="Category of the issue. PERFORMANCE, CAPACITY, etc")
    cleared_at: Optional[datetime] = Field(default=None, description="Time when the issue was cleared. RFC 3339 timestamp", alias="clearedAt")
    created_at: Optional[datetime] = Field(default=None, description="Time when the issue was created. RFC 3339 timestamp", alias="createdAt")
    customer_id: Optional[StrictStr] = Field(default=None, description="Primary identifier for the customer (UUID) associated with the issue.", alias="customerId")
    generation: Optional[StrictStr] = Field(default=None, description="A monotonically increasing value incremented every time the resource is updated")
    id: StrictStr = Field(description="Primary identifier for the issue.")
    issue_type: Optional[StrictStr] = Field(default=None, description="The type of the issue. Eg: ISSUE, RECOMMENDATION", alias="issueType")
    last_occurred_at: Optional[datetime] = Field(default=None, description="Time when the issue last occurred. RFC 3339 timestamp", alias="lastOccurredAt")
    name: Optional[StrictStr] = Field(default=None, description="friendly name of the resource given by the system")
    occurrence_count: Optional[StrictInt] = Field(default=None, description="Indicates the number of occurrences of the issue", alias="occurrenceCount")
    related_resource: Optional[ResourceReference] = Field(default=None, description="Details of the resource related to the issue", alias="relatedResource")
    related_resource_owner: Optional[ResourceReference] = Field(default=None, description="Details of the owner of the resource related to the issue", alias="relatedResourceOwner")
    resource_uri: Optional[StrictStr] = Field(default=None, description="URI of the issue. Eg: /api/v1/issues/{id}", alias="resourceUri")
    rule_id: Optional[StrictStr] = Field(default=None, description="Indicates the problem associated with the issue. Disambiguated per system.", alias="ruleId")
    severity: Optional[StrictStr] = Field(default=None, description="Severity of the issue. For issue: CRITICAL, WARNING, INFO. For reco: HIGH, MEDIUM, LOW")
    state: Optional[StrictStr] = Field(default=None, description="State of the issue. Eg: CREATED, ASSIGNED, CLOSED, SNOOZED, DELETED, etc")
    title: Optional[StrictStr] = Field(default=None, description="One line description of the issue")
    type: Optional[StrictStr] = Field(default=None, description="Type of the resource. In this case - issue")
    __properties: ClassVar[List[str]] = ["additionalDetails", "body", "category", "clearedAt", "createdAt", "customerId", "generation", "id", "issueType", "lastOccurredAt", "name", "occurrenceCount", "relatedResource", "relatedResourceOwner", "resourceUri", "ruleId", "severity", "state", "title", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IssueDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_details
        if self.additional_details:
            _dict['additionalDetails'] = self.additional_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of related_resource
        if self.related_resource:
            _dict['relatedResource'] = self.related_resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of related_resource_owner
        if self.related_resource_owner:
            _dict['relatedResourceOwner'] = self.related_resource_owner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IssueDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalDetails": ConsoleReference.from_dict(obj["additionalDetails"]) if obj.get("additionalDetails") is not None else None,
            "body": obj.get("body"),
            "category": obj.get("category"),
            "clearedAt": obj.get("clearedAt"),
            "createdAt": obj.get("createdAt"),
            "customerId": obj.get("customerId"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "issueType": obj.get("issueType"),
            "lastOccurredAt": obj.get("lastOccurredAt"),
            "name": obj.get("name"),
            "occurrenceCount": obj.get("occurrenceCount"),
            "relatedResource": ResourceReference.from_dict(obj["relatedResource"]) if obj.get("relatedResource") is not None else None,
            "relatedResourceOwner": ResourceReference.from_dict(obj["relatedResourceOwner"]) if obj.get("relatedResourceOwner") is not None else None,
            "resourceUri": obj.get("resourceUri"),
            "ruleId": obj.get("ruleId"),
            "severity": obj.get("severity"),
            "state": obj.get("state"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj


