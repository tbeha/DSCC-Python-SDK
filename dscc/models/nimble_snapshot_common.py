# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.access_control_record import AccessControlRecord
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.key_value import KeyValue
from dscc.models.nimble_common_resource_attributes import NimbleCommonResourceAttributes
from typing import Optional, Set
from typing_extensions import Self

class NimbleSnapshotCommon(BaseModel):
    """
    NimbleSnapshotCommon
    """ # noqa: E501
    access_control_records: Optional[List[Optional[AccessControlRecord]]] = Field(default=None, description="List of access control records that apply to this snapshot. List of access control records associated with a volume or snapshot or protocol endpoint.")
    agent_type: Optional[StrictStr] = Field(default=None, description="External management agent type. Possible values: 'none', 'smis', 'vvol', 'openstack', 'openstackv2'.")
    app_uuid: Optional[StrictStr] = Field(default=None, description="Application identifier of snapshots. String of up to 255 alphanumeric characters, hyphen, colon, dot and underscore are allowed.")
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details")
    common_resource_attributes: Optional[NimbleCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    creation_time: Optional[StrictInt] = Field(default=None, description="Time when this snapshot was created. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    description: Optional[StrictStr] = Field(default=None, description="Text description of snapshot. String of up to 255 printable ASCII characters.")
    expiry_after: Optional[StrictInt] = Field(default=None, description="Number of seconds after which this snapshot is considered expired by snapshot TTL. A value of 0 indicates that snapshot never expires, 1 indicates that snapshot uses group-level configured TTL value and any other value indicates number of seconds.")
    expiry_time: Optional[StrictInt] = Field(default=None, description="Unix timestamp indicating that the snapshot is considered expired by Snapshot Time-to-live(TTL). A value of 0 indicates that snapshot never expires. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    is_manually_managed: Optional[StrictBool] = Field(default=None, description="Is snapshot manually managed, i.e., snapshot is manually or third party created or created by system at the time of volume restore or resize.")
    is_mfa_protected: Optional[StrictBool] = Field(default=None, description="Protected by multi-factor authentication. Possible values: 'true', 'false'.")
    is_replica: Optional[StrictBool] = Field(default=None, description="Snapshot is a replica from upstream replication partner.")
    is_unmanaged: Optional[StrictBool] = Field(default=None, description="Indicates whether the snapshot is unmanaged. The snapshot will not be deleted automatically unless the unmanaged cleanup feature is enabled. (this argument is deprecated)")
    last_modified: Optional[StrictInt] = Field(default=None, description="Time when this snapshot was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    lock_period: Optional[StrictInt] = Field(default=None, description="Number of seconds to keep a snapshot as immutable.")
    metadata: Optional[List[Optional[KeyValue]]] = Field(default=None, description="Key-value pairs that augment a snapshot's attributes. List of key-value pairs. Keys must be unique and non-empty. When creating an object, values must be non-empty. When updating an object, an empty value causes the corresponding key to be removed.")
    new_data_compressed_bytes: Optional[StrictInt] = Field(default=None, description="The bytes of compressed new data.")
    new_data_uncompressed_bytes: Optional[StrictInt] = Field(default=None, description="The bytes of uncompressed new data.")
    new_data_valid: Optional[StrictBool] = Field(default=None, description="Indicate the usage information is valid.")
    offline_reason: Optional[StrictStr] = Field(default=None, description="Snapshot offline reason - possible entries: one of 'user', 'recovery', 'replica', 'over_volume_limit', 'over_snapshot_limit', 'over_volume_reserve', 'nvram_loss_recovery', 'pool_free_space_exhausted' . Possible values: 'user', 'recovery', 'replica', 'nvram_loss_recovery', 'serial_number_collision', 'encryption_inactive', 'encryption_key_deleted', 'vvol_unbind', 'cache_unpin_in_progress', 'over_folder_overdraft_limit', 'over_volume_usage_limit', 'pool_free_space_exhausted', 'srep_unconfigured'.")
    origin_name: Optional[StrictStr] = Field(default=None, description="Origination group name. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Link to the object URI", alias="resourceUri")
    retention_time: Optional[StrictInt] = Field(default=None, description="Retention time in seconds when the snapshot lock will expire.")
    type: Optional[StrictStr] = Field(default=None, description="type")
    vol_id: Optional[StrictStr] = Field(default=None, description="Parent volume ID. A 42 digit hexadecimal number.")
    vol_name: Optional[StrictStr] = Field(default=None, description="Name of the parent volume in which the snapshot belongs to. String of up to 215 alphanumeric, hyphenated, colon, or period-separated characters; but cannot begin with hyphen, colon or period. This type is used for object sets containing volumes, snapshots, snapshot collections and protocol endpoints.")
    volume_creator_id: Optional[StrictStr] = Field(default=None, description="Originator id for the snapshot.")
    volume_creator_name: Optional[StrictStr] = Field(default=None, description="Originator name for the snapshot.")
    vpd_ieee0: Optional[StrictStr] = Field(default=None, description="The first 64 bits of the snapshot's EUI-64 identifier, encoded as a hexadecimal string. Plain string.")
    vpd_ieee1: Optional[StrictStr] = Field(default=None, description="The last 64 bits of the snapshot's EUI-64 identifier, encoded as a hexadecimal string. Plain string.")
    vpd_t10: Optional[StrictStr] = Field(default=None, description="The snapshot's T10 Vendor ID-based identifier. Plain string.")
    __properties: ClassVar[List[str]] = ["access_control_records", "agent_type", "app_uuid", "associated_links", "commonResourceAttributes", "consoleUri", "creation_time", "customerId", "description", "expiry_after", "expiry_time", "generation", "is_manually_managed", "is_mfa_protected", "is_replica", "is_unmanaged", "last_modified", "lock_period", "metadata", "new_data_compressed_bytes", "new_data_uncompressed_bytes", "new_data_valid", "offline_reason", "origin_name", "resourceUri", "retention_time", "type", "vol_id", "vol_name", "volume_creator_id", "volume_creator_name", "vpd_ieee0", "vpd_ieee1", "vpd_t10"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleSnapshotCommon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in access_control_records (list)
        _items = []
        if self.access_control_records:
            for _item in self.access_control_records:
                if _item:
                    _items.append(_item.to_dict())
            _dict['access_control_records'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associated_links'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item in self.metadata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metadata'] = _items
        # set to None if access_control_records (nullable) is None
        # and model_fields_set contains the field
        if self.access_control_records is None and "access_control_records" in self.model_fields_set:
            _dict['access_control_records'] = None

        # set to None if agent_type (nullable) is None
        # and model_fields_set contains the field
        if self.agent_type is None and "agent_type" in self.model_fields_set:
            _dict['agent_type'] = None

        # set to None if app_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.app_uuid is None and "app_uuid" in self.model_fields_set:
            _dict['app_uuid'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if creation_time (nullable) is None
        # and model_fields_set contains the field
        if self.creation_time is None and "creation_time" in self.model_fields_set:
            _dict['creation_time'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if expiry_after (nullable) is None
        # and model_fields_set contains the field
        if self.expiry_after is None and "expiry_after" in self.model_fields_set:
            _dict['expiry_after'] = None

        # set to None if expiry_time (nullable) is None
        # and model_fields_set contains the field
        if self.expiry_time is None and "expiry_time" in self.model_fields_set:
            _dict['expiry_time'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if is_manually_managed (nullable) is None
        # and model_fields_set contains the field
        if self.is_manually_managed is None and "is_manually_managed" in self.model_fields_set:
            _dict['is_manually_managed'] = None

        # set to None if is_mfa_protected (nullable) is None
        # and model_fields_set contains the field
        if self.is_mfa_protected is None and "is_mfa_protected" in self.model_fields_set:
            _dict['is_mfa_protected'] = None

        # set to None if is_replica (nullable) is None
        # and model_fields_set contains the field
        if self.is_replica is None and "is_replica" in self.model_fields_set:
            _dict['is_replica'] = None

        # set to None if is_unmanaged (nullable) is None
        # and model_fields_set contains the field
        if self.is_unmanaged is None and "is_unmanaged" in self.model_fields_set:
            _dict['is_unmanaged'] = None

        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['last_modified'] = None

        # set to None if lock_period (nullable) is None
        # and model_fields_set contains the field
        if self.lock_period is None and "lock_period" in self.model_fields_set:
            _dict['lock_period'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if new_data_compressed_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.new_data_compressed_bytes is None and "new_data_compressed_bytes" in self.model_fields_set:
            _dict['new_data_compressed_bytes'] = None

        # set to None if new_data_uncompressed_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.new_data_uncompressed_bytes is None and "new_data_uncompressed_bytes" in self.model_fields_set:
            _dict['new_data_uncompressed_bytes'] = None

        # set to None if new_data_valid (nullable) is None
        # and model_fields_set contains the field
        if self.new_data_valid is None and "new_data_valid" in self.model_fields_set:
            _dict['new_data_valid'] = None

        # set to None if offline_reason (nullable) is None
        # and model_fields_set contains the field
        if self.offline_reason is None and "offline_reason" in self.model_fields_set:
            _dict['offline_reason'] = None

        # set to None if origin_name (nullable) is None
        # and model_fields_set contains the field
        if self.origin_name is None and "origin_name" in self.model_fields_set:
            _dict['origin_name'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if retention_time (nullable) is None
        # and model_fields_set contains the field
        if self.retention_time is None and "retention_time" in self.model_fields_set:
            _dict['retention_time'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if vol_id (nullable) is None
        # and model_fields_set contains the field
        if self.vol_id is None and "vol_id" in self.model_fields_set:
            _dict['vol_id'] = None

        # set to None if vol_name (nullable) is None
        # and model_fields_set contains the field
        if self.vol_name is None and "vol_name" in self.model_fields_set:
            _dict['vol_name'] = None

        # set to None if volume_creator_id (nullable) is None
        # and model_fields_set contains the field
        if self.volume_creator_id is None and "volume_creator_id" in self.model_fields_set:
            _dict['volume_creator_id'] = None

        # set to None if volume_creator_name (nullable) is None
        # and model_fields_set contains the field
        if self.volume_creator_name is None and "volume_creator_name" in self.model_fields_set:
            _dict['volume_creator_name'] = None

        # set to None if vpd_ieee0 (nullable) is None
        # and model_fields_set contains the field
        if self.vpd_ieee0 is None and "vpd_ieee0" in self.model_fields_set:
            _dict['vpd_ieee0'] = None

        # set to None if vpd_ieee1 (nullable) is None
        # and model_fields_set contains the field
        if self.vpd_ieee1 is None and "vpd_ieee1" in self.model_fields_set:
            _dict['vpd_ieee1'] = None

        # set to None if vpd_t10 (nullable) is None
        # and model_fields_set contains the field
        if self.vpd_t10 is None and "vpd_t10" in self.model_fields_set:
            _dict['vpd_t10'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleSnapshotCommon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_control_records": [AccessControlRecord.from_dict(_item) for _item in obj["access_control_records"]] if obj.get("access_control_records") is not None else None,
            "agent_type": obj.get("agent_type"),
            "app_uuid": obj.get("app_uuid"),
            "associated_links": [AssociatedLinksInner.from_dict(_item) for _item in obj["associated_links"]] if obj.get("associated_links") is not None else None,
            "commonResourceAttributes": NimbleCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "consoleUri": obj.get("consoleUri"),
            "creation_time": obj.get("creation_time"),
            "customerId": obj.get("customerId"),
            "description": obj.get("description"),
            "expiry_after": obj.get("expiry_after"),
            "expiry_time": obj.get("expiry_time"),
            "generation": obj.get("generation"),
            "is_manually_managed": obj.get("is_manually_managed"),
            "is_mfa_protected": obj.get("is_mfa_protected"),
            "is_replica": obj.get("is_replica"),
            "is_unmanaged": obj.get("is_unmanaged"),
            "last_modified": obj.get("last_modified"),
            "lock_period": obj.get("lock_period"),
            "metadata": [KeyValue.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "new_data_compressed_bytes": obj.get("new_data_compressed_bytes"),
            "new_data_uncompressed_bytes": obj.get("new_data_uncompressed_bytes"),
            "new_data_valid": obj.get("new_data_valid"),
            "offline_reason": obj.get("offline_reason"),
            "origin_name": obj.get("origin_name"),
            "resourceUri": obj.get("resourceUri"),
            "retention_time": obj.get("retention_time"),
            "type": obj.get("type"),
            "vol_id": obj.get("vol_id"),
            "vol_name": obj.get("vol_name"),
            "volume_creator_id": obj.get("volume_creator_id"),
            "volume_creator_name": obj.get("volume_creator_name"),
            "vpd_ieee0": obj.get("vpd_ieee0"),
            "vpd_ieee1": obj.get("vpd_ieee1"),
            "vpd_t10": obj.get("vpd_t10")
        })
        return _obj


