# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dscc.models.create_host_input import CreateHostInput
from dscc.models.host_proximity_value import HostProximityValue
from typing import Optional, Set
from typing_extensions import Self

class UpdateHostGroupInput(BaseModel):
    """
    UpdateHostGroupInput
    """ # noqa: E501
    host_proximity_values: Optional[List[Optional[HostProximityValue]]] = Field(default=None, description="Change Proximity for list of hosts", alias="hostProximityValues")
    hosts_to_create: Optional[List[CreateHostInput]] = Field(default=None, description="List of hosts to be replaced to the group", alias="hostsToCreate")
    name: Optional[StrictStr] = Field(default=None, description="Name of the host group")
    removed_hosts: Optional[List[Optional[StrictStr]]] = Field(default=None, description="List of host IDs to be removed from the group", alias="removedHosts")
    updated_hosts: Optional[List[Optional[StrictStr]]] = Field(default=None, description="List of host IDs to be added to the group", alias="updatedHosts")
    __properties: ClassVar[List[str]] = ["hostProximityValues", "hostsToCreate", "name", "removedHosts", "updatedHosts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateHostGroupInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in host_proximity_values (list)
        _items = []
        if self.host_proximity_values:
            for _item in self.host_proximity_values:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hostProximityValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hosts_to_create (list)
        _items = []
        if self.hosts_to_create:
            for _item in self.hosts_to_create:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hostsToCreate'] = _items
        # set to None if hosts_to_create (nullable) is None
        # and model_fields_set contains the field
        if self.hosts_to_create is None and "hosts_to_create" in self.model_fields_set:
            _dict['hostsToCreate'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateHostGroupInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hostProximityValues": [HostProximityValue.from_dict(_item) for _item in obj["hostProximityValues"]] if obj.get("hostProximityValues") is not None else None,
            "hostsToCreate": [CreateHostInput.from_dict(_item) for _item in obj["hostsToCreate"]] if obj.get("hostsToCreate") is not None else None,
            "name": obj.get("name"),
            "removedHosts": obj.get("removedHosts"),
            "updatedHosts": obj.get("updatedHosts")
        })
        return _obj


