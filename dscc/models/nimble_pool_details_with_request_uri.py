# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dscc.models.associated_links_inner import AssociatedLinksInner
from dscc.models.nimble_arr_summary import NimbleArrSummary
from dscc.models.nimble_array_detail import NimbleArrayDetail
from dscc.models.nimble_common_resource_attributes import NimbleCommonResourceAttributes
from dscc.models.nimble_folder_summary import NimbleFolderSummary
from dscc.models.nimble_pinned_volume_info import NimblePinnedVolumeInfo
from dscc.models.nimble_volume_summary import NimbleVolumeSummary
from typing import Optional, Set
from typing_extensions import Self

class NimblePoolDetailsWithRequestUri(BaseModel):
    """
    NimblePoolDetailsWithRequestUri
    """ # noqa: E501
    request_uri: Optional[StrictStr] = Field(default=None, description="requestUri for detailed storage pool object", alias="requestUri")
    id: Optional[StrictStr] = Field(default=None, description="Identifier of pool. A 42 digit hexadecimal number.")
    name: Optional[StrictStr] = Field(default=None, description="Name of pool. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    all_flash: Optional[StrictBool] = Field(default=None, description="Indicate whether the pool is an all_flash pool.")
    array_count: Optional[StrictInt] = Field(default=None, description="Number of arrays in the pool.")
    array_list: Optional[List[Optional[NimbleArrayDetail]]] = Field(default=None, description="List of arrays in the pool with detailed information. When create/update array list, only arrays' id is required.")
    associated_links: Optional[List[Optional[AssociatedLinksInner]]] = Field(default=None, description="Associated Links Details")
    cache_capacity: Optional[StrictInt] = Field(default=None, description="Total usable cache capacity of the pool in bytes.")
    capacity: Optional[StrictInt] = Field(default=None, description="Total storage space of the pool in bytes.")
    clone_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Clone savings for the pool expressed as ratio. Fraction expressed as floating point number.")
    common_resource_attributes: Optional[NimbleCommonResourceAttributes] = Field(default=None, alias="commonResourceAttributes")
    compression_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Compression savings for the pool expressed as ratio. Fraction expressed as floating point number.")
    console_uri: Optional[StrictStr] = Field(default=None, description="consoleUri for detailed storage object", alias="consoleUri")
    creation_time: Optional[StrictInt] = Field(default=None, description="Time when this pool was created. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    customer_id: Optional[StrictStr] = Field(default=None, description="customerId", alias="customerId")
    data_reduction_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Space usage savings in the pool expressed as ratio that does not include thin-provisioning savings. Fraction expressed as floating point number.")
    dedupe_all_volumes: Optional[StrictBool] = Field(default=None, description="Indicates if dedupe is enabled by default for new volumes on this pool.")
    dedupe_all_volumes_capable: Optional[StrictBool] = Field(default=None, description="Indicates whether the pool can enable dedupe by default")
    dedupe_capable: Optional[StrictBool] = Field(default=None, description="Indicates whether the pool is capable of hosting deduped volumes.")
    dedupe_capacity_bytes: Optional[StrictInt] = Field(default=None, description="The dedupe capacity of a hybrid pool. Does not apply to all-flash pools.")
    dedupe_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Dedupe savings for the pool expressed as ratio. Fraction expressed as floating point number.")
    dedupe_usage_bytes: Optional[StrictInt] = Field(default=None, description="The dedupe usage of a hybrid pool. Does not apply to all-flash pools.")
    description: Optional[StrictStr] = Field(default=None, description="Text description of pool. String of up to 255 printable ASCII characters.")
    folder_list: Optional[List[Optional[NimbleFolderSummary]]] = Field(default=None, description="The list of fully qualified names of folders in the pool.")
    free_space: Optional[StrictInt] = Field(default=None, description="Free space of the pool in bytes.")
    full_name: Optional[StrictStr] = Field(default=None, description="Fully qualified name of pool. String of up to 64 alphanumeric characters, - and . and : are allowed after first character.")
    generation: Optional[StrictInt] = Field(default=None, description="generation")
    is_default: Optional[StrictBool] = Field(default=None, description="Indicates if this is the default pool.")
    last_modified: Optional[StrictInt] = Field(default=None, description="Time when this pool was last modified. Seconds since last epoch i.e. 00:00 January 1, 1970.")
    pinnable_cache_capacity: Optional[StrictInt] = Field(default=None, description="Total pinnable cache capacity of the pool in bytes.")
    pinned_cache_capacity: Optional[StrictInt] = Field(default=None, description="Total pinned cache capacity of the pool in bytes.")
    pinned_vol_list: Optional[List[Optional[NimblePinnedVolumeInfo]]] = Field(default=None, description="The list of pinned volumes in the pool.")
    reserve: Optional[StrictInt] = Field(default=None, description="Reserved space of the pool in bytes")
    resource_uri: Optional[StrictStr] = Field(default=None, description="Link to the object URI", alias="resourceUri")
    savings: Optional[StrictInt] = Field(default=None, description="Overall space usage savings in the pool.")
    savings_clone: Optional[StrictInt] = Field(default=None, description="Space usage savings in the pool due to cloning of volumes.")
    savings_compression: Optional[StrictInt] = Field(default=None, description="Space usage savings in the pool due to compression.")
    savings_data_reduction: Optional[StrictInt] = Field(default=None, description="Space usage savings in the pool that does not include thin-provisioning savings.")
    savings_dedupe: Optional[StrictInt] = Field(default=None, description="Space usage savings in the pool due to deduplication.")
    savings_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Overall space usage savings in the pool expressed as ratio. Fraction expressed as floating point number.")
    savings_vol_thin_provisioning: Optional[StrictInt] = Field(default=None, description="Space usage savings in the pool due to thin provisioning of volumes.")
    search_name: Optional[StrictStr] = Field(default=None, description="Name of pool used for object search. Alphanumeric string, up to 64 characters including hyphen, period, colon.")
    snap_count: Optional[StrictInt] = Field(default=None, description="Snapshot count.")
    snapcoll_count: Optional[StrictInt] = Field(default=None, description="Snapshot collection count.")
    type: Optional[StrictStr] = Field(default=None, description="type")
    unassigned_array_list: Optional[List[Optional[NimbleArrSummary]]] = Field(default=None, description="List of arrays being unassigned from the pool.")
    uncompressed_snap_usage_bytes: Optional[StrictInt] = Field(default=None, description="Uncompressed usage of snapshots in the pool")
    uncompressed_vol_usage_bytes: Optional[StrictInt] = Field(default=None, description="Uncompressed usage of volumes in the pool")
    unused_reserve: Optional[StrictInt] = Field(default=None, description="Unused reserve space of the pool in bytes.")
    usage: Optional[StrictInt] = Field(default=None, description="Used space of the pool in bytes.")
    usage_valid: Optional[StrictBool] = Field(default=None, description="Identifier of pool. A 42 digit hexadecimal number.")
    vol_count: Optional[StrictInt] = Field(default=None, description="Number of volumes assigned to the pool.")
    vol_list: Optional[List[Optional[NimbleVolumeSummary]]] = Field(default=None, description="The list of volumes in the pool.")
    vol_thin_provisioning_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Thin provisioning savings for volumes in the pool expressed as ratio. Fraction expressed as floating point number.")
    __properties: ClassVar[List[str]] = ["id", "name", "all_flash", "array_count", "array_list", "associated_links", "cache_capacity", "capacity", "clone_ratio", "commonResourceAttributes", "compression_ratio", "consoleUri", "creation_time", "customerId", "data_reduction_ratio", "dedupe_all_volumes", "dedupe_all_volumes_capable", "dedupe_capable", "dedupe_capacity_bytes", "dedupe_ratio", "dedupe_usage_bytes", "description", "folder_list", "free_space", "full_name", "generation", "is_default", "last_modified", "pinnable_cache_capacity", "pinned_cache_capacity", "pinned_vol_list", "reserve", "resourceUri", "savings", "savings_clone", "savings_compression", "savings_data_reduction", "savings_dedupe", "savings_ratio", "savings_vol_thin_provisioning", "search_name", "snap_count", "snapcoll_count", "type", "unassigned_array_list", "uncompressed_snap_usage_bytes", "uncompressed_vol_usage_bytes", "unused_reserve", "usage", "usage_valid", "vol_count", "vol_list", "vol_thin_provisioning_ratio"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimblePoolDetailsWithRequestUri from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in array_list (list)
        _items = []
        if self.array_list:
            for _item in self.array_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['array_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in associated_links (list)
        _items = []
        if self.associated_links:
            for _item in self.associated_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['associated_links'] = _items
        # override the default output from pydantic by calling `to_dict()` of common_resource_attributes
        if self.common_resource_attributes:
            _dict['commonResourceAttributes'] = self.common_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in folder_list (list)
        _items = []
        if self.folder_list:
            for _item in self.folder_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['folder_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pinned_vol_list (list)
        _items = []
        if self.pinned_vol_list:
            for _item in self.pinned_vol_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pinned_vol_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in unassigned_array_list (list)
        _items = []
        if self.unassigned_array_list:
            for _item in self.unassigned_array_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['unassigned_array_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vol_list (list)
        _items = []
        if self.vol_list:
            for _item in self.vol_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vol_list'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if all_flash (nullable) is None
        # and model_fields_set contains the field
        if self.all_flash is None and "all_flash" in self.model_fields_set:
            _dict['all_flash'] = None

        # set to None if array_count (nullable) is None
        # and model_fields_set contains the field
        if self.array_count is None and "array_count" in self.model_fields_set:
            _dict['array_count'] = None

        # set to None if array_list (nullable) is None
        # and model_fields_set contains the field
        if self.array_list is None and "array_list" in self.model_fields_set:
            _dict['array_list'] = None

        # set to None if cache_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.cache_capacity is None and "cache_capacity" in self.model_fields_set:
            _dict['cache_capacity'] = None

        # set to None if capacity (nullable) is None
        # and model_fields_set contains the field
        if self.capacity is None and "capacity" in self.model_fields_set:
            _dict['capacity'] = None

        # set to None if clone_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.clone_ratio is None and "clone_ratio" in self.model_fields_set:
            _dict['clone_ratio'] = None

        # set to None if common_resource_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.common_resource_attributes is None and "common_resource_attributes" in self.model_fields_set:
            _dict['commonResourceAttributes'] = None

        # set to None if compression_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.compression_ratio is None and "compression_ratio" in self.model_fields_set:
            _dict['compression_ratio'] = None

        # set to None if console_uri (nullable) is None
        # and model_fields_set contains the field
        if self.console_uri is None and "console_uri" in self.model_fields_set:
            _dict['consoleUri'] = None

        # set to None if creation_time (nullable) is None
        # and model_fields_set contains the field
        if self.creation_time is None and "creation_time" in self.model_fields_set:
            _dict['creation_time'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customerId'] = None

        # set to None if data_reduction_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.data_reduction_ratio is None and "data_reduction_ratio" in self.model_fields_set:
            _dict['data_reduction_ratio'] = None

        # set to None if dedupe_all_volumes (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_all_volumes is None and "dedupe_all_volumes" in self.model_fields_set:
            _dict['dedupe_all_volumes'] = None

        # set to None if dedupe_all_volumes_capable (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_all_volumes_capable is None and "dedupe_all_volumes_capable" in self.model_fields_set:
            _dict['dedupe_all_volumes_capable'] = None

        # set to None if dedupe_capable (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_capable is None and "dedupe_capable" in self.model_fields_set:
            _dict['dedupe_capable'] = None

        # set to None if dedupe_capacity_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_capacity_bytes is None and "dedupe_capacity_bytes" in self.model_fields_set:
            _dict['dedupe_capacity_bytes'] = None

        # set to None if dedupe_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_ratio is None and "dedupe_ratio" in self.model_fields_set:
            _dict['dedupe_ratio'] = None

        # set to None if dedupe_usage_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.dedupe_usage_bytes is None and "dedupe_usage_bytes" in self.model_fields_set:
            _dict['dedupe_usage_bytes'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if folder_list (nullable) is None
        # and model_fields_set contains the field
        if self.folder_list is None and "folder_list" in self.model_fields_set:
            _dict['folder_list'] = None

        # set to None if free_space (nullable) is None
        # and model_fields_set contains the field
        if self.free_space is None and "free_space" in self.model_fields_set:
            _dict['free_space'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['full_name'] = None

        # set to None if generation (nullable) is None
        # and model_fields_set contains the field
        if self.generation is None and "generation" in self.model_fields_set:
            _dict['generation'] = None

        # set to None if is_default (nullable) is None
        # and model_fields_set contains the field
        if self.is_default is None and "is_default" in self.model_fields_set:
            _dict['is_default'] = None

        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['last_modified'] = None

        # set to None if pinnable_cache_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.pinnable_cache_capacity is None and "pinnable_cache_capacity" in self.model_fields_set:
            _dict['pinnable_cache_capacity'] = None

        # set to None if pinned_cache_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.pinned_cache_capacity is None and "pinned_cache_capacity" in self.model_fields_set:
            _dict['pinned_cache_capacity'] = None

        # set to None if pinned_vol_list (nullable) is None
        # and model_fields_set contains the field
        if self.pinned_vol_list is None and "pinned_vol_list" in self.model_fields_set:
            _dict['pinned_vol_list'] = None

        # set to None if reserve (nullable) is None
        # and model_fields_set contains the field
        if self.reserve is None and "reserve" in self.model_fields_set:
            _dict['reserve'] = None

        # set to None if resource_uri (nullable) is None
        # and model_fields_set contains the field
        if self.resource_uri is None and "resource_uri" in self.model_fields_set:
            _dict['resourceUri'] = None

        # set to None if savings (nullable) is None
        # and model_fields_set contains the field
        if self.savings is None and "savings" in self.model_fields_set:
            _dict['savings'] = None

        # set to None if savings_clone (nullable) is None
        # and model_fields_set contains the field
        if self.savings_clone is None and "savings_clone" in self.model_fields_set:
            _dict['savings_clone'] = None

        # set to None if savings_compression (nullable) is None
        # and model_fields_set contains the field
        if self.savings_compression is None and "savings_compression" in self.model_fields_set:
            _dict['savings_compression'] = None

        # set to None if savings_data_reduction (nullable) is None
        # and model_fields_set contains the field
        if self.savings_data_reduction is None and "savings_data_reduction" in self.model_fields_set:
            _dict['savings_data_reduction'] = None

        # set to None if savings_dedupe (nullable) is None
        # and model_fields_set contains the field
        if self.savings_dedupe is None and "savings_dedupe" in self.model_fields_set:
            _dict['savings_dedupe'] = None

        # set to None if savings_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.savings_ratio is None and "savings_ratio" in self.model_fields_set:
            _dict['savings_ratio'] = None

        # set to None if savings_vol_thin_provisioning (nullable) is None
        # and model_fields_set contains the field
        if self.savings_vol_thin_provisioning is None and "savings_vol_thin_provisioning" in self.model_fields_set:
            _dict['savings_vol_thin_provisioning'] = None

        # set to None if search_name (nullable) is None
        # and model_fields_set contains the field
        if self.search_name is None and "search_name" in self.model_fields_set:
            _dict['search_name'] = None

        # set to None if snap_count (nullable) is None
        # and model_fields_set contains the field
        if self.snap_count is None and "snap_count" in self.model_fields_set:
            _dict['snap_count'] = None

        # set to None if snapcoll_count (nullable) is None
        # and model_fields_set contains the field
        if self.snapcoll_count is None and "snapcoll_count" in self.model_fields_set:
            _dict['snapcoll_count'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if unassigned_array_list (nullable) is None
        # and model_fields_set contains the field
        if self.unassigned_array_list is None and "unassigned_array_list" in self.model_fields_set:
            _dict['unassigned_array_list'] = None

        # set to None if uncompressed_snap_usage_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.uncompressed_snap_usage_bytes is None and "uncompressed_snap_usage_bytes" in self.model_fields_set:
            _dict['uncompressed_snap_usage_bytes'] = None

        # set to None if uncompressed_vol_usage_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.uncompressed_vol_usage_bytes is None and "uncompressed_vol_usage_bytes" in self.model_fields_set:
            _dict['uncompressed_vol_usage_bytes'] = None

        # set to None if unused_reserve (nullable) is None
        # and model_fields_set contains the field
        if self.unused_reserve is None and "unused_reserve" in self.model_fields_set:
            _dict['unused_reserve'] = None

        # set to None if usage (nullable) is None
        # and model_fields_set contains the field
        if self.usage is None and "usage" in self.model_fields_set:
            _dict['usage'] = None

        # set to None if usage_valid (nullable) is None
        # and model_fields_set contains the field
        if self.usage_valid is None and "usage_valid" in self.model_fields_set:
            _dict['usage_valid'] = None

        # set to None if vol_count (nullable) is None
        # and model_fields_set contains the field
        if self.vol_count is None and "vol_count" in self.model_fields_set:
            _dict['vol_count'] = None

        # set to None if vol_list (nullable) is None
        # and model_fields_set contains the field
        if self.vol_list is None and "vol_list" in self.model_fields_set:
            _dict['vol_list'] = None

        # set to None if vol_thin_provisioning_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.vol_thin_provisioning_ratio is None and "vol_thin_provisioning_ratio" in self.model_fields_set:
            _dict['vol_thin_provisioning_ratio'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimblePoolDetailsWithRequestUri from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "all_flash": obj.get("all_flash"),
            "array_count": obj.get("array_count"),
            "array_list": [NimbleArrayDetail.from_dict(_item) for _item in obj["array_list"]] if obj.get("array_list") is not None else None,
            "associated_links": [AssociatedLinksInner.from_dict(_item) for _item in obj["associated_links"]] if obj.get("associated_links") is not None else None,
            "cache_capacity": obj.get("cache_capacity"),
            "capacity": obj.get("capacity"),
            "clone_ratio": obj.get("clone_ratio"),
            "commonResourceAttributes": NimbleCommonResourceAttributes.from_dict(obj["commonResourceAttributes"]) if obj.get("commonResourceAttributes") is not None else None,
            "compression_ratio": obj.get("compression_ratio"),
            "consoleUri": obj.get("consoleUri"),
            "creation_time": obj.get("creation_time"),
            "customerId": obj.get("customerId"),
            "data_reduction_ratio": obj.get("data_reduction_ratio"),
            "dedupe_all_volumes": obj.get("dedupe_all_volumes"),
            "dedupe_all_volumes_capable": obj.get("dedupe_all_volumes_capable"),
            "dedupe_capable": obj.get("dedupe_capable"),
            "dedupe_capacity_bytes": obj.get("dedupe_capacity_bytes"),
            "dedupe_ratio": obj.get("dedupe_ratio"),
            "dedupe_usage_bytes": obj.get("dedupe_usage_bytes"),
            "description": obj.get("description"),
            "folder_list": [NimbleFolderSummary.from_dict(_item) for _item in obj["folder_list"]] if obj.get("folder_list") is not None else None,
            "free_space": obj.get("free_space"),
            "full_name": obj.get("full_name"),
            "generation": obj.get("generation"),
            "is_default": obj.get("is_default"),
            "last_modified": obj.get("last_modified"),
            "pinnable_cache_capacity": obj.get("pinnable_cache_capacity"),
            "pinned_cache_capacity": obj.get("pinned_cache_capacity"),
            "pinned_vol_list": [NimblePinnedVolumeInfo.from_dict(_item) for _item in obj["pinned_vol_list"]] if obj.get("pinned_vol_list") is not None else None,
            "reserve": obj.get("reserve"),
            "resourceUri": obj.get("resourceUri"),
            "savings": obj.get("savings"),
            "savings_clone": obj.get("savings_clone"),
            "savings_compression": obj.get("savings_compression"),
            "savings_data_reduction": obj.get("savings_data_reduction"),
            "savings_dedupe": obj.get("savings_dedupe"),
            "savings_ratio": obj.get("savings_ratio"),
            "savings_vol_thin_provisioning": obj.get("savings_vol_thin_provisioning"),
            "search_name": obj.get("search_name"),
            "snap_count": obj.get("snap_count"),
            "snapcoll_count": obj.get("snapcoll_count"),
            "type": obj.get("type"),
            "unassigned_array_list": [NimbleArrSummary.from_dict(_item) for _item in obj["unassigned_array_list"]] if obj.get("unassigned_array_list") is not None else None,
            "uncompressed_snap_usage_bytes": obj.get("uncompressed_snap_usage_bytes"),
            "uncompressed_vol_usage_bytes": obj.get("uncompressed_vol_usage_bytes"),
            "unused_reserve": obj.get("unused_reserve"),
            "usage": obj.get("usage"),
            "usage_valid": obj.get("usage_valid"),
            "vol_count": obj.get("vol_count"),
            "vol_list": [NimbleVolumeSummary.from_dict(_item) for _item in obj["vol_list"]] if obj.get("vol_list") is not None else None,
            "vol_thin_provisioning_ratio": obj.get("vol_thin_provisioning_ratio")
        })
        return _obj


