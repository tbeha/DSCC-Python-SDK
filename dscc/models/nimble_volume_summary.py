# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NimbleVolumeSummary(BaseModel):
    """
    NimbleVolumeSummary
    """ # noqa: E501
    agent_type: Optional[StrictStr] = Field(default=None, description="Agent type of the volume. Possible values: 'none', 'smis', 'vvol', 'openstack'.")
    has_locked_snapshots: Optional[StrictBool] = Field(default=None, description="To verify a volume has an immutable snapshot or not.")
    id: Optional[StrictStr] = Field(default=None, description="Identifier of volume. A 42 digit hexadecimal number.")
    name: Optional[StrictStr] = Field(default=None, description="Name of volume.")
    vol_id: Optional[StrictStr] = Field(default=None, description="Identifier of volume. A 42 digit hexadecimal number.")
    vol_name: Optional[StrictStr] = Field(default=None, description="Name of volume.")
    volume_creator_id: Optional[StrictStr] = Field(default=None, description="Originator id for the associated volume.")
    volume_creator_name: Optional[StrictStr] = Field(default=None, description="Originator name for the associated volume.")
    __properties: ClassVar[List[str]] = ["agent_type", "has_locked_snapshots", "id", "name", "vol_id", "vol_name", "volume_creator_id", "volume_creator_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimbleVolumeSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if agent_type (nullable) is None
        # and model_fields_set contains the field
        if self.agent_type is None and "agent_type" in self.model_fields_set:
            _dict['agent_type'] = None

        # set to None if has_locked_snapshots (nullable) is None
        # and model_fields_set contains the field
        if self.has_locked_snapshots is None and "has_locked_snapshots" in self.model_fields_set:
            _dict['has_locked_snapshots'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if vol_id (nullable) is None
        # and model_fields_set contains the field
        if self.vol_id is None and "vol_id" in self.model_fields_set:
            _dict['vol_id'] = None

        # set to None if vol_name (nullable) is None
        # and model_fields_set contains the field
        if self.vol_name is None and "vol_name" in self.model_fields_set:
            _dict['vol_name'] = None

        # set to None if volume_creator_id (nullable) is None
        # and model_fields_set contains the field
        if self.volume_creator_id is None and "volume_creator_id" in self.model_fields_set:
            _dict['volume_creator_id'] = None

        # set to None if volume_creator_name (nullable) is None
        # and model_fields_set contains the field
        if self.volume_creator_name is None and "volume_creator_name" in self.model_fields_set:
            _dict['volume_creator_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimbleVolumeSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agent_type": obj.get("agent_type"),
            "has_locked_snapshots": obj.get("has_locked_snapshots"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "vol_id": obj.get("vol_id"),
            "vol_name": obj.get("vol_name"),
            "volume_creator_id": obj.get("volume_creator_id"),
            "volume_creator_name": obj.get("volume_creator_name")
        })
        return _obj


