# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EditAlertSettings(BaseModel):
    """
    EditAlertSettings
    """ # noqa: E501
    alert_from_email_addr: Optional[StrictStr] = Field(default=None, description="From email address to use while sending emails. Case insensitive email address.")
    alert_min_level: Optional[StrictStr] = Field(default=None, description="Minimum level of alert to be notified. Possible values: 'info', 'notice', 'warning', 'critical'.")
    alert_to_email_addrs: Optional[StrictStr] = Field(default=None, description="Comma-separated list of email addresss to receive emails.")
    send_alert_to_support: Optional[StrictBool] = Field(default=None, description="Enable or disable alert to support")
    __properties: ClassVar[List[str]] = ["alert_from_email_addr", "alert_min_level", "alert_to_email_addrs", "send_alert_to_support"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EditAlertSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if alert_from_email_addr (nullable) is None
        # and model_fields_set contains the field
        if self.alert_from_email_addr is None and "alert_from_email_addr" in self.model_fields_set:
            _dict['alert_from_email_addr'] = None

        # set to None if alert_min_level (nullable) is None
        # and model_fields_set contains the field
        if self.alert_min_level is None and "alert_min_level" in self.model_fields_set:
            _dict['alert_min_level'] = None

        # set to None if alert_to_email_addrs (nullable) is None
        # and model_fields_set contains the field
        if self.alert_to_email_addrs is None and "alert_to_email_addrs" in self.model_fields_set:
            _dict['alert_to_email_addrs'] = None

        # set to None if send_alert_to_support (nullable) is None
        # and model_fields_set contains the field
        if self.send_alert_to_support is None and "send_alert_to_support" in self.model_fields_set:
            _dict['send_alert_to_support'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EditAlertSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alert_from_email_addr": obj.get("alert_from_email_addr"),
            "alert_min_level": obj.get("alert_min_level"),
            "alert_to_email_addrs": obj.get("alert_to_email_addrs"),
            "send_alert_to_support": obj.get("send_alert_to_support")
        })
        return _obj


