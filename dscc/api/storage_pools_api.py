# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from dscc.models.device_type4_pool_details import DeviceType4PoolDetails
from dscc.models.device_type4_pools_summary_list import DeviceType4PoolsSummaryList
from dscc.models.device_type4_volumes_list import DeviceType4VolumesList
from dscc.models.fleet_pool_details import FleetPoolDetails
from dscc.models.fleet_volumes_list import FleetVolumesList
from dscc.models.nimble_create_pool_input import NimbleCreatePoolInput
from dscc.models.nimble_edit_pool_input import NimbleEditPoolInput
from dscc.models.nimble_merge_pool_input import NimbleMergePoolInput
from dscc.models.nimble_performance_history_data import NimblePerformanceHistoryData
from dscc.models.nimble_pool_details_with_request_uri import NimblePoolDetailsWithRequestUri
from dscc.models.nimble_pools_list import NimblePoolsList
from dscc.models.pool_capacity_history import PoolCapacityHistory
from dscc.models.primera_pool_details import PrimeraPoolDetails
from dscc.models.primera_pools_summary_list import PrimeraPoolsSummaryList
from dscc.models.primera_volumes_list import PrimeraVolumesList
from dscc.models.storage_pool_performance import StoragePoolPerformance
from dscc.models.storage_pool_performance_history import StoragePoolPerformanceHistory
from dscc.models.storage_pools_fleet_summary_list import StoragePoolsFleetSummaryList
from dscc.models.task_response import TaskResponse

from dscc.api_client import ApiClient, RequestSerialized
from dscc.api_response import ApiResponse
from dscc.rest import RESTResponseType


class StoragePoolsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def device_type1_storage_pool_get_by_id(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PrimeraPoolDetails:
        """Get details of Primera / Alletra 9K storage-pool identified by {id}

        Get details of Primera / Alletra 9K storage-pool identified by {id}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type1_storage_pool_get_by_id_serialize(
            system_id=system_id,
            id=id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrimeraPoolDetails",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type1_storage_pool_get_by_id_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PrimeraPoolDetails]:
        """Get details of Primera / Alletra 9K storage-pool identified by {id}

        Get details of Primera / Alletra 9K storage-pool identified by {id}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type1_storage_pool_get_by_id_serialize(
            system_id=system_id,
            id=id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrimeraPoolDetails",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type1_storage_pool_get_by_id_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get details of Primera / Alletra 9K storage-pool identified by {id}

        Get details of Primera / Alletra 9K storage-pool identified by {id}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type1_storage_pool_get_by_id_serialize(
            system_id=system_id,
            id=id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrimeraPoolDetails",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type1_storage_pool_get_by_id_serialize(
        self,
        system_id,
        id,
        select,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if select is not None:
            
            _query_params.append(('select', select))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/device-type1/{systemId}/storage-pools/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type1_storage_pool_list(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter pools by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort pools by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PrimeraPoolsSummaryList:
        """Get all storage-pools details by Primera / Alletra 9K

        Get all storage-pools details by Primera / Alletra 9K

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter pools by Key.
        :type filter: str
        :param sort: oData query to sort pools by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type1_storage_pool_list_serialize(
            system_id=system_id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrimeraPoolsSummaryList",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type1_storage_pool_list_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter pools by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort pools by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PrimeraPoolsSummaryList]:
        """Get all storage-pools details by Primera / Alletra 9K

        Get all storage-pools details by Primera / Alletra 9K

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter pools by Key.
        :type filter: str
        :param sort: oData query to sort pools by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type1_storage_pool_list_serialize(
            system_id=system_id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrimeraPoolsSummaryList",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type1_storage_pool_list_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter pools by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort pools by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all storage-pools details by Primera / Alletra 9K

        Get all storage-pools details by Primera / Alletra 9K

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter pools by Key.
        :type filter: str
        :param sort: oData query to sort pools by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type1_storage_pool_list_serialize(
            system_id=system_id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrimeraPoolsSummaryList",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type1_storage_pool_list_serialize(
        self,
        system_id,
        limit,
        offset,
        filter,
        sort,
        select,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if select is not None:
            
            _query_params.append(('select', select))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/device-type1/{systemId}/storage-pools',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type1_storage_pool_volume_get_by_id(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PrimeraVolumesList:
        """Get all volumes for storage-pool identified by {uuid} of Primera / Alletra 9K

        Get all volumes for storage-pool identified by {uuid} of Primera / Alletra 9K

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter by Key.
        :type filter: str
        :param sort: oData query to sort by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type1_storage_pool_volume_get_by_id_serialize(
            system_id=system_id,
            id=id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrimeraVolumesList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type1_storage_pool_volume_get_by_id_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PrimeraVolumesList]:
        """Get all volumes for storage-pool identified by {uuid} of Primera / Alletra 9K

        Get all volumes for storage-pool identified by {uuid} of Primera / Alletra 9K

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter by Key.
        :type filter: str
        :param sort: oData query to sort by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type1_storage_pool_volume_get_by_id_serialize(
            system_id=system_id,
            id=id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrimeraVolumesList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type1_storage_pool_volume_get_by_id_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all volumes for storage-pool identified by {uuid} of Primera / Alletra 9K

        Get all volumes for storage-pool identified by {uuid} of Primera / Alletra 9K

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter by Key.
        :type filter: str
        :param sort: oData query to sort by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type1_storage_pool_volume_get_by_id_serialize(
            system_id=system_id,
            id=id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrimeraVolumesList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type1_storage_pool_volume_get_by_id_serialize(
        self,
        system_id,
        id,
        limit,
        offset,
        filter,
        sort,
        select,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if select is not None:
            
            _query_params.append(('select', select))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/device-type1/{systemId}/storage-pools/{id}/volumes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type2_create_pool(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        nimble_create_pool_input: NimbleCreatePoolInput,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TaskResponse:
        """Create storage pool from Nimble / Alletra 6K  system identified by {systemId}

        Create storage pool from Nimble / Alletra 6K  system identified by {systemId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param nimble_create_pool_input: (required)
        :type nimble_create_pool_input: NimbleCreatePoolInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_create_pool_serialize(
            system_id=system_id,
            nimble_create_pool_input=nimble_create_pool_input,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TaskResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type2_create_pool_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        nimble_create_pool_input: NimbleCreatePoolInput,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TaskResponse]:
        """Create storage pool from Nimble / Alletra 6K  system identified by {systemId}

        Create storage pool from Nimble / Alletra 6K  system identified by {systemId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param nimble_create_pool_input: (required)
        :type nimble_create_pool_input: NimbleCreatePoolInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_create_pool_serialize(
            system_id=system_id,
            nimble_create_pool_input=nimble_create_pool_input,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TaskResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type2_create_pool_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        nimble_create_pool_input: NimbleCreatePoolInput,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create storage pool from Nimble / Alletra 6K  system identified by {systemId}

        Create storage pool from Nimble / Alletra 6K  system identified by {systemId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param nimble_create_pool_input: (required)
        :type nimble_create_pool_input: NimbleCreatePoolInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_create_pool_serialize(
            system_id=system_id,
            nimble_create_pool_input=nimble_create_pool_input,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TaskResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type2_create_pool_serialize(
        self,
        system_id,
        nimble_create_pool_input,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if nimble_create_pool_input is not None:
            _body_params = nimble_create_pool_input


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/storage-systems/device-type2/{systemId}/storage-pools',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type2_edit_pool_detail_by_id(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of pool. A 42 digit hexadecimal number.")],
        nimble_edit_pool_input: NimbleEditPoolInput,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TaskResponse:
        """Edit details of Nimble / Alletra 6K pool identified by {storagePoolId}

        Edit details of Nimble / Alletra 6K pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param nimble_edit_pool_input: (required)
        :type nimble_edit_pool_input: NimbleEditPoolInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_edit_pool_detail_by_id_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            nimble_edit_pool_input=nimble_edit_pool_input,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TaskResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type2_edit_pool_detail_by_id_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of pool. A 42 digit hexadecimal number.")],
        nimble_edit_pool_input: NimbleEditPoolInput,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TaskResponse]:
        """Edit details of Nimble / Alletra 6K pool identified by {storagePoolId}

        Edit details of Nimble / Alletra 6K pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param nimble_edit_pool_input: (required)
        :type nimble_edit_pool_input: NimbleEditPoolInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_edit_pool_detail_by_id_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            nimble_edit_pool_input=nimble_edit_pool_input,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TaskResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type2_edit_pool_detail_by_id_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of pool. A 42 digit hexadecimal number.")],
        nimble_edit_pool_input: NimbleEditPoolInput,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Edit details of Nimble / Alletra 6K pool identified by {storagePoolId}

        Edit details of Nimble / Alletra 6K pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param nimble_edit_pool_input: (required)
        :type nimble_edit_pool_input: NimbleEditPoolInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_edit_pool_detail_by_id_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            nimble_edit_pool_input=nimble_edit_pool_input,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TaskResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type2_edit_pool_detail_by_id_serialize(
        self,
        system_id,
        storage_pool_id,
        nimble_edit_pool_input,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if storage_pool_id is not None:
            _path_params['storagePoolId'] = storage_pool_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if nimble_edit_pool_input is not None:
            _body_params = nimble_edit_pool_input


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/v1/storage-systems/device-type2/{systemId}/storage-pools/{storagePoolId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type2_get_all_pool_details(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Lucene query to filter pools by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort pools resource by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NimblePoolsList:
        """Get all pools details by Nimble / Alletra 6K

        Get all pools details by Nimble / Alletra 6K

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: Lucene query to filter pools by Key.
        :type filter: str
        :param sort: oData query to sort pools resource by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_all_pool_details_serialize(
            system_id=system_id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NimblePoolsList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type2_get_all_pool_details_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Lucene query to filter pools by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort pools resource by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NimblePoolsList]:
        """Get all pools details by Nimble / Alletra 6K

        Get all pools details by Nimble / Alletra 6K

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: Lucene query to filter pools by Key.
        :type filter: str
        :param sort: oData query to sort pools resource by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_all_pool_details_serialize(
            system_id=system_id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NimblePoolsList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type2_get_all_pool_details_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Lucene query to filter pools by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort pools resource by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all pools details by Nimble / Alletra 6K

        Get all pools details by Nimble / Alletra 6K

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: Lucene query to filter pools by Key.
        :type filter: str
        :param sort: oData query to sort pools resource by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_all_pool_details_serialize(
            system_id=system_id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NimblePoolsList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type2_get_all_pool_details_serialize(
        self,
        system_id,
        limit,
        offset,
        filter,
        sort,
        select,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if select is not None:
            
            _query_params.append(('select', select))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/device-type2/{systemId}/storage-pools',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type2_get_pool_capacity_history(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of storage pool. A 42 digit hexadecimal number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        range: Annotated[Optional[StrictStr], Field(description="range will define start and end time in which query has to be made.")] = None,
        time_interval_min: Annotated[Optional[StrictInt], Field(description="It defines granularity in minutes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PoolCapacityHistory:
        """Get storage pool capacity trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        Get storage pool capacity trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param range: range will define start and end time in which query has to be made.
        :type range: str
        :param time_interval_min: It defines granularity in minutes.
        :type time_interval_min: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pool_capacity_history_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            select=select,
            range=range,
            time_interval_min=time_interval_min,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PoolCapacityHistory",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type2_get_pool_capacity_history_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of storage pool. A 42 digit hexadecimal number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        range: Annotated[Optional[StrictStr], Field(description="range will define start and end time in which query has to be made.")] = None,
        time_interval_min: Annotated[Optional[StrictInt], Field(description="It defines granularity in minutes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PoolCapacityHistory]:
        """Get storage pool capacity trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        Get storage pool capacity trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param range: range will define start and end time in which query has to be made.
        :type range: str
        :param time_interval_min: It defines granularity in minutes.
        :type time_interval_min: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pool_capacity_history_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            select=select,
            range=range,
            time_interval_min=time_interval_min,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PoolCapacityHistory",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type2_get_pool_capacity_history_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of storage pool. A 42 digit hexadecimal number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        range: Annotated[Optional[StrictStr], Field(description="range will define start and end time in which query has to be made.")] = None,
        time_interval_min: Annotated[Optional[StrictInt], Field(description="It defines granularity in minutes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get storage pool capacity trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        Get storage pool capacity trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param range: range will define start and end time in which query has to be made.
        :type range: str
        :param time_interval_min: It defines granularity in minutes.
        :type time_interval_min: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pool_capacity_history_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            select=select,
            range=range,
            time_interval_min=time_interval_min,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PoolCapacityHistory",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type2_get_pool_capacity_history_serialize(
        self,
        system_id,
        storage_pool_id,
        select,
        range,
        time_interval_min,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if storage_pool_id is not None:
            _path_params['storagePoolId'] = storage_pool_id
        # process the query parameters
        if select is not None:
            
            _query_params.append(('select', select))
            
        if range is not None:
            
            _query_params.append(('range', range))
            
        if time_interval_min is not None:
            
            _query_params.append(('timeIntervalMin', time_interval_min))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/device-type2/{systemId}/storage-pools/{storagePoolId}/capacity-history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type2_get_pool_detail_by_id(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of pool. A 42 digit hexadecimal number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NimblePoolDetailsWithRequestUri:
        """Get details of Nimble / Alletra 6K pool identified by {storagePoolId}

        Get details of Nimble / Alletra 6K pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pool_detail_by_id_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NimblePoolDetailsWithRequestUri",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type2_get_pool_detail_by_id_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of pool. A 42 digit hexadecimal number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NimblePoolDetailsWithRequestUri]:
        """Get details of Nimble / Alletra 6K pool identified by {storagePoolId}

        Get details of Nimble / Alletra 6K pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pool_detail_by_id_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NimblePoolDetailsWithRequestUri",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type2_get_pool_detail_by_id_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of pool. A 42 digit hexadecimal number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get details of Nimble / Alletra 6K pool identified by {storagePoolId}

        Get details of Nimble / Alletra 6K pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pool_detail_by_id_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NimblePoolDetailsWithRequestUri",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type2_get_pool_detail_by_id_serialize(
        self,
        system_id,
        storage_pool_id,
        select,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if storage_pool_id is not None:
            _path_params['storagePoolId'] = storage_pool_id
        # process the query parameters
        if select is not None:
            
            _query_params.append(('select', select))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/device-type2/{systemId}/storage-pools/{storagePoolId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type2_get_pool_performance_history(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of storage pool. A 42 digit hexadecimal number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        range: Annotated[Optional[StrictStr], Field(description="range will define start and end time in which query has to be made.")] = None,
        time_interval_min: Annotated[Optional[StrictInt], Field(description="It defines granularity in minutes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StoragePoolPerformanceHistory:
        """Get performance trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        Get performance trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param range: range will define start and end time in which query has to be made.
        :type range: str
        :param time_interval_min: It defines granularity in minutes.
        :type time_interval_min: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pool_performance_history_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            select=select,
            range=range,
            time_interval_min=time_interval_min,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoragePoolPerformanceHistory",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type2_get_pool_performance_history_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of storage pool. A 42 digit hexadecimal number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        range: Annotated[Optional[StrictStr], Field(description="range will define start and end time in which query has to be made.")] = None,
        time_interval_min: Annotated[Optional[StrictInt], Field(description="It defines granularity in minutes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StoragePoolPerformanceHistory]:
        """Get performance trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        Get performance trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param range: range will define start and end time in which query has to be made.
        :type range: str
        :param time_interval_min: It defines granularity in minutes.
        :type time_interval_min: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pool_performance_history_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            select=select,
            range=range,
            time_interval_min=time_interval_min,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoragePoolPerformanceHistory",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type2_get_pool_performance_history_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of storage pool. A 42 digit hexadecimal number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        range: Annotated[Optional[StrictStr], Field(description="range will define start and end time in which query has to be made.")] = None,
        time_interval_min: Annotated[Optional[StrictInt], Field(description="It defines granularity in minutes.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get performance trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        Get performance trend data of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param range: range will define start and end time in which query has to be made.
        :type range: str
        :param time_interval_min: It defines granularity in minutes.
        :type time_interval_min: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pool_performance_history_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            select=select,
            range=range,
            time_interval_min=time_interval_min,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoragePoolPerformanceHistory",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type2_get_pool_performance_history_serialize(
        self,
        system_id,
        storage_pool_id,
        select,
        range,
        time_interval_min,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if storage_pool_id is not None:
            _path_params['storagePoolId'] = storage_pool_id
        # process the query parameters
        if select is not None:
            
            _query_params.append(('select', select))
            
        if range is not None:
            
            _query_params.append(('range', range))
            
        if time_interval_min is not None:
            
            _query_params.append(('timeIntervalMin', time_interval_min))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/device-type2/{systemId}/storage-pools/{storagePoolId}/performance-history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type2_get_pool_performance_statistics(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of storage pool. A 42 digit hexadecimal number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StoragePoolPerformance:
        """Get performance statistics of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        Get performance statistics of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pool_performance_statistics_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoragePoolPerformance",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type2_get_pool_performance_statistics_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of storage pool. A 42 digit hexadecimal number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StoragePoolPerformance]:
        """Get performance statistics of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        Get performance statistics of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pool_performance_statistics_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoragePoolPerformance",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type2_get_pool_performance_statistics_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of storage pool. A 42 digit hexadecimal number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get performance statistics of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        Get performance statistics of Nimble / Alletra 6K storage pool identified by {storagePoolId}

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of storage pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pool_performance_statistics_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoragePoolPerformance",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type2_get_pool_performance_statistics_serialize(
        self,
        system_id,
        storage_pool_id,
        select,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if storage_pool_id is not None:
            _path_params['storagePoolId'] = storage_pool_id
        # process the query parameters
        if select is not None:
            
            _query_params.append(('select', select))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/device-type2/{systemId}/storage-pools/{storagePoolId}/performance-statistics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type2_get_pools_performance_history(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        range: Annotated[Optional[StrictStr], Field(description="range will define start and end time in which query has to be made.")] = None,
        time_interval_min: Annotated[Optional[StrictInt], Field(description="It defines granularity in minutes.")] = None,
        compare_by: Annotated[Optional[StrictStr], Field(description="compareBy will define top and compare metrics for which query has to be made")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="filter will define objects to be filtered")] = None,
        metric_type: Annotated[Optional[StrictStr], Field(description="metricTypes will define comma separated metrics")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NimblePerformanceHistoryData:
        """Get performance history of Nimble / Alletra 6K Pools

        Get performance history of Nimble / Alletra 6K Pools

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param range: range will define start and end time in which query has to be made.
        :type range: str
        :param time_interval_min: It defines granularity in minutes.
        :type time_interval_min: int
        :param compare_by: compareBy will define top and compare metrics for which query has to be made
        :type compare_by: str
        :param filter: filter will define objects to be filtered
        :type filter: str
        :param metric_type: metricTypes will define comma separated metrics
        :type metric_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pools_performance_history_serialize(
            system_id=system_id,
            range=range,
            time_interval_min=time_interval_min,
            compare_by=compare_by,
            filter=filter,
            metric_type=metric_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NimblePerformanceHistoryData",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type2_get_pools_performance_history_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        range: Annotated[Optional[StrictStr], Field(description="range will define start and end time in which query has to be made.")] = None,
        time_interval_min: Annotated[Optional[StrictInt], Field(description="It defines granularity in minutes.")] = None,
        compare_by: Annotated[Optional[StrictStr], Field(description="compareBy will define top and compare metrics for which query has to be made")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="filter will define objects to be filtered")] = None,
        metric_type: Annotated[Optional[StrictStr], Field(description="metricTypes will define comma separated metrics")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NimblePerformanceHistoryData]:
        """Get performance history of Nimble / Alletra 6K Pools

        Get performance history of Nimble / Alletra 6K Pools

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param range: range will define start and end time in which query has to be made.
        :type range: str
        :param time_interval_min: It defines granularity in minutes.
        :type time_interval_min: int
        :param compare_by: compareBy will define top and compare metrics for which query has to be made
        :type compare_by: str
        :param filter: filter will define objects to be filtered
        :type filter: str
        :param metric_type: metricTypes will define comma separated metrics
        :type metric_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pools_performance_history_serialize(
            system_id=system_id,
            range=range,
            time_interval_min=time_interval_min,
            compare_by=compare_by,
            filter=filter,
            metric_type=metric_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NimblePerformanceHistoryData",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type2_get_pools_performance_history_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        range: Annotated[Optional[StrictStr], Field(description="range will define start and end time in which query has to be made.")] = None,
        time_interval_min: Annotated[Optional[StrictInt], Field(description="It defines granularity in minutes.")] = None,
        compare_by: Annotated[Optional[StrictStr], Field(description="compareBy will define top and compare metrics for which query has to be made")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="filter will define objects to be filtered")] = None,
        metric_type: Annotated[Optional[StrictStr], Field(description="metricTypes will define comma separated metrics")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get performance history of Nimble / Alletra 6K Pools

        Get performance history of Nimble / Alletra 6K Pools

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param range: range will define start and end time in which query has to be made.
        :type range: str
        :param time_interval_min: It defines granularity in minutes.
        :type time_interval_min: int
        :param compare_by: compareBy will define top and compare metrics for which query has to be made
        :type compare_by: str
        :param filter: filter will define objects to be filtered
        :type filter: str
        :param metric_type: metricTypes will define comma separated metrics
        :type metric_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_get_pools_performance_history_serialize(
            system_id=system_id,
            range=range,
            time_interval_min=time_interval_min,
            compare_by=compare_by,
            filter=filter,
            metric_type=metric_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NimblePerformanceHistoryData",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type2_get_pools_performance_history_serialize(
        self,
        system_id,
        range,
        time_interval_min,
        compare_by,
        filter,
        metric_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        # process the query parameters
        if range is not None:
            
            _query_params.append(('range', range))
            
        if time_interval_min is not None:
            
            _query_params.append(('timeIntervalMin', time_interval_min))
            
        if compare_by is not None:
            
            _query_params.append(('compareBy', compare_by))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if metric_type is not None:
            
            _query_params.append(('metricType', metric_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/device-type2/{systemId}/pools-performance',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type2_merge_pool_by_id(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of pool. A 42 digit hexadecimal number.")],
        nimble_merge_pool_input: NimbleMergePoolInput,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TaskResponse:
        """Merge pool identified by {storagePoolId} from Nimble / Alletra 6K

        Merge pool identified by {storagePoolId} from Nimble / Alletra 6K

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param nimble_merge_pool_input: (required)
        :type nimble_merge_pool_input: NimbleMergePoolInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_merge_pool_by_id_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            nimble_merge_pool_input=nimble_merge_pool_input,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TaskResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type2_merge_pool_by_id_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of pool. A 42 digit hexadecimal number.")],
        nimble_merge_pool_input: NimbleMergePoolInput,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TaskResponse]:
        """Merge pool identified by {storagePoolId} from Nimble / Alletra 6K

        Merge pool identified by {storagePoolId} from Nimble / Alletra 6K

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param nimble_merge_pool_input: (required)
        :type nimble_merge_pool_input: NimbleMergePoolInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_merge_pool_by_id_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            nimble_merge_pool_input=nimble_merge_pool_input,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TaskResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type2_merge_pool_by_id_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of pool. A 42 digit hexadecimal number.")],
        nimble_merge_pool_input: NimbleMergePoolInput,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Merge pool identified by {storagePoolId} from Nimble / Alletra 6K

        Merge pool identified by {storagePoolId} from Nimble / Alletra 6K

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param nimble_merge_pool_input: (required)
        :type nimble_merge_pool_input: NimbleMergePoolInput
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_merge_pool_by_id_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            nimble_merge_pool_input=nimble_merge_pool_input,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TaskResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type2_merge_pool_by_id_serialize(
        self,
        system_id,
        storage_pool_id,
        nimble_merge_pool_input,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if storage_pool_id is not None:
            _path_params['storagePoolId'] = storage_pool_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if nimble_merge_pool_input is not None:
            _body_params = nimble_merge_pool_input


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/storage-systems/device-type2/{systemId}/storage-pools/{storagePoolId}/actions/merge',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type2_remove_pool_by_id(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of pool. A 42 digit hexadecimal number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TaskResponse:
        """Delete pool identified by {storagePoolId} from Nimble / Alletra 6K

        Delete pool identified by {storagePoolId} from Nimble / Alletra 6K

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_remove_pool_by_id_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TaskResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type2_remove_pool_by_id_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of pool. A 42 digit hexadecimal number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TaskResponse]:
        """Delete pool identified by {storagePoolId} from Nimble / Alletra 6K

        Delete pool identified by {storagePoolId} from Nimble / Alletra 6K

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_remove_pool_by_id_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TaskResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type2_remove_pool_by_id_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="ID of the storage system")],
        storage_pool_id: Annotated[StrictStr, Field(description="Identifier of pool. A 42 digit hexadecimal number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete pool identified by {storagePoolId} from Nimble / Alletra 6K

        Delete pool identified by {storagePoolId} from Nimble / Alletra 6K

        :param system_id: ID of the storage system (required)
        :type system_id: str
        :param storage_pool_id: Identifier of pool. A 42 digit hexadecimal number. (required)
        :type storage_pool_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type2_remove_pool_by_id_serialize(
            system_id=system_id,
            storage_pool_id=storage_pool_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TaskResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type2_remove_pool_by_id_serialize(
        self,
        system_id,
        storage_pool_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if storage_pool_id is not None:
            _path_params['storagePoolId'] = storage_pool_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v1/storage-systems/device-type2/{systemId}/storage-pools/{storagePoolId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type4_storage_pool_get_by_id(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeviceType4PoolDetails:
        """Get details of HPE Alletra Storage MP storage-pool identified by {id}

        Get details of HPE Alletra Storage MP storage-pool identified by {id}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type4_storage_pool_get_by_id_serialize(
            system_id=system_id,
            id=id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeviceType4PoolDetails",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type4_storage_pool_get_by_id_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeviceType4PoolDetails]:
        """Get details of HPE Alletra Storage MP storage-pool identified by {id}

        Get details of HPE Alletra Storage MP storage-pool identified by {id}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type4_storage_pool_get_by_id_serialize(
            system_id=system_id,
            id=id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeviceType4PoolDetails",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type4_storage_pool_get_by_id_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get details of HPE Alletra Storage MP storage-pool identified by {id}

        Get details of HPE Alletra Storage MP storage-pool identified by {id}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type4_storage_pool_get_by_id_serialize(
            system_id=system_id,
            id=id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeviceType4PoolDetails",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type4_storage_pool_get_by_id_serialize(
        self,
        system_id,
        id,
        select,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if select is not None:
            
            _query_params.append(('select', select))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/device-type4/{systemId}/storage-pools/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type4_storage_pool_list(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter pools by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort pools by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeviceType4PoolsSummaryList:
        """Get all storage-pools details by HPE Alletra Storage MP

        Get all storage-pools details by HPE Alletra Storage MP

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter pools by Key.
        :type filter: str
        :param sort: oData query to sort pools by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type4_storage_pool_list_serialize(
            system_id=system_id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeviceType4PoolsSummaryList",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type4_storage_pool_list_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter pools by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort pools by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeviceType4PoolsSummaryList]:
        """Get all storage-pools details by HPE Alletra Storage MP

        Get all storage-pools details by HPE Alletra Storage MP

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter pools by Key.
        :type filter: str
        :param sort: oData query to sort pools by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type4_storage_pool_list_serialize(
            system_id=system_id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeviceType4PoolsSummaryList",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type4_storage_pool_list_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter pools by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort pools by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all storage-pools details by HPE Alletra Storage MP

        Get all storage-pools details by HPE Alletra Storage MP

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter pools by Key.
        :type filter: str
        :param sort: oData query to sort pools by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type4_storage_pool_list_serialize(
            system_id=system_id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeviceType4PoolsSummaryList",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type4_storage_pool_list_serialize(
        self,
        system_id,
        limit,
        offset,
        filter,
        sort,
        select,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if select is not None:
            
            _query_params.append(('select', select))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/device-type4/{systemId}/storage-pools',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def device_type4_storage_pool_volume_get_by_id(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeviceType4VolumesList:
        """Get all volumes for storage-pool identified by {uuid} of HPE Alletra Storage MP

        Get all volumes for storage-pool identified by {uuid} of HPE Alletra Storage MP

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter by Key.
        :type filter: str
        :param sort: oData query to sort by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type4_storage_pool_volume_get_by_id_serialize(
            system_id=system_id,
            id=id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeviceType4VolumesList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def device_type4_storage_pool_volume_get_by_id_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeviceType4VolumesList]:
        """Get all volumes for storage-pool identified by {uuid} of HPE Alletra Storage MP

        Get all volumes for storage-pool identified by {uuid} of HPE Alletra Storage MP

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter by Key.
        :type filter: str
        :param sort: oData query to sort by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type4_storage_pool_volume_get_by_id_serialize(
            system_id=system_id,
            id=id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeviceType4VolumesList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def device_type4_storage_pool_volume_get_by_id_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all volumes for storage-pool identified by {uuid} of HPE Alletra Storage MP

        Get all volumes for storage-pool identified by {uuid} of HPE Alletra Storage MP

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter by Key.
        :type filter: str
        :param sort: oData query to sort by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._device_type4_storage_pool_volume_get_by_id_serialize(
            system_id=system_id,
            id=id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeviceType4VolumesList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _device_type4_storage_pool_volume_get_by_id_serialize(
        self,
        system_id,
        id,
        limit,
        offset,
        filter,
        sort,
        select,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if select is not None:
            
            _query_params.append(('select', select))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/device-type4/{systemId}/storage-pools/{id}/volumes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def storage_pool_volumes_list(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FleetVolumesList:
        """Get all volumes for storage-pool identified by {id}

        Get all volumes for storage-pool identified by {id}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_pool_volumes_list_serialize(
            system_id=system_id,
            id=id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FleetVolumesList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def storage_pool_volumes_list_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FleetVolumesList]:
        """Get all volumes for storage-pool identified by {id}

        Get all volumes for storage-pool identified by {id}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_pool_volumes_list_serialize(
            system_id=system_id,
            id=id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FleetVolumesList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def storage_pool_volumes_list_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all volumes for storage-pool identified by {id}

        Get all volumes for storage-pool identified by {id}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_pool_volumes_list_serialize(
            system_id=system_id,
            id=id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FleetVolumesList",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _storage_pool_volumes_list_serialize(
        self,
        system_id,
        id,
        select,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if select is not None:
            
            _query_params.append(('select', select))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/{systemId}/storage-pools/{id}/volumes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def storage_pools_get_by_id(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FleetPoolDetails:
        """Get details of storage pools identified by {id}

        Get details of storage pools identified by {id}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_pools_get_by_id_serialize(
            system_id=system_id,
            id=id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FleetPoolDetails",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def storage_pools_get_by_id_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FleetPoolDetails]:
        """Get details of storage pools identified by {id}

        Get details of storage pools identified by {id}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_pools_get_by_id_serialize(
            system_id=system_id,
            id=id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FleetPoolDetails",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def storage_pools_get_by_id_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        id: Annotated[StrictStr, Field(description="Identifier of pool. A 32 digit number.")],
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get details of storage pools identified by {id}

        Get details of storage pools identified by {id}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param id: Identifier of pool. A 32 digit number. (required)
        :type id: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_pools_get_by_id_serialize(
            system_id=system_id,
            id=id,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FleetPoolDetails",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _storage_pools_get_by_id_serialize(
        self,
        system_id,
        id,
        select,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if select is not None:
            
            _query_params.append(('select', select))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/{systemId}/storage-pools/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def storage_pools_list(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter pools by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort pools by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StoragePoolsFleetSummaryList:
        """Get all storage pools for a device {systemId}

        Get all storage pools for a device {systemId}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter pools by Key.
        :type filter: str
        :param sort: oData query to sort pools by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_pools_list_serialize(
            system_id=system_id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoragePoolsFleetSummaryList",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def storage_pools_list_with_http_info(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter pools by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort pools by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StoragePoolsFleetSummaryList]:
        """Get all storage pools for a device {systemId}

        Get all storage pools for a device {systemId}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter pools by Key.
        :type filter: str
        :param sort: oData query to sort pools by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_pools_list_serialize(
            system_id=system_id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoragePoolsFleetSummaryList",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def storage_pools_list_without_preload_content(
        self,
        system_id: Annotated[StrictStr, Field(description="systemId of the storage system")],
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Number of items to return at a time")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The offset of the first item in the collection to return")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="oData query to filter pools by Key.")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="oData query to sort pools by Key.")] = None,
        select: Annotated[Optional[StrictStr], Field(description="Query to select only the required parameters, separated by . if nested")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all storage pools for a device {systemId}

        Get all storage pools for a device {systemId}

        :param system_id: systemId of the storage system (required)
        :type system_id: str
        :param limit: Number of items to return at a time
        :type limit: int
        :param offset: The offset of the first item in the collection to return
        :type offset: int
        :param filter: oData query to filter pools by Key.
        :type filter: str
        :param sort: oData query to sort pools by Key.
        :type sort: str
        :param select: Query to select only the required parameters, separated by . if nested
        :type select: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_pools_list_serialize(
            system_id=system_id,
            limit=limit,
            offset=offset,
            filter=filter,
            sort=sort,
            select=select,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoragePoolsFleetSummaryList",
            '304': "ErrorResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _storage_pools_list_serialize(
        self,
        system_id,
        limit,
        offset,
        filter,
        sort,
        select,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if system_id is not None:
            _path_params['systemId'] = system_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if select is not None:
            
            _query_params.append(('select', select))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/storage-systems/{systemId}/storage-pools',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


