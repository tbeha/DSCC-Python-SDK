# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.port_details import PortDetails

class TestPortDetails(unittest.TestCase):
    """PortDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PortDetails:
        """Test PortDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PortDetails`
        """
        model = PortDetails()
        if include_optional:
            return PortDetails(
                associated_links = [{"resourceUri":"/v1/storage-systems/device-type1/7CE751P312","type":"systems"},{"resourceUri":"/v1/storage-systems/device-type1/7CE751P312/nodes/e9d353bf98fc1a6bdb90b824e3ca14b5","type":"nodes"}],
                card_type = dscc.models.card_type.cardType(
                    default = '', 
                    key = '', ),
                var_class = 56,
                class2 = '',
                common_resource_attributes = dscc.models.primera_common_resource_attributes.primeraCommonResourceAttributes(
                    cloud_state = 'CONNECTED', ),
                config = 'valid',
                config_mode = '',
                connection_type = '',
                console_uri = 'data-ops-manager/storage-systems/device-type1/7CE751P312/ports/220fcd48857f63c0f354c6723ec5d5cb',
                customer_id = 'string',
                devices = [
                    dscc.models.device_type4connected_devices_inner.DeviceType4connectedDevices_inner(
                        name = '', 
                        position = 56, )
                    ],
                displayname = '',
                domain = '',
                failover_status = '',
                fc_data = dscc.models.port_fc.portFC(
                    node_wwn = '', 
                    port_wwn = '', ),
                fw_version = '12.2.396.1',
                generation = 0,
                id = '9d765763116c20a508e8996f2a10821d',
                initiator_ports = dscc.models.initiator_port.initiatorPort(
                    aliases = '', 
                    current_speed = '', 
                    hba_driver_version = '', 
                    hba_firmware_version = '', 
                    hba_manufacturer = '', 
                    hba_model = '', 
                    hba_os_name_version = '', 
                    host_name = '', 
                    number = 56, 
                    os_device_name = '', 
                    ssan_qos_support = '', 
                    ssan_security_support = '', 
                    supported_speeds = '', 
                    wwn = '', ),
                interrupt_coalesce = '',
                ip_data = dscc.models.port_ip.portIP(
                    autoneg = True, 
                    duplex = '', 
                    gateway_address = '', 
                    gateway_address_v6 = '', 
                    ip_address = '', 
                    ip_address_v6 = '', 
                    mac_address = '', 
                    mtu = '', 
                    subnet_mask = '', 
                    subnet_mask_v6 = '', ),
                iscsi_data = dscc.models.port_iscsi.portISCSI(
                    gateway_address = '', 
                    i_sns_primary_address = '', 
                    i_sns_tcp_port = 56, 
                    ip_address = '', 
                    iscsi_name = '', 
                    mac_address = '', 
                    mtu = '', 
                    send_target_group_tag = 56, 
                    subnet_mask = '', 
                    supports_vlan = True, 
                    target_portal_group_tag = 56, ),
                label = 'IP0',
                manufacturing = dscc.models.manufacturing_single.manufacturingSingle(
                    assembly_rev = '002*', 
                    check_sum = '--', 
                    hpe_model_name = 'HPE 3PAR 600 2S Node', 
                    manufacturer = 'XYRATEX', 
                    model = '0974244-06', 
                    saleable_part_number = '0974244-06', 
                    saleable_serial_number = '4UW0002941', 
                    serial_number = 'PMW0974244G4T88', 
                    spare_part_number = 'P04031-001', ),
                mode = '',
                mode_change = '',
                name = '',
                node_card_id = '',
                node_id = 'e9d353bf98fc1a6bdb90b824e3ca14b5',
                partner = dscc.models.partner_port.partnerPort(
                    node_wwn_or_name = '', 
                    port_wwn_or_ip = '', 
                    position = dscc.models.partner_port_position.partnerPortPosition(
                        node = 56, 
                        port = 56, 
                        slot = 56, ), ),
                port_sfp = dscc.models.port_sfp.portSfp(
                    fw_version = '', 
                    manufacturing = dscc.models.manufacturing_single.manufacturingSingle(
                        assembly_rev = '002*', 
                        check_sum = '--', 
                        hpe_model_name = 'HPE 3PAR 600 2S Node', 
                        manufacturer = 'XYRATEX', 
                        model = '0974244-06', 
                        saleable_part_number = '0974244-06', 
                        saleable_serial_number = '4UW0002941', 
                        serial_number = 'PMW0974244G4T88', 
                        spare_part_number = 'P04031-001', ), 
                    qualified = True, 
                    rx_loss_pin = dscc.models.rx_loss_pin.rxLossPin(
                        default = '', 
                        key = '', ), 
                    rx_power_low = True, 
                    speed = 56, 
                    state = dscc.models.state.STATE(
                        detailed = [
                            ''
                            ], 
                        overall = 'STATE_NORMAL', ), 
                    support_ddm = True, 
                    tx_disable_pin = dscc.models.tx_disable_pin.txDisablePin(
                        default = '', 
                        key = '', ), 
                    tx_fault_pin = dscc.models.tx_fault_pin.txFaultPin(
                        default = '', 
                        key = '', ), ),
                port_type = '',
                position = dscc.models.port_position.portPosition(
                    node = 56, 
                    port = 56, 
                    slot = 56, ),
                protocol = '',
                request_uri = '/v1/storage-systems/device-type1/7CE751P312/ports/220fcd48857f63c0f354c6723ec5d5cb',
                resource_uri = '/v1/storage-systems/device-type1/7CE751P312/ports/220fcd48857f63c0f354c6723ec5d5cb',
                revision = '',
                smart_san = '',
                speed_actual = '',
                speed_configured = '',
                speed_max = '',
                speed_min = '',
                state = dscc.models.state.STATE(
                    detailed = [
                        ''
                        ], 
                    overall = 'STATE_NORMAL', ),
                state_description = [
                    ''
                    ],
                system_id = '7CE751P312',
                tgt_mode_write_opt = '',
                type = 'string',
                unique_wwn = '',
                vlans = [
                    dscc.models.vlan.vlan(
                        gateway_address = '', 
                        i_sns_primary_address = '', 
                        i_sns_tcp_port = '', 
                        ip_address = '', 
                        mtu = '', 
                        send_target_group_tag = '', 
                        subnet_mask = '', 
                        target_portal_group_tag = '', 
                        vlan_id = '', )
                    ]
            )
        else:
            return PortDetails(
        )
        """

    def testPortDetails(self):
        """Test PortDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
