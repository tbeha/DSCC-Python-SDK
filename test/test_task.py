# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.task import Task

class TestTask(unittest.TestCase):
    """Task unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Task:
        """Test Task
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Task`
        """
        model = Task()
        if include_optional:
            return Task(
                customer_id = '',
                generation = 56,
                id = '',
                name = '',
                resource_uri = '',
                type = '',
                additional_details = dscc.models.task_console_reference.TaskConsoleReference(
                    console_uri = '', ),
                associated_resources = [
                    dscc.models.resource_reference.ResourceReference(
                        name = '', 
                        resource_uri = '', 
                        type = '', )
                    ],
                child_tasks = [
                    dscc.models.resource_reference.ResourceReference(
                        name = '', 
                        resource_uri = '', 
                        type = '', )
                    ],
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                display_name = '',
                ended_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                error = None,
                estimated_running_duration_minutes = 56,
                health_status = '',
                log_messages = [
                    dscc.models.task_log_message.TaskLogMessage(
                        message = '', 
                        timestamp_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                parent_task = None,
                progress_percent = 0,
                recommendations = [
                    dscc.models.task_recommendations.TaskRecommendations(
                        message = '', )
                    ],
                source_resource = None,
                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                state = '',
                suggested_polling_interval_seconds = 56,
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                user_id = ''
            )
        else:
            return Task(
        )
        """

    def testTask(self):
        """Test Task"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
