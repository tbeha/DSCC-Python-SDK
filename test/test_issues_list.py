# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.issues_list import IssuesList

class TestIssuesList(unittest.TestCase):
    """IssuesList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IssuesList:
        """Test IssuesList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IssuesList`
        """
        model = IssuesList()
        if include_optional:
            return IssuesList(
                items = [
                    dscc.models.issue_details.IssueDetails(
                        additional_details = null, 
                        body = '', 
                        category = '', 
                        cleared_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        customer_id = '', 
                        generation = '', 
                        id = '', 
                        issue_type = '', 
                        last_occurred_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '', 
                        occurrence_count = 56, 
                        related_resource = null, 
                        related_resource_owner = null, 
                        resource_uri = '', 
                        rule_id = '', 
                        severity = '', 
                        state = '', 
                        title = '', 
                        type = '', )
                    ],
                page_limit = 56,
                page_offset = 56,
                total = 56
            )
        else:
            return IssuesList(
                items = [
                    dscc.models.issue_details.IssueDetails(
                        additional_details = null, 
                        body = '', 
                        category = '', 
                        cleared_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        customer_id = '', 
                        generation = '', 
                        id = '', 
                        issue_type = '', 
                        last_occurred_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '', 
                        occurrence_count = 56, 
                        related_resource = null, 
                        related_resource_owner = null, 
                        resource_uri = '', 
                        rule_id = '', 
                        severity = '', 
                        state = '', 
                        title = '', 
                        type = '', )
                    ],
                page_limit = 56,
                page_offset = 56,
                total = 56,
        )
        """

    def testIssuesList(self):
        """Test IssuesList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
