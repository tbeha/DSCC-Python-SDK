# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.storage_pool_performance import StoragePoolPerformance

class TestStoragePoolPerformance(unittest.TestCase):
    """StoragePoolPerformance unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StoragePoolPerformance:
        """Test StoragePoolPerformance
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StoragePoolPerformance`
        """
        model = StoragePoolPerformance()
        if include_optional:
            return StoragePoolPerformance(
                common_resource_attributes = dscc.models.nimble_common_resource_attributes.NimbleCommonResourceAttributes(
                    cloud_state = 'CONNECTED', ),
                iops = dscc.models.nimbleperf_data.nimbleperfData(
                    avg_1day = 33.65, 
                    avg_1hour = 40.4, 
                    avg_8hours = 50.98, 
                    avg_latest = 3.4, ),
                latency = dscc.models.nimbleperf_data.nimbleperfData(
                    avg_1day = 33.65, 
                    avg_1hour = 40.4, 
                    avg_8hours = 50.98, 
                    avg_latest = 3.4, ),
                request_uri = '/api/v1/storage-systems/device-type2/00473102de2f5f39d8000000000000000000000001/storage-pools/37473102de2f5f39d8000000000000000000000027/performance-statistics',
                throughput = dscc.models.nimbleperf_data.nimbleperfData(
                    avg_1day = 33.65, 
                    avg_1hour = 40.4, 
                    avg_8hours = 50.98, 
                    avg_latest = 3.4, )
            )
        else:
            return StoragePoolPerformance(
        )
        """

    def testStoragePoolPerformance(self):
        """Test StoragePoolPerformance"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
