# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.nimble_initiator_group import NimbleInitiatorGroup

class TestNimbleInitiatorGroup(unittest.TestCase):
    """NimbleInitiatorGroup unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NimbleInitiatorGroup:
        """Test NimbleInitiatorGroup
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NimbleInitiatorGroup`
        """
        model = NimbleInitiatorGroup()
        if include_optional:
            return NimbleInitiatorGroup(
                access_protocol = 'iscsi',
                app_uuid = 'rfc4122.943f7dc1-5853-497c-b530-f689ccf1bf18',
                host_type = 'myobject-5',
                id = '2a0df0fe6f7dc7bb16000000000000000000004817',
                name = 'myobject-5',
                associated_links = [{"resourceUri":"/api/v1/storage-systems/device-type2/2a0df0fe6f7dc7bb16000000000000000000004817","type":"storage-systems"}],
                common_resource_attributes = dscc.models.nimble_common_resource_attributes.NimbleCommonResourceAttributes(
                    cloud_state = 'CONNECTED', ),
                console_uri = 'null',
                creation_time = 3400,
                customer_id = 'string',
                description = '99.9999% availability',
                fc_initiators = [
                    dscc.models.nimble_fc_initiator.NimbleFCInitiator(
                        alias = 'vegaalias', 
                        id = '0b1c9973433673c3db000000000000000000000001', 
                        initiator_id = '0b1c9973433673c3db000000000000000000000001', 
                        wwpn = '0b1c9973433673c3db000000000000000000000001', )
                    ],
                fc_sessions = [
                    dscc.models.nimble_fc_session_details.NimbleFCSessionDetails(
                        associated_links = [{"resourceUri":"/api/v1/storage-systems/device-type2/2a0df0fe6f7dc7bb16000000000000000000004817","type":"storage-systems"}], 
                        common_resource_attributes = dscc.models.nimble_common_resource_attributes.NimbleCommonResourceAttributes(
                            cloud_state = 'CONNECTED', ), 
                        console_uri = 'null', 
                        customer_id = 'string', 
                        generation = 0, 
                        id = '2a0df0fe6f7dc7bb16000000000000000000004817', 
                        initiator_info = dscc.models.nimble_fc_initiator_info.NimbleFCInitiatorInfo(
                            initiator_alias = 'port5', 
                            initiator_fcid = '181800', 
                            initiator_switch_name = 'MSDU_LS_E_CB2502', 
                            initiator_switch_port = '42', 
                            initiator_symbolic_nodename = 'itor1_symbolic_portname', 
                            initiator_symbolic_portname = 'itor1_symbolic_nodename', 
                            initiator_wwpn = '10:00:9c:dc:71:72:9f:43', ), 
                        resource_uri = '/api/v1/storage-systems/device-type2/2a0df0fe6f7dc7bb16000000000000000000004817', 
                        sc_host_initiator_id = '1223f5s', 
                        target_info = dscc.models.nimble_fc_target_info.NimbleFCTargetInfo(
                            target_fcid = '1b2300', 
                            target_port_array_name = 'CS2-AF40-3445', 
                            target_port_ctrlr_name = 'A', 
                            target_port_interface_name = 'fc3b.1', 
                            target_wwnn = '56:c9:ce:90:e0:f3:0f:00', 
                            target_wwpn = '56:c9:ce:90:e0:f3:0f:02', ), 
                        type = 'string', )
                    ],
                fc_tdz_ports = [
                    dscc.models.nimble_fc_tdz_ports.NimbleFCTdzPorts(
                        array_name = 'myobject-5', 
                        fc_name = 'myobject-5', )
                    ],
                full_name = 'myobject-5',
                generation = 0,
                iscsi_initiators = [
                    dscc.models.nimble_iscsi_initiator.NimbleISCSIInitiator(
                        id = '021c9973433673c3db000000000000000000000001', 
                        ip_address = 'xx.xxx.xx.xx', 
                        iqn = 'vegaiqn', 
                        label = 'vega', )
                    ],
                last_modified = 3400,
                metadata = [
                    dscc.models.nimble_metadata.NimbleMetadata(
                        key = 'vega-key', 
                        value = 'vega-value', )
                    ],
                num_connections = 1234,
                resource_uri = '/api/v1/storage-systems/device-type2/2a0df0fe6f7dc7bb16000000000000000000004817',
                sc_host_id = '132b493352ca3141456333edf403be0c',
                search_name = 'vol:1',
                target_subnets = [
                    dscc.models.nimble_target_subnets.NimbleTargetSubnets(
                        id = '021c9973433673c3db000000000000000000000003', 
                        label = 'myobject-5', )
                    ],
                type = 'string',
                volume_count = 1234,
                volume_list = [
                    dscc.models.nimble_vol_list.NimbleVolList(
                        app_category = 'vega-app', 
                        full_name = 'volume-1', 
                        id = '0b1c99734', 
                        lun = 0, 
                        name = 'vegavol', )
                    ]
            )
        else:
            return NimbleInitiatorGroup(
        )
        """

    def testNimbleInitiatorGroup(self):
        """Test NimbleInitiatorGroup"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
