# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.nimblevolume_capacity_history import NimblevolumeCapacityHistory

class TestNimblevolumeCapacityHistory(unittest.TestCase):
    """NimblevolumeCapacityHistory unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NimblevolumeCapacityHistory:
        """Test NimblevolumeCapacityHistory
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NimblevolumeCapacityHistory`
        """
        model = NimblevolumeCapacityHistory()
        if include_optional:
            return NimblevolumeCapacityHistory(
                common_resource_attributes = dscc.models.nimble_common_resource_attributes.NimbleCommonResourceAttributes(
                    cloud_state = 'CONNECTED', ),
                count = 144,
                request_uri = '/api/v1/storage-systems/device-type2/00473102de2f5f39d8000000000000000000000001/volumes/37473102de2f5f39d8000000000000000000000027/capacity-history',
                series_data = [
                    dscc.models.nimblevolume_capacity_series_data.nimblevolumeCapacitySeriesData(
                        snapshot_usage = 20, 
                        timestamp = 1605063600, 
                        volume_usage = 25, )
                    ]
            )
        else:
            return NimblevolumeCapacityHistory(
        )
        """

    def testNimblevolumeCapacityHistory(self):
        """Test NimblevolumeCapacityHistory"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
