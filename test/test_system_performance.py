# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.system_performance import SystemPerformance

class TestSystemPerformance(unittest.TestCase):
    """SystemPerformance unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SystemPerformance:
        """Test SystemPerformance
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SystemPerformance`
        """
        model = SystemPerformance()
        if include_optional:
            return SystemPerformance(
                common_resource_attributes = dscc.models.primera_common_resource_attributes.primeraCommonResourceAttributes(
                    cloud_state = 'CONNECTED', ),
                customer_id = 'string',
                iops = dscc.models.pm_perf_data.pmPerfData(
                    avg_of1day = 33.65, 
                    avg_of1hour = 40.4, 
                    avg_of8hours = 50.98, 
                    avg_of_latest = 3.4, ),
                latency = dscc.models.pm_perf_data.pmPerfData(
                    avg_of1day = 33.65, 
                    avg_of1hour = 40.4, 
                    avg_of8hours = 50.98, 
                    avg_of_latest = 3.4, ),
                request_uri = '/api/v1/storage-systems/device-type1/SGH014XGSP/performance-statistics',
                resource_uri = '/api/v1/storage-systems/device-type1/SGH014XGSP/performance-statistics',
                throughput = dscc.models.pm_perf_data.pmPerfData(
                    avg_of1day = 33.65, 
                    avg_of1hour = 40.4, 
                    avg_of8hours = 50.98, 
                    avg_of_latest = 3.4, )
            )
        else:
            return SystemPerformance(
        )
        """

    def testSystemPerformance(self):
        """Test SystemPerformance"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
