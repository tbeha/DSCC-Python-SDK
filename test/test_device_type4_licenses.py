# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.device_type4_licenses import DeviceType4Licenses

class TestDeviceType4Licenses(unittest.TestCase):
    """DeviceType4Licenses unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeviceType4Licenses:
        """Test DeviceType4Licenses
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeviceType4Licenses`
        """
        model = DeviceType4Licenses()
        if include_optional:
            return DeviceType4Licenses(
                associated_links = [{"resourceUri":"/api/v1/storage-systems/7CE751P312/device-type4/recommendations","type":"recommendations"},{"resourceUri":"/api/v1/storage-systems/7CE751P312/device-type4/supportsettings","type":"support-settings"},{"resourceUri":"/api/v1/storage-systems/7CE751P312/device-type4/telemetry","type":"telemetry"},{"resourceUri":"/api/v1/storage-systems/7CE751P312/device-type4/capacity-summary","type":"system capacity"},{"resourceUri":"/api/v1/storage-systems/7CE751P312/device-type4/network-settings","type":"network-settings"},{"resourceUri":"/api/v1/storage-systems/7CE751P312/device-type4/component-summary","type":"component-summary"},{"resourceUri":"/api/v1/storage-systems/7CE751P312/device-type4/certificates","type":"certificates"},{"resourceUri":"/api/v1/storage-systems/7CE751P312/device-type4/mail-settings","type":"mail-settings"},{"resourceUri":"/api/v1/storage-systems/7CE751P312/device-type4/network-services","type":"network-services"}],
                common_resource_attributes = dscc.models.common_resource_attributes.commonResourceAttributes(
                    cloud_state = 'CONNECTED', ),
                console_uri = '',
                customer_id = '',
                disk_count = '2',
                features = {
                    'key' : [
                        dscc.models.license_feature.licenseFeature(
                            expiration = dscc.models.device_type4_calendar.DeviceType4Calendar(
                                ms = 1591601529000, 
                                tz = 'Local', ), 
                            name = 'string', 
                            size_or_count = '2', )
                        ]
                    },
                issue_date = dscc.models.device_type4_calendar.DeviceType4Calendar(
                    ms = 1591601529000, 
                    tz = 'Local', ),
                request_uri = '/v1/storage-systems/device-type4/7CE751P312/licenses',
                resource_uri = '',
                type = '',
                version = 1
            )
        else:
            return DeviceType4Licenses(
        )
        """

    def testDeviceType4Licenses(self):
        """Test DeviceType4Licenses"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
