# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.device_type4_volume_capacity import DeviceType4VolumeCapacity

class TestDeviceType4VolumeCapacity(unittest.TestCase):
    """DeviceType4VolumeCapacity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeviceType4VolumeCapacity:
        """Test DeviceType4VolumeCapacity
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeviceType4VolumeCapacity`
        """
        model = DeviceType4VolumeCapacity()
        if include_optional:
            return DeviceType4VolumeCapacity(
                admin_space = dscc.models.device_type4space.DeviceType4space(
                    free_mi_b = 1.337, 
                    grown_mi_b = 1.337, 
                    raw_reserved_mi_b = 1.337, 
                    reclaimed_mi_b = 1.337, 
                    reserved_mi_b = 1.337, 
                    total_mi_b = 1.337, 
                    used_mi_b = 1.337, ),
                branch_used_blocks_mi_b = 1.337,
                branch_v_size_mi_b = 2048,
                compact_efficiency = 1.337,
                compression_efficiency = 1.337,
                copied_mb = 1.337,
                copied_perc = 56,
                ddc_size = 1.337,
                dds_size = 1.337,
                dedup_savings_size = 1.337,
                dedup_written_size = 1.337,
                host_written_mi_b = 1.337,
                host_written_to_virtual_percent = 1.337,
                size_mi_b = 2048,
                snapshot_tdvv_size = dscc.models.device_type4snapshot_tdvvsize.DeviceType4snapshotTdvvsize(
                    ddc_size_mi_b = 1.337, 
                    dds_size_mi_b = 1.337, 
                    virtual_size_mi_b = 1.337, 
                    written_size_mi_b = 1.337, ),
                snapshot_used_to_virtual_percent = 1.337,
                thin_savings = '',
                total_raw_reserved_mi_b = 1.337,
                total_reserved_mi_b = 1.337,
                total_space_mi_b = 1.337,
                used_blocks_mi_b = 1.337,
                used_capacity = 1.337,
                used_size_mi_b = 1.337,
                user_reserved_to_virtual_percent = 1.337,
                user_space = dscc.models.device_type4space.DeviceType4space(
                    free_mi_b = 1.337, 
                    grown_mi_b = 1.337, 
                    raw_reserved_mi_b = 1.337, 
                    reclaimed_mi_b = 1.337, 
                    reserved_mi_b = 1.337, 
                    total_mi_b = 1.337, 
                    used_mi_b = 1.337, ),
                user_used_to_virtual_percent = 1.337
            )
        else:
            return DeviceType4VolumeCapacity(
        )
        """

    def testDeviceType4VolumeCapacity(self):
        """Test DeviceType4VolumeCapacity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
