# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.primera_volume_details import PrimeraVolumeDetails

class TestPrimeraVolumeDetails(unittest.TestCase):
    """PrimeraVolumeDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PrimeraVolumeDetails:
        """Test PrimeraVolumeDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PrimeraVolumeDetails`
        """
        model = PrimeraVolumeDetails()
        if include_optional:
            return PrimeraVolumeDetails(
                admin_allocation_settings = dscc.models.user_allocation_settings_single.userAllocationSettingsSingle(
                    ha = dscc.models.deprecated_device_type4user_allocation_settings_single_ha.DeprecatedDeviceType4userAllocationSettingsSingle_HA(
                        default = 'Magazine', 
                        key = 'hajbod-10', ), 
                    raid_type = '', 
                    device_speed = dscc.models.device_speed_single.deviceSpeedSingle(
                        text = '', 
                        value = 56, ), 
                    device_type = '', 
                    disk_filter = '', 
                    requested_ha = dscc.models.deprecated_device_type4user_allocation_settings_single_ha.DeprecatedDeviceType4userAllocationSettingsSingle_HA(
                        default = 'Magazine', 
                        key = 'hajbod-10', ), 
                    set_size = '', 
                    step_size = 56, ),
                admin_space = dscc.models.space.space(
                    free_mi_b = 1.337, 
                    grown_mi_b = 1.337, 
                    raw_reserved_mi_b = 1.337, 
                    reclaimed_mi_b = 1.337, 
                    reserved_mi_b = 1.337, 
                    total_mi_b = 1.337, 
                    used_mi_b = 1.337, ),
                associated_links = [{"resourceUri":"v1/storage-systems/{systemUid}/contollers","type":"controllers"},{"resourceUri":"v1/storage-systems/{systemUid}/shelves","type":"shelves"},{"resourceUri":"v1/storage-systems/{systemUid}/disks","type":"disks"},{"resourceUri":"v1/storage-systems/{systemUid}/storage-ports","type":"storage-ports"},{"resourceUri":"v1/storage-systems/{systemUid}/storage-devices-settings","type":"storage-devices-settings"},{"resourceUri":"v1/storage-systems/{systemUid}/storage-pools","type":"storage-pools"},{"resourceUri":"v1/storage-systems/{systemUid}/volume-sets","type":"volume-sets"},{"resourceUri":"v1/storage-systems/{systemUid}/host-groups","type":"host-groups"}],
                base_id = 56,
                comment = '',
                common_resource_attributes = dscc.models.primera_common_resource_attributes.primeraCommonResourceAttributes(
                    cloud_state = 'CONNECTED', ),
                compact_efficiency = 1.337,
                compression_efficiency = 1.337,
                compression_policy = '',
                console_uri = 'data-ops-manager/storage-systems/device-type1/SGH014XGSP/volumes/{uid}',
                conversion_type = 'CONVERSIONTYPE_THIN',
                copied_mb = 1.337,
                copied_perc = 56,
                copy_of_id = 56,
                creation_time = dscc.models.calendar.calendar(
                    ms = 56, 
                    tz = '', ),
                customer_id = 'fc5f41652a53497e88cdcebc715cc1cf',
                data_reduction = '',
                ddc_size = 1.337,
                dds_size = 1.337,
                dedup = '',
                dedup_savings_size = 1.337,
                dedup_written_size = 1.337,
                dev_type = '',
                displayname = '',
                domain = '',
                efficiency_update_time = dscc.models.calendar.calendar(
                    ms = 56, 
                    tz = '', ),
                expiration_time = dscc.models.calendar.calendar(
                    ms = 56, 
                    tz = '', ),
                fully_provisioned = True,
                generation = 0,
                heads_per_cylinder = 56,
                health_state = 56,
                hidden = True,
                host_written_mi_b = 1.337,
                host_written_to_virtual_percent = 1.337,
                id = '',
                initiators = [
                    dscc.models.device_type4_application_set_details_initiators_inner.DeviceType4ApplicationSetDetails_initiators_inner(
                        device_discovered_name = 'TEST11', 
                        id = '6848ef683c27403e96caa51816ddc72c', 
                        resource_uri = '/v1/host-initiators/6848ef683c27403e96caa51816ddc72c', 
                        type = 'host-initiators', )
                    ],
                name = 'Finance',
                parent_id = 56,
                phys_parent_id = 56,
                physical_copy = True,
                policy = dscc.models.policy.policy(
                    file_service = True, 
                    host_dif3par = True, 
                    host_dif_std = True, 
                    no_cache = True, 
                    one_host = True, 
                    stale_snapshot = True, 
                    system = True, 
                    zero_detect = True, 
                    zero_fill = True, ),
                prov_type = '',
                raid = '',
                rcopy_status = '',
                read_only = True,
                request_uri = '/v1/storage-systems/device-type1/2FF70002AC018D94/volumes/{uid}',
                resource_uri = '/v1/storage-systems/device-type1/2FF70002AC018D94/volumes/{uid}',
                retention_time = dscc.models.calendar.calendar(
                    ms = 56, 
                    tz = '', ),
                ro_child_id = 56,
                rw_child_id = 56,
                sectors_per_track = 56,
                shared_parent_id = 56,
                size_mi_b = 1.337,
                snap_shot_tier = '',
                snapshot_alloc_limit = 56,
                snapshot_alloc_warning = 56,
                snapshot_allocation_settings = dscc.models.user_allocation_settings_single.userAllocationSettingsSingle(
                    ha = dscc.models.deprecated_device_type4user_allocation_settings_single_ha.DeprecatedDeviceType4userAllocationSettingsSingle_HA(
                        default = 'Magazine', 
                        key = 'hajbod-10', ), 
                    raid_type = '', 
                    device_speed = dscc.models.device_speed_single.deviceSpeedSingle(
                        text = '', 
                        value = 56, ), 
                    device_type = '', 
                    disk_filter = '', 
                    requested_ha = dscc.models.deprecated_device_type4user_allocation_settings_single_ha.DeprecatedDeviceType4userAllocationSettingsSingle_HA(
                        default = 'Magazine', 
                        key = 'hajbod-10', ), 
                    set_size = '', 
                    step_size = 56, ),
                snapshot_cpg_id = 56,
                snapshot_cpg_name = '',
                snapshot_space = dscc.models.space.space(
                    free_mi_b = 1.337, 
                    grown_mi_b = 1.337, 
                    raw_reserved_mi_b = 1.337, 
                    reclaimed_mi_b = 1.337, 
                    reserved_mi_b = 1.337, 
                    total_mi_b = 1.337, 
                    used_mi_b = 1.337, ),
                snapshot_tdvv_size = dscc.models.snapshot_tdvvsize.snapshotTdvvsize(
                    ddc_size_mi_b = 1.337, 
                    dds_size_mi_b = 1.337, 
                    virtual_size_mi_b = 1.337, 
                    written_size_mi_b = 1.337, ),
                snapshot_used_to_virtual_percent = 1.337,
                space_calculation_time = dscc.models.calendar.calendar(
                    ms = 56, 
                    tz = '', ),
                started = True,
                state = dscc.models.state.STATE(
                    detailed = [
                        ''
                        ], 
                    overall = 'STATE_NORMAL', ),
                storage_tier = '',
                system_id = '7CE751P312',
                thin_provisioned = True,
                thin_savings = '',
                total_raw_reserved_mi_b = 1.337,
                total_reserved_mi_b = 1.337,
                total_space_mi_b = 1.337,
                type = 'string',
                unref_space_freed_time = dscc.models.calendar.calendar(
                    ms = 56, 
                    tz = '', ),
                used_capacity = 1.337,
                used_size_mi_b = 1.337,
                user_alloc_limit = 56,
                user_alloc_warning = 56,
                user_allocation_settings = dscc.models.user_allocation_settings_single.userAllocationSettingsSingle(
                    ha = dscc.models.deprecated_device_type4user_allocation_settings_single_ha.DeprecatedDeviceType4userAllocationSettingsSingle_HA(
                        default = 'Magazine', 
                        key = 'hajbod-10', ), 
                    raid_type = '', 
                    device_speed = dscc.models.device_speed_single.deviceSpeedSingle(
                        text = '', 
                        value = 56, ), 
                    device_type = '', 
                    disk_filter = '', 
                    requested_ha = dscc.models.deprecated_device_type4user_allocation_settings_single_ha.DeprecatedDeviceType4userAllocationSettingsSingle_HA(
                        default = 'Magazine', 
                        key = 'hajbod-10', ), 
                    set_size = '', 
                    step_size = 56, ),
                user_cpg_id = 56,
                user_cpg_name = '',
                user_reserved_to_virtual_percent = 1.337,
                user_space = dscc.models.space.space(
                    free_mi_b = 1.337, 
                    grown_mi_b = 1.337, 
                    raw_reserved_mi_b = 1.337, 
                    reclaimed_mi_b = 1.337, 
                    reserved_mi_b = 1.337, 
                    total_mi_b = 1.337, 
                    used_mi_b = 1.337, ),
                user_used_to_virtual_percent = 1.337,
                vlun_sector_size = 56,
                volume_id = 56,
                volume_performance = dscc.models.volume_performance.volumePerformance(
                    common_resource_attributes = dscc.models.primera_common_resource_attributes.primeraCommonResourceAttributes(
                        cloud_state = 'CONNECTED', ), 
                    iops = dscc.models.kpi_metrics.KpiMetrics(
                        read = dscc.models.pm_perf_data.pmPerfData(
                            avg_of1day = 33.65, 
                            avg_of1hour = 40.4, 
                            avg_of8hours = 50.98, 
                            avg_of_latest = 3.4, ), 
                        total = dscc.models.pm_perf_data.pmPerfData(
                            avg_of1day = 33.65, 
                            avg_of1hour = 40.4, 
                            avg_of8hours = 50.98, 
                            avg_of_latest = 3.4, ), 
                        write = , ), 
                    latency_ms = dscc.models.kpi_metrics.KpiMetrics(), 
                    request_uri = '/v1/storage-systems/device-type1/SGH014XGSP/volumes/a7c4e6593f51d0b98f0e40d7e6df04fd/performance-statistics', 
                    resource_uri = '/v1/storage-systems/device-type1/SGH014XGSP/volumes/a7c4e6593f51d0b98f0e40d7e6df04fd/performance-statistics', 
                    throughput_kbps = , ),
                volume_type = 'VVTYPE_BASE',
                wwn = '60002AC0000000000000006B0001FFEB'
            )
        else:
            return PrimeraVolumeDetails(
        )
        """

    def testPrimeraVolumeDetails(self):
        """Test PrimeraVolumeDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
