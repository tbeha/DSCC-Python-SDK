# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.device_type4sys_port_management import DeviceType4sysPortManagement

class TestDeviceType4sysPortManagement(unittest.TestCase):
    """DeviceType4sysPortManagement unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeviceType4sysPortManagement:
        """Test DeviceType4sysPortManagement
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeviceType4sysPortManagement`
        """
        model = DeviceType4sysPortManagement()
        if include_optional:
            return DeviceType4sysPortManagement(
                associated_links = [{"resourceUri":"/api/v1/storage-systems/device-type4/{uid}","type":"systems"}],
                authentication_required = 'enabled',
                common_resource_attributes = dscc.models.common_resource_attributes.commonResourceAttributes(
                    cloud_state = 'CONNECTED', ),
                console_uri = 'data-ops-manager/storage-systems/device-type4/SGH014XGSP/settings/system-settings',
                customer_id = 'fc5f41652a53497e88cdcebc715cc1cv',
                default_route_ipv4 = '15.212.12.30',
                default_route_ipv6 = '2001:0db8:85a3:0000:0000:8a2e:0370:7334',
                displayname = 'Management Port',
                dns_server = '10.112.132.43',
                domain = 'sample.com',
                generation = 1627533960634,
                id = 'eb5149ef0d3bc95f2a7e24c4b29edc92',
                ip_v4_data = dscc.models.device_type4_address.DeviceType4Address(
                    active_node = 1, 
                    auto_sense = True, 
                    full_duplex = True, 
                    ip_address = '15.12.123.234', 
                    net_mask = '255.255.255.0', 
                    speed = 1000, 
                    state = dscc.models.device_type4_state.DeviceType4State(
                        detailed = [
                            ''
                            ], 
                        overall = 'STATE_NORMAL', ), 
                    status = 'Active', ),
                ip_v6_data = dscc.models.device_type4_address.DeviceType4Address(
                    active_node = 1, 
                    auto_sense = True, 
                    full_duplex = True, 
                    ip_address = '15.12.123.234', 
                    net_mask = '255.255.255.0', 
                    speed = 1000, 
                    state = dscc.models.device_type4_state.DeviceType4State(
                        detailed = [
                            ''
                            ], 
                        overall = 'STATE_NORMAL', ), 
                    status = 'Active', ),
                new_default_route_ipv4 = '15.212.12.30',
                new_default_route_ipv6 = '2001:0db8:85a3:0000:0000:8a2e:0370:7334',
                new_ip_v4_data = dscc.models.device_type4_address.DeviceType4Address(
                    active_node = 1, 
                    auto_sense = True, 
                    full_duplex = True, 
                    ip_address = '15.12.123.234', 
                    net_mask = '255.255.255.0', 
                    speed = 1000, 
                    state = dscc.models.device_type4_state.DeviceType4State(
                        detailed = [
                            ''
                            ], 
                        overall = 'STATE_NORMAL', ), 
                    status = 'Active', ),
                new_ipv6_data = dscc.models.device_type4_address.DeviceType4Address(
                    active_node = 1, 
                    auto_sense = True, 
                    full_duplex = True, 
                    ip_address = '15.12.123.234', 
                    net_mask = '255.255.255.0', 
                    speed = 1000, 
                    state = dscc.models.device_type4_state.DeviceType4State(
                        detailed = [
                            ''
                            ], 
                        overall = 'STATE_NORMAL', ), 
                    status = 'Active', ),
                ntp_server = '16.110.23.123 16.110.23.124',
                proxy_port = 45,
                proxy_protocol = 'HTTP',
                proxy_server = 'proxy.company.net',
                proxy_user = 'proxySampleUser',
                system_id = '7CEFVC12',
                type = 'network-settings'
            )
        else:
            return DeviceType4sysPortManagement(
        )
        """

    def testDeviceType4sysPortManagement(self):
        """Test DeviceType4sysPortManagement"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
