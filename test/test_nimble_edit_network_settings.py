# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.nimble_edit_network_settings import NimbleEditNetworkSettings

class TestNimbleEditNetworkSettings(unittest.TestCase):
    """NimbleEditNetworkSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NimbleEditNetworkSettings:
        """Test NimbleEditNetworkSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NimbleEditNetworkSettings`
        """
        model = NimbleEditNetworkSettings()
        if include_optional:
            return NimbleEditNetworkSettings(
                array_list = [
                    dscc.models.nimble_edit_array_net.NimbleEditArrayNet(
                        ctrlr_a_support_ip = '127.0.0.102', 
                        ctrlr_b_support_ip = '127.0.0.103', 
                        name = 'g1a16', 
                        nic_list = [
                            dscc.models.nimble_nic.NimbleNIC(
                                data_ip = '127.0.0.102', 
                                name = 'eth1', 
                                subnet_label = 'subnet1', 
                                tagged = True, )
                            ], )
                    ],
                iscsi_automatic_connection_method = True,
                iscsi_connection_rebalancing = True,
                mgmt_ip = '128.0.0.1',
                name = 'draft',
                route_list = [
                    dscc.models.nimble_route.NimbleRoute(
                        gateway = '127.0.0.2', 
                        tgt_netmask = '255.255.255.0', 
                        tgt_network = '127.0.2.0', )
                    ],
                secondary_mgmt_ip = '128.0.0.1',
                subnet_list = [
                    dscc.models.nimble_subnet.NimbleSubnet(
                        allow_group = True, 
                        allow_iscsi = True, 
                        discovery_ip = '127.0.0.102', 
                        failover = True, 
                        failover_enable_time = 1591599192000, 
                        label = 'subnet1', 
                        mtu = 1500, 
                        netmask = '255.0.0.0', 
                        network = '127.0.0.108', 
                        netzone_type = 'single', 
                        type = 'mgmt', 
                        vlan_id = 0, )
                    ]
            )
        else:
            return NimbleEditNetworkSettings(
        )
        """

    def testNimbleEditNetworkSettings(self):
        """Test NimbleEditNetworkSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
