# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.device_type4_performance_history_data import DeviceType4PerformanceHistoryData

class TestDeviceType4PerformanceHistoryData(unittest.TestCase):
    """DeviceType4PerformanceHistoryData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeviceType4PerformanceHistoryData:
        """Test DeviceType4PerformanceHistoryData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeviceType4PerformanceHistoryData`
        """
        model = DeviceType4PerformanceHistoryData()
        if include_optional:
            return DeviceType4PerformanceHistoryData(
                common_resource_attributes = dscc.models.common_resource_attributes_perf.commonResourceAttributesPerf(
                    cloud_state = 'CONNECTED', ),
                customer_id = 'fc5f41652a53497e88cdcebc715cc1cf',
                end_time = 162564271,
                history_data = dscc.models.device_type4_performance_history_data_history_data.DeviceType4PerformanceHistoryData_historyData(
                    avgbusy_metrics_data_perct = [
                        dscc.models.device_type4metric_history_data_single_value.DeviceType4metricHistoryDataSingleValue(
                            chart_legend_id = 'VV_NAME-vvname1:HOST_NAME-host:LUN-lun', 
                            time_series_data = dscc.models.device_type4metric_data_value.DeviceType4metricDataValue(
                                items = [
                                    dscc.models.device_type4metric_series_data_value.DeviceType4metricSeriesDataValue(
                                        name = 'appset1', 
                                        timestampms = 1605063600, 
                                        value = 46, )
                                    ], 
                                total = 1, ), )
                        ], 
                    iops_metrics_data = [
                        dscc.models.device_type4metric_history_data.DeviceType4metricHistoryData(
                            chart_legend_id = 'VV_NAME-vvname1:HOST_NAME-host:LUN-lun', )
                        ], 
                    iosz_metrics_data_kbs = [
                        dscc.models.device_type4metric_history_data.DeviceType4metricHistoryData(
                            chart_legend_id = 'VV_NAME-vvname1:HOST_NAME-host:LUN-lun', )
                        ], 
                    latency_metrics_data_ms = [
                        
                        ], 
                    qlen_metrics_data = [
                        dscc.models.device_type4metric_history_data_single_value.DeviceType4metricHistoryDataSingleValue(
                            chart_legend_id = 'VV_NAME-vvname1:HOST_NAME-host:LUN-lun', )
                        ], 
                    throughput_metrics_data_kbps = [
                        
                        ], ),
                request_uri = '/v1/storage-systems/device-type4/SGH014XGSP/volumes/performance-history',
                start_time = 1625556314
            )
        else:
            return DeviceType4PerformanceHistoryData(
        )
        """

    def testDeviceType4PerformanceHistoryData(self):
        """Test DeviceType4PerformanceHistoryData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
