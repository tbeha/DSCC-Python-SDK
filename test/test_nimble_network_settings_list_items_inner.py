# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.nimble_network_settings_list_items_inner import NimbleNetworkSettingsListItemsInner

class TestNimbleNetworkSettingsListItemsInner(unittest.TestCase):
    """NimbleNetworkSettingsListItemsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NimbleNetworkSettingsListItemsInner:
        """Test NimbleNetworkSettingsListItemsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NimbleNetworkSettingsListItemsInner`
        """
        model = NimbleNetworkSettingsListItemsInner()
        if include_optional:
            return NimbleNetworkSettingsListItemsInner(
                id = '1300000000000004d30000000000000001',
                name = 'active',
                role = 'active',
                active_since = 1591599112000,
                array_list = [
                    dscc.models.nimble_array_net.NimbleArrayNet(
                        ctrlr_a_support_ip = '127.0.0.102', 
                        ctrlr_b_support_ip = '127.0.0.103', 
                        member_gid = 1, 
                        name = 'g1a16', 
                        nic_list = [
                            dscc.models.nimble_nic.NimbleNIC(
                                data_ip = '127.0.0.102', 
                                name = 'eth1', 
                                subnet_label = 'subnet1', 
                                tagged = True, )
                            ], )
                    ],
                associated_links = [{resourceUri=/api/v1/storage-systems/device-type2/2a0df0fe6f7dc7bb16000000000000000000004817, type=storage-systems}],
                common_resource_attributes = dscc.models.nimble_common_resource_attributes.NimbleCommonResourceAttributes(
                    cloud_state = 'CONNECTED', ),
                console_uri = 'null',
                creation_time = 1591599192000,
                customer_id = 'string',
                generation = 0,
                group_leader_array = 'Array12',
                iscsi_automatic_connection_method = True,
                iscsi_connection_rebalancing = True,
                last_active = 1591599122000,
                last_modified = 1591599102000,
                mgmt_ip = '127.0.0.101',
                resource_uri = '/api/v1/storage-systems/device-type2/2a0df0fe6f7dc7bb16000000000000000000004817',
                route_list = [
                    dscc.models.nimble_route.NimbleRoute(
                        gateway = '127.0.0.2', 
                        tgt_netmask = '255.255.255.0', 
                        tgt_network = '127.0.2.0', )
                    ],
                secondary_mgmt_ip = '127.0.0.102',
                subnet_list = [
                    dscc.models.nimble_subnet.NimbleSubnet(
                        allow_group = True, 
                        allow_iscsi = True, 
                        discovery_ip = '127.0.0.102', 
                        failover = True, 
                        failover_enable_time = 1591599192000, 
                        label = 'subnet1', 
                        mtu = 1500, 
                        netmask = '255.0.0.0', 
                        network = '127.0.0.108', 
                        netzone_type = 'single', 
                        type = 'mgmt', 
                        vlan_id = 0, )
                    ],
                type = 'string'
            )
        else:
            return NimbleNetworkSettingsListItemsInner(
        )
        """

    def testNimbleNetworkSettingsListItemsInner(self):
        """Test NimbleNetworkSettingsListItemsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
