# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.nimble_replication_partner_common import NimbleReplicationPartnerCommon

class TestNimbleReplicationPartnerCommon(unittest.TestCase):
    """NimbleReplicationPartnerCommon unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NimbleReplicationPartnerCommon:
        """Test NimbleReplicationPartnerCommon
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NimbleReplicationPartnerCommon`
        """
        model = NimbleReplicationPartnerCommon()
        if include_optional:
            return NimbleReplicationPartnerCommon(
                alias = '',
                associated_links = [{"resourceUri":"/api/v1/storage-systems/device-type2/2a0df0fe6f7dc7bb16000000000000000000004817","type":"storage-systems"}],
                common_resource_attributes = dscc.models.nimble_common_resource_attributes.NimbleCommonResourceAttributes(
                    cloud_state = 'CONNECTED', ),
                control_port = 1234,
                customer_id = 'string',
                data_port = 1234,
                description = '99.9999% availability',
                full_name = 'parnter-A',
                generation = 0,
                last_keepalive_error = '',
                last_modified = 3400,
                last_sync_error = '',
                match_folder = True,
                partner_group_uid = 1234,
                port_range_start = 56,
                proxy_hostname = '',
                proxy_user = '',
                remote_partner_folder_id = '',
                remote_partner_folder_name = '',
                remote_partner_id = '2a0df0fe6f7dc7bb16000000000000000000004817',
                remote_partner_name = '',
                remote_partner_pool_id = '2a0df0fe6f7dc7bb16000000000000000000004817',
                remote_partner_pool_name = '',
                remote_partner_subnet_label = 'management',
                remote_partner_subnet_type = 'mgmt',
                remote_partner_system_id = '2a0df0fe6f7dc7bb16000000000000000000004817',
                replication_direction = '',
                search_name = 'vol:1',
                status = '',
                throttled_bandwidth_current = -1234,
                throttled_bandwidth_current_kbps = -1234,
                throttles = [
                    dscc.models.replication_throttle.ReplicationThrottle(
                        days = 'example day', 
                        description = 'Throttle one', 
                        name = 'Throttle1', 
                        thr_at_time = 10800, 
                        thr_bandwidth = 14, 
                        thr_until_time = 14400, )
                    ],
                type = 'string',
                unique_name = True,
                volume_collection_list = [
                    dscc.models.replication_volume_collection_summary.ReplicationVolumeCollectionSummary(
                        id = '07717d935c0fa5075d000000000000000000000008', )
                    ],
                witness = ''
            )
        else:
            return NimbleReplicationPartnerCommon(
        )
        """

    def testNimbleReplicationPartnerCommon(self):
        """Test NimbleReplicationPartnerCommon"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
