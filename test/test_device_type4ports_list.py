# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.device_type4ports_list import DeviceType4portsList

class TestDeviceType4portsList(unittest.TestCase):
    """DeviceType4portsList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeviceType4portsList:
        """Test DeviceType4portsList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeviceType4portsList`
        """
        model = DeviceType4portsList()
        if include_optional:
            return DeviceType4portsList(
                associated_links = [{"resourceUri":"/v1/storage-systems/device-type4/7CE751P312","type":"systems"},{"resourceUri":"/v1/storage-systems/device-type4/7CE751P312/nodes/e9d353bf98fc1a6bdb90b824e3ca14b5","type":"nodes"}],
                card_type = dscc.models.device_type4card_type.DeviceType4cardType(
                    default = '', 
                    key = '', ),
                var_class = 56,
                class2 = '',
                common_resource_attributes = dscc.models.common_resource_attributes.commonResourceAttributes(
                    cloud_state = 'CONNECTED', ),
                config = 'valid',
                config_mode = '',
                connection_type = '',
                customer_id = 'string',
                devices = [
                    dscc.models.device_type4connected_devices_inner.DeviceType4connectedDevices_inner(
                        name = '', 
                        position = 56, )
                    ],
                displayname = '',
                domain = '',
                enclosure_card_id = 56,
                enclosure_card_pci_uid = '',
                enclosure_card_pcid = 56,
                enclosure_card_uid = '',
                enclosure_id = 56,
                enclosure_uid = '',
                failover_status = '',
                fc_data = dscc.models.device_type4port_fc.DeviceType4portFC(
                    node_wwn = '', 
                    port_wwn = '', ),
                fw_version = '12.2.396.1',
                generation = 0,
                host_virtual_ports = [
                    dscc.models.device_type4_host_virtual_port.DeviceType4HostVirtualPort(
                        node_wwn = '', 
                        port_link_state = 'LINK_STATE_CONFIG_WAIT', 
                        port_type = 'PORT_TYPE_FREE', 
                        port_wwn = '', 
                        protocol = 'PORT_PROTOCOL_UNKNOWN', 
                        vpi = 56, )
                    ],
                id = '9d765763116c20a508e8996f2a10821d',
                initiator_ports = dscc.models.device_type4initiator_port.DeviceType4initiatorPort(
                    aliases = '', 
                    current_speed = '', 
                    hba_driver_version = '', 
                    hba_firmware_version = '', 
                    hba_manufacturer = '', 
                    hba_model = '', 
                    hba_os_name_version = '', 
                    host_name = '', 
                    number = 56, 
                    os_device_name = '', 
                    ssan_qos_support = '', 
                    ssan_security_support = '', 
                    supported_speeds = '', 
                    wwn = '', ),
                interrupt_coalesce = '',
                ip_data = dscc.models.device_type4port_ip.DeviceType4portIP(
                    autoneg = True, 
                    delimited_mac_address = '', 
                    duplex = '', 
                    gateway_address = '', 
                    gateway_address_v6 = '', 
                    ip_address = '', 
                    ip_address_v6 = '', 
                    mac_address = '', 
                    mtu = '', 
                    subnet_mask = '', 
                    subnet_mask_v6 = '', ),
                iscsi_data = dscc.models.device_type4port_iscsi.DeviceType4portISCSI(
                    delimited_mac_address = '', 
                    gateway_address = '', 
                    gateway_address_v6 = '', 
                    i_sns_primary_address = '', 
                    i_sns_tcp_port = 56, 
                    ip_address = '', 
                    ip_address_v6 = '', 
                    iscsi_name = '', 
                    mac_address = '', 
                    mtu = '', 
                    send_target_group_tag = 56, 
                    subnet_mask = '', 
                    subnet_mask_v6 = '', 
                    supports_vlan = True, 
                    target_portal_group_tag = 56, ),
                label = 'IP0',
                manufacturing = dscc.models.device_type4_manufacturing_single.DeviceType4ManufacturingSingle(
                    assembly_rev = '002*', 
                    check_sum = '--', 
                    hpe_model_name = 'HPE 3PAR 600 2S Node', 
                    manufacturer = 'XYRATEX', 
                    model = '0974244-06', 
                    saleable_part_number = '0974244-06', 
                    saleable_serial_number = '4UW0002941', 
                    serial_number = 'PMW0974244G4T88', 
                    spare_part_number = 'P04031-001', ),
                mode = '',
                mode_change = '',
                name = '',
                node_card_id = '',
                node_id = 'e9d353bf98fc1a6bdb90b824e3ca14b5',
                nvme_data = dscc.models.device_type4_port_nvme.DeviceType4PortNVMe(
                    delimited_mac_address = '', 
                    eth = '', 
                    gateway_address = '', 
                    gateway_address_v6 = 'FE80::1', 
                    ip_address = '', 
                    ip_address_v6 = '2001:db8:abcd:12:ffff:ffff:ffff:ff16', 
                    mac_address = '', 
                    mode = '', 
                    mtu = '', 
                    nqn = '', 
                    pcidev = '', 
                    prefix_length = 56, 
                    prefix_length_v6 = 13, 
                    protocol = '', 
                    rate = '', 
                    state = '', 
                    vlan_count = 56, 
                    vlans = [
                        dscc.models.device_type4_nvme_vlan.DeviceType4NVMeVLAN(
                            eth = '', 
                            gateway_address = '', 
                            gateway_address_v6 = 'FE80::1', 
                            ip_address = '', 
                            ip_address_v6 = '2001:db8:abcd:12:ffff:ffff:ffff:ff16', 
                            mtu = '', 
                            nqn = '', 
                            prefix_length = 56, 
                            prefix_length_v6 = 13, 
                            vlan_id = '', )
                        ], ),
                partner = dscc.models.device_type4partner.DeviceType4partner(
                    node_wwn_or_name = '', 
                    port_wwn_or_ip = '', 
                    position = dscc.models.device_type4partner_port_position.DeviceType4partnerPortPosition(
                        node = 56, 
                        port = 56, 
                        slot = 56, ), ),
                port_sfp = dscc.models.device_type4port_sfp.DeviceType4portSfp(
                    fw_version = '', 
                    manufacturing = dscc.models.device_type4_manufacturing_single.DeviceType4ManufacturingSingle(
                        assembly_rev = '002*', 
                        check_sum = '--', 
                        hpe_model_name = 'HPE 3PAR 600 2S Node', 
                        manufacturer = 'XYRATEX', 
                        model = '0974244-06', 
                        saleable_part_number = '0974244-06', 
                        saleable_serial_number = '4UW0002941', 
                        serial_number = 'PMW0974244G4T88', 
                        spare_part_number = 'P04031-001', ), 
                    qualified = True, 
                    rx_loss_pin = dscc.models.device_type4rx_loss_pin.DeviceType4rxLossPin(
                        default = '', 
                        key = '', ), 
                    rx_power_low = True, 
                    speed = 56, 
                    state = dscc.models.device_type4_state.DeviceType4State(
                        detailed = [
                            ''
                            ], 
                        overall = 'STATE_NORMAL', ), 
                    support_ddm = True, 
                    tx_disable_pin = dscc.models.device_type4tx_disable_pin.DeviceType4txDisablePin(
                        default = '', 
                        key = '', ), 
                    tx_fault_pin = dscc.models.device_type4tx_fault_pin.DeviceType4txFaultPin(
                        default = '', 
                        key = '', ), ),
                port_type = '',
                position = dscc.models.device_type4port_position.DeviceType4portPosition(
                    node = 56, 
                    port = 56, 
                    slot = 56, ),
                protocol = '',
                resource_uri = '/v1/storage-systems/device-type4/7CE751P312/ports/220fcd48857f63c0f354c6723ec5d5cb',
                revision = '',
                smart_san = '',
                speed_actual = '',
                speed_configured = '',
                speed_max = '',
                speed_min = '',
                state = dscc.models.device_type4_state.DeviceType4State(
                    detailed = [
                        ''
                        ], 
                    overall = 'STATE_NORMAL', ),
                state_description = [
                    ''
                    ],
                system_id = '7CE751P312',
                tgt_mode_write_opt = '',
                type = 'string',
                unique_wwn = '',
                vcn = '',
                virtual_ports = [
                    dscc.models.device_type4_port_details_virtual_ports_inner.DeviceType4PortDetails_virtualPorts_inner(
                        node_wwn = '2EF70202AC02AB1C', 
                        port_link_state = 'LINK_STATE_READY', 
                        port_wwn = '20320202AB12AC1D', )
                    ],
                vlans = [
                    dscc.models.device_type4vlan.DeviceType4vlan(
                        gateway_address = '', 
                        gateway_address_v6 = '', 
                        i_sns_primary_address = '', 
                        i_sns_tcp_port = '', 
                        ip_address = '', 
                        ip_address_v6 = '', 
                        mtu = '', 
                        send_target_group_tag = 56, 
                        subnet_mask = '', 
                        subnet_mask_v6 = '', 
                        target_portal_group_tag = 56, 
                        vlan_id = '', )
                    ]
            )
        else:
            return DeviceType4portsList(
        )
        """

    def testDeviceType4portsList(self):
        """Test DeviceType4portsList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
