# coding: utf-8

"""
    Data Services Cloud Console API

    Data Services Cloud Console API

    The version of the OpenAPI document: 1.6.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dscc.models.audit_results import AuditResults

class TestAuditResults(unittest.TestCase):
    """AuditResults unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AuditResults:
        """Test AuditResults
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AuditResults`
        """
        model = AuditResults()
        if include_optional:
            return AuditResults(
                items = [
                    dscc.models.audit_data.AuditData(
                        associated_resource = dscc.models.audit_resource.AuditResource(
                            id = 'volume123', 
                            name = 'dev volume', 
                            type = 'volume', ), 
                        code = 'eventcode', 
                        context_id = 'contextID', 
                        customer_id = 'customer123', 
                        id = 'id123', 
                        message = 'volume 123 created', 
                        occurred_at = '2020-09-08T16:51:33Z', 
                        permission = 'volume.create', 
                        scope = '/volume/foo', 
                        source = 'audit', 
                        source_ip_address = '1.2.3.4', 
                        state = 'Success', 
                        task_id = 'taskid123', 
                        unique_id = 'audit.event+6+12345678', 
                        user_email = 'abc@dev.com', 
                        version = 1, )
                    ],
                page_limit = 100,
                page_offset = 56,
                total = 123456
            )
        else:
            return AuditResults(
                items = [
                    dscc.models.audit_data.AuditData(
                        associated_resource = dscc.models.audit_resource.AuditResource(
                            id = 'volume123', 
                            name = 'dev volume', 
                            type = 'volume', ), 
                        code = 'eventcode', 
                        context_id = 'contextID', 
                        customer_id = 'customer123', 
                        id = 'id123', 
                        message = 'volume 123 created', 
                        occurred_at = '2020-09-08T16:51:33Z', 
                        permission = 'volume.create', 
                        scope = '/volume/foo', 
                        source = 'audit', 
                        source_ip_address = '1.2.3.4', 
                        state = 'Success', 
                        task_id = 'taskid123', 
                        unique_id = 'audit.event+6+12345678', 
                        user_email = 'abc@dev.com', 
                        version = 1, )
                    ],
                page_limit = 100,
                page_offset = 56,
                total = 123456,
        )
        """

    def testAuditResults(self):
        """Test AuditResults"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
